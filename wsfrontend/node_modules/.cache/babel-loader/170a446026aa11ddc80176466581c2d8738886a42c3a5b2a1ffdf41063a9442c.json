{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ChangeEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactUpdates = require('./ReactUpdates');\nvar SyntheticEvent = require('./SyntheticEvent');\nvar getEventTarget = require('./getEventTarget');\nvar isEventSupported = require('./isEventSupported');\nvar isTextInputElement = require('./isTextInputElement');\nvar keyOf = require('fbjs/lib/keyOf');\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onChange: null\n      }),\n      captured: keyOf({\n        onChangeCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]\n  }\n};\n\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementID = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\nvar doesChangeEventBubble = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);\n}\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue(false);\n}\nfunction startWatchingForChangeEventIE8(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementID = null;\n}\nfunction getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return topLevelTargetID;\n  }\n}\nfunction handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events\n  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);\n}\n\n/**\n * (For old IE.) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\nvar newValueProp = {\n  get: function () {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function (val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n\n/**\n * (For old IE.) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');\n\n  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only\n  // on DOM elements\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n\n/**\n * (For old IE.) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  // delete restores the original property definition\n  delete activeElement.value;\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n  activeElement = null;\n  activeElementID = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n\n/**\n * (For old IE.) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  var value = nativeEvent.srcElement.value;\n  if (value === activeElementValue) {\n    return;\n  }\n  activeElementValue = value;\n  manualDispatchChangeEvent(nativeEvent);\n}\n\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\nfunction getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return topLevelTargetID;\n  }\n}\n\n// For IE8 and IE9.\nfunction handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementID;\n    }\n  }\n}\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\nfunction getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return topLevelTargetID;\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n  eventTypes: eventTypes,\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var getTargetIDFunc, handleEventFunc;\n    if (shouldUseChangeEvent(topLevelTarget)) {\n      if (doesChangeEventBubble) {\n        getTargetIDFunc = getTargetIDForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(topLevelTarget)) {\n      if (isInputEventSupported) {\n        getTargetIDFunc = getTargetIDForInputEvent;\n      } else {\n        getTargetIDFunc = getTargetIDForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(topLevelTarget)) {\n      getTargetIDFunc = getTargetIDForClickEvent;\n    }\n    if (getTargetIDFunc) {\n      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);\n      if (targetID) {\n        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);\n        event.type = 'change';\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);\n    }\n  }\n};\nmodule.exports = ChangeEventPlugin;","map":{"version":3,"names":["EventConstants","require","EventPluginHub","EventPropagators","ExecutionEnvironment","ReactUpdates","SyntheticEvent","getEventTarget","isEventSupported","isTextInputElement","keyOf","topLevelTypes","eventTypes","change","phasedRegistrationNames","bubbled","onChange","captured","onChangeCapture","dependencies","topBlur","topChange","topClick","topFocus","topInput","topKeyDown","topKeyUp","topSelectionChange","activeElement","activeElementID","activeElementValue","activeElementValueProp","shouldUseChangeEvent","elem","nodeName","toLowerCase","type","doesChangeEventBubble","canUseDOM","document","documentMode","manualDispatchChangeEvent","nativeEvent","event","getPooled","accumulateTwoPhaseDispatches","batchedUpdates","runEventInBatch","enqueueEvents","processEventQueue","startWatchingForChangeEventIE8","target","targetID","attachEvent","stopWatchingForChangeEventIE8","detachEvent","getTargetIDForChangeEvent","topLevelType","topLevelTarget","topLevelTargetID","handleEventsForChangeEventIE8","isInputEventSupported","newValueProp","get","call","set","val","startWatchingForValueChange","value","Object","getOwnPropertyDescriptor","constructor","prototype","defineProperty","handlePropertyChange","stopWatchingForValueChange","propertyName","srcElement","getTargetIDForInputEvent","handleEventsForInputEventIE","getTargetIDForInputEventIE","shouldUseClickEvent","getTargetIDForClickEvent","ChangeEventPlugin","extractEvents","nativeEventTarget","getTargetIDFunc","handleEventFunc","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/ChangeEventPlugin.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ChangeEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactUpdates = require('./ReactUpdates');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getEventTarget = require('./getEventTarget');\nvar isEventSupported = require('./isEventSupported');\nvar isTextInputElement = require('./isTextInputElement');\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onChange: null }),\n      captured: keyOf({ onChangeCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]\n  }\n};\n\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementID = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n\nvar doesChangeEventBubble = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue(false);\n}\n\nfunction startWatchingForChangeEventIE8(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementID = null;\n}\n\nfunction getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return topLevelTargetID;\n  }\n}\nfunction handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events\n  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);\n}\n\n/**\n * (For old IE.) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\nvar newValueProp = {\n  get: function () {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function (val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n\n/**\n * (For old IE.) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');\n\n  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only\n  // on DOM elements\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n\n/**\n * (For old IE.) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  // delete restores the original property definition\n  delete activeElement.value;\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n\n  activeElement = null;\n  activeElementID = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n\n/**\n * (For old IE.) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  var value = nativeEvent.srcElement.value;\n  if (value === activeElementValue) {\n    return;\n  }\n  activeElementValue = value;\n\n  manualDispatchChangeEvent(nativeEvent);\n}\n\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\nfunction getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return topLevelTargetID;\n  }\n}\n\n// For IE8 and IE9.\nfunction handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementID;\n    }\n  }\n}\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return topLevelTargetID;\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n\n    var getTargetIDFunc, handleEventFunc;\n    if (shouldUseChangeEvent(topLevelTarget)) {\n      if (doesChangeEventBubble) {\n        getTargetIDFunc = getTargetIDForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(topLevelTarget)) {\n      if (isInputEventSupported) {\n        getTargetIDFunc = getTargetIDForInputEvent;\n      } else {\n        getTargetIDFunc = getTargetIDForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(topLevelTarget)) {\n      getTargetIDFunc = getTargetIDForClickEvent;\n    }\n\n    if (getTargetIDFunc) {\n      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);\n      if (targetID) {\n        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);\n        event.type = 'change';\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);\n    }\n  }\n\n};\n\nmodule.exports = ChangeEventPlugin;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}