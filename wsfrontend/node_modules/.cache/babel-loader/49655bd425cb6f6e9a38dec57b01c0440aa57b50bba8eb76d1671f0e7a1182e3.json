{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ferhat\\\\ws-project\\\\wsfrontend\\\\src\\\\shared\\\\ApiProgress.js\",\n  _s = $RefreshSig$();\nimport React, { Component, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const useApiProgress = apiPath => {\n  _s();\n  const [pendingApiCall, setPendingApiCall] = useState(false);\n  useEffect(() => {\n    let requestInterceptor, responseInterceptor;\n    const updateApiCallFor = (url, inProgress) => {\n      if (url === apiPath) {\n        setPendingApiCall(inProgress);\n      }\n    };\n    const registerInterceptors = () => {\n      requestInterceptor = axios.interceptors.request.use(request => {\n        updateApiCallFor(request.url, true);\n        return request;\n      });\n      this.responseInterceptor = axios.interceptors.response.use(response => {\n        this.updateApiCallFor(response.config.url, false);\n        return response;\n      }, error => {\n        this.updateApiCallFor(error.config.url, false);\n        throw error;\n      });\n    };\n    const unregisterInterceptor = () => {\n      axios.interceptors.request.eject(requestInterceptor);\n      axios.interceptors.response.eject(responseInterceptor);\n    };\n    registerInterceptors();\n    return function unmount() {\n      unregisterInterceptor();\n    };\n  });\n};\n_s(useApiProgress, \"dxeikoFXtsTGpF/7CQdkmajlavs=\");\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n}\nexport function withApiProgress(WrappedComponent, apiPath) {\n  var _class;\n  return _class = class extends Component {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        pendingApiCall: false\n      };\n      this.responseInterceptor = () => {\n        this.requestInterceptor = axios.interceptors.request.use(request => {\n          this.updateApiCallFor(request.url, true);\n          return request;\n        });\n        this.responseInterceptor = axios.interceptors.response.use(response => {\n          this.updateApiCallFor(response.config.url, false);\n          return response;\n        }, error => {\n          this.updateApiCallFor(error.config.url, false);\n          throw error;\n        });\n      };\n      this.unregisterInterceptor = () => {\n        axios.interceptors.request.eject(this.requestInterceptor);\n        axios.interceptors.response.eject(this.responseInterceptor);\n      };\n      this.updateApiCallFor = (url, inProgress) => {\n        if (url === apiPath) {\n          this.setState({\n            pendingApiCall: inProgress\n          });\n        }\n      };\n    }\n    componentDidMount() {\n      this.responseInterceptor();\n    }\n    componentWillUnmount() {\n      this.unregisterInterceptor();\n    }\n    render() {\n      const {\n        pendingApiCall\n      } = this.state.pendingApiCall || this.props.pendingApiCall;\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n        ...this.props,\n        pendingApiCall: pendingApiCall\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this);\n    }\n  }, _class.displayName = \"ApiProgress(\" + getDisplayName(WrappedComponent) + \")\", _class;\n}","map":{"version":3,"names":["React","Component","useState","useEffect","axios","jsxDEV","_jsxDEV","useApiProgress","apiPath","_s","pendingApiCall","setPendingApiCall","requestInterceptor","responseInterceptor","updateApiCallFor","url","inProgress","registerInterceptors","interceptors","request","use","response","config","error","unregisterInterceptor","eject","unmount","getDisplayName","WrappedComponent","displayName","name","withApiProgress","_class","constructor","arguments","state","setState","componentDidMount","componentWillUnmount","render","props","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/src/shared/ApiProgress.js"],"sourcesContent":["import React, { Component,useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nexport const useApiProgress = (apiPath) => {\r\n  const [pendingApiCall, setPendingApiCall] = useState(false);\r\n  useEffect(() => {\r\n    let requestInterceptor, responseInterceptor;\r\n\r\n    const updateApiCallFor = (url, inProgress) => {\r\n      if (url === apiPath) {\r\n        setPendingApiCall(inProgress);\r\n      }\r\n    };\r\n    const registerInterceptors = () => {\r\n      requestInterceptor = axios.interceptors.request.use((request) => {\r\n        updateApiCallFor(request.url, true);\r\n        return request;\r\n      });\r\n\r\n      this.responseInterceptor = axios.interceptors.response.use(\r\n        (response) => {\r\n          this.updateApiCallFor(response.config.url, false);\r\n\r\n          return response;\r\n        },\r\n        (error) => {\r\n          this.updateApiCallFor(error.config.url, false);\r\n          throw error;\r\n        }\r\n      );\r\n    };\r\n    const unregisterInterceptor = () => {\r\n      axios.interceptors.request.eject(requestInterceptor);\r\n      axios.interceptors.response.eject(responseInterceptor);\r\n    };\r\n\r\n    registerInterceptors();\r\n    return function unmount() {\r\n      unregisterInterceptor();\r\n    };\r\n  });\r\n};\r\n\r\nfunction getDisplayName(WrappedComponent) {\r\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\r\n}\r\n\r\nexport function withApiProgress(WrappedComponent, apiPath) {\r\n  return class extends Component {\r\n    static displayName =\r\n      \"ApiProgress(\" + getDisplayName(WrappedComponent) + \")\";\r\n    state = {\r\n      pendingApiCall: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n      this.responseInterceptor();\r\n    }\r\n    componentWillUnmount() {\r\n      this.unregisterInterceptor();\r\n    }\r\n    responseInterceptor = () => {\r\n      this.requestInterceptor = axios.interceptors.request.use((request) => {\r\n        this.updateApiCallFor(request.url, true);\r\n        return request;\r\n      });\r\n\r\n      this.responseInterceptor = axios.interceptors.response.use(\r\n        (response) => {\r\n          this.updateApiCallFor(response.config.url, false);\r\n\r\n          return response;\r\n        },\r\n        (error) => {\r\n          this.updateApiCallFor(error.config.url, false);\r\n          throw error;\r\n        }\r\n      );\r\n    };\r\n\r\n    unregisterInterceptor = () => {\r\n      axios.interceptors.request.eject(this.requestInterceptor);\r\n      axios.interceptors.response.eject(this.responseInterceptor);\r\n    };\r\n\r\n    updateApiCallFor = (url, inProgress) => {\r\n      if (url === apiPath) {\r\n        this.setState({ pendingApiCall: inProgress });\r\n      }\r\n    };\r\n    render() {\r\n      const { pendingApiCall } =\r\n        this.state.pendingApiCall || this.props.pendingApiCall;\r\n      return (\r\n        <WrappedComponent {...this.props} pendingApiCall={pendingApiCall} />\r\n      );\r\n    }\r\n  };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}