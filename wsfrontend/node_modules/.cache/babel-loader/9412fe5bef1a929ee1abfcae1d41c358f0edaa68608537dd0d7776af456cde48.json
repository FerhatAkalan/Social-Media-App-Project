{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticClipboardEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\nvar ClipboardEventInterface = {\n  clipboardData: function (event) {\n    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\nSyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);\nmodule.exports = SyntheticClipboardEvent;","map":{"version":3,"names":["SyntheticEvent","require","ClipboardEventInterface","clipboardData","event","window","SyntheticClipboardEvent","dispatchConfig","dispatchMarker","nativeEvent","nativeEventTarget","call","augmentClass","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/SyntheticClipboardEvent.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticClipboardEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\nvar ClipboardEventInterface = {\n  clipboardData: function (event) {\n    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);\n\nmodule.exports = SyntheticClipboardEvent;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAkB,CAAC;;AAEhD;AACA;AACA;AACA;AACA,IAAIC,uBAAuB,GAAG;EAC5BC,aAAa,EAAE,SAAAA,CAAUC,KAAK,EAAE;IAC9B,OAAO,eAAe,IAAIA,KAAK,GAAGA,KAAK,CAACD,aAAa,GAAGE,MAAM,CAACF,aAAa;EAC9E;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,uBAAuBA,CAACC,cAAc,EAAEC,cAAc,EAAEC,WAAW,EAAEC,iBAAiB,EAAE;EAC/FV,cAAc,CAACW,IAAI,CAAC,IAAI,EAAEJ,cAAc,EAAEC,cAAc,EAAEC,WAAW,EAAEC,iBAAiB,CAAC;AAC3F;AAEAV,cAAc,CAACY,YAAY,CAACN,uBAAuB,EAAEJ,uBAAuB,CAAC;AAE7EW,MAAM,CAACC,OAAO,GAAGR,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}