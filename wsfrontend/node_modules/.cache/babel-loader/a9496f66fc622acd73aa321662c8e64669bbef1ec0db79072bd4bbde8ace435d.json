{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n'use strict';\n\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar EventPluginUtils = require('./EventPluginUtils');\nvar ReactErrorUtils = require('./ReactErrorUtils');\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\nvar executeDispatchesAndRelease = function (event, simulated) {\n  if (event) {\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nvar executeDispatchesAndReleaseSimulated = function (e) {\n  return executeDispatchesAndRelease(e, true);\n};\nvar executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e, false);\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\nfunction validateInstanceHandle() {\n  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;\n  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function (InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n    },\n    getInstanceHandle: function () {\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n  },\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function (id, registrationName, listener) {\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.didPutListener) {\n      PluginModule.didPutListener(id, registrationName, listener);\n    }\n  },\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (id, registrationName) {\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.willDeleteListener) {\n      PluginModule.willDeleteListener(id, registrationName);\n    }\n    var bankForRegistrationName = listenerBank[registrationName];\n    // TODO: This should never be null -- when is it?\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function (id) {\n    for (var registrationName in listenerBank) {\n      if (!listenerBank[registrationName][id]) {\n        continue;\n      }\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n      if (PluginModule && PluginModule.willDeleteListener) {\n        PluginModule.willDeleteListener(id, registrationName);\n      }\n      delete listenerBank[registrationName][id];\n    }\n  },\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0; i < plugins.length; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function (simulated) {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    if (simulated) {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);\n    } else {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n    }\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;\n    // This would be a good time to rethrow if any of the event handlers threw.\n    ReactErrorUtils.rethrowCaughtError();\n  },\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n};\nmodule.exports = EventPluginHub;","map":{"version":3,"names":["EventPluginRegistry","require","EventPluginUtils","ReactErrorUtils","accumulateInto","forEachAccumulated","invariant","warning","listenerBank","eventQueue","executeDispatchesAndRelease","event","simulated","executeDispatchesInOrder","isPersistent","constructor","release","executeDispatchesAndReleaseSimulated","e","executeDispatchesAndReleaseTopLevel","InstanceHandle","validateInstanceHandle","valid","traverseTwoPhase","traverseEnterLeave","process","env","NODE_ENV","undefined","EventPluginHub","injection","injectMount","injectInstanceHandle","InjectedInstanceHandle","getInstanceHandle","injectEventPluginOrder","injectEventPluginsByName","eventNameDispatchConfigs","registrationNameModules","putListener","id","registrationName","listener","bankForRegistrationName","PluginModule","didPutListener","getListener","deleteListener","willDeleteListener","deleteAllListeners","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","nativeEvent","nativeEventTarget","events","plugins","i","length","possiblePlugin","extractedEvents","enqueueEvents","processEventQueue","processingEventQueue","rethrowCaughtError","__purge","__getListenerBank","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/EventPluginHub.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n'use strict';\n\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar EventPluginUtils = require('./EventPluginUtils');\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\nvar executeDispatchesAndRelease = function (event, simulated) {\n  if (event) {\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nvar executeDispatchesAndReleaseSimulated = function (e) {\n  return executeDispatchesAndRelease(e, true);\n};\nvar executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e, false);\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;\n  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function (InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n    },\n\n    getInstanceHandle: function () {\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function (id, registrationName, listener) {\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;\n\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.didPutListener) {\n      PluginModule.didPutListener(id, registrationName, listener);\n    }\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (id, registrationName) {\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.willDeleteListener) {\n      PluginModule.willDeleteListener(id, registrationName);\n    }\n\n    var bankForRegistrationName = listenerBank[registrationName];\n    // TODO: This should never be null -- when is it?\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function (id) {\n    for (var registrationName in listenerBank) {\n      if (!listenerBank[registrationName][id]) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n      if (PluginModule && PluginModule.willDeleteListener) {\n        PluginModule.willDeleteListener(id, registrationName);\n      }\n\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0; i < plugins.length; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function (simulated) {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    if (simulated) {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);\n    } else {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n    }\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;\n    // This would be a good time to rethrow if any of the event handlers threw.\n    ReactErrorUtils.rethrowCaughtError();\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports = EventPluginHub;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}