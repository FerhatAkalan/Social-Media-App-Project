{"ast":null,"code":"import { Buffer } from 'node:buffer';\nimport * as Token from 'token-types';\nimport * as strtok3 from 'strtok3/core'; // eslint-disable-line n/file-extension-in-import\nimport { stringToBytes, tarHeaderChecksumMatches, uint32SyncSafeToken } from './util.js';\nimport { extensions, mimeTypes } from './supported.js';\nconst minimumBytes = 4100; // A fair amount of file-types are detectable within this range.\n\nexport async function fileTypeFromStream(stream) {\n  const tokenizer = await strtok3.fromStream(stream);\n  try {\n    return await fileTypeFromTokenizer(tokenizer);\n  } finally {\n    await tokenizer.close();\n  }\n}\nexport async function fileTypeFromBuffer(input) {\n  if (!(input instanceof Uint8Array || input instanceof ArrayBuffer)) {\n    throw new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``);\n  }\n  const buffer = input instanceof Uint8Array ? input : new Uint8Array(input);\n  if (!(buffer?.length > 1)) {\n    return;\n  }\n  return fileTypeFromTokenizer(strtok3.fromBuffer(buffer));\n}\nexport async function fileTypeFromBlob(blob) {\n  const buffer = await blob.arrayBuffer();\n  return fileTypeFromBuffer(new Uint8Array(buffer));\n}\nfunction _check(buffer, headers, options) {\n  options = {\n    offset: 0,\n    ...options\n  };\n  for (const [index, header] of headers.entries()) {\n    // If a bitmask is set\n    if (options.mask) {\n      // If header doesn't equal `buf` with bits masked off\n      if (header !== (options.mask[index] & buffer[index + options.offset])) {\n        return false;\n      }\n    } else if (header !== buffer[index + options.offset]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport async function fileTypeFromTokenizer(tokenizer) {\n  try {\n    return new FileTypeParser().parse(tokenizer);\n  } catch (error) {\n    if (!(error instanceof strtok3.EndOfStreamError)) {\n      throw error;\n    }\n  }\n}\nclass FileTypeParser {\n  check(header, options) {\n    return _check(this.buffer, header, options);\n  }\n  checkString(header, options) {\n    return this.check(stringToBytes(header), options);\n  }\n  async parse(tokenizer) {\n    this.buffer = Buffer.alloc(minimumBytes);\n\n    // Keep reading until EOF if the file size is unknown.\n    if (tokenizer.fileInfo.size === undefined) {\n      tokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\n    }\n    this.tokenizer = tokenizer;\n    await tokenizer.peekBuffer(this.buffer, {\n      length: 12,\n      mayBeLess: true\n    });\n\n    // -- 2-byte signatures --\n\n    if (this.check([0x42, 0x4D])) {\n      return {\n        ext: 'bmp',\n        mime: 'image/bmp'\n      };\n    }\n    if (this.check([0x0B, 0x77])) {\n      return {\n        ext: 'ac3',\n        mime: 'audio/vnd.dolby.dd-raw'\n      };\n    }\n    if (this.check([0x78, 0x01])) {\n      return {\n        ext: 'dmg',\n        mime: 'application/x-apple-diskimage'\n      };\n    }\n    if (this.check([0x4D, 0x5A])) {\n      return {\n        ext: 'exe',\n        mime: 'application/x-msdownload'\n      };\n    }\n    if (this.check([0x25, 0x21])) {\n      await tokenizer.peekBuffer(this.buffer, {\n        length: 24,\n        mayBeLess: true\n      });\n      if (this.checkString('PS-Adobe-', {\n        offset: 2\n      }) && this.checkString(' EPSF-', {\n        offset: 14\n      })) {\n        return {\n          ext: 'eps',\n          mime: 'application/eps'\n        };\n      }\n      return {\n        ext: 'ps',\n        mime: 'application/postscript'\n      };\n    }\n    if (this.check([0x1F, 0xA0]) || this.check([0x1F, 0x9D])) {\n      return {\n        ext: 'Z',\n        mime: 'application/x-compress'\n      };\n    }\n    if (this.check([0xC7, 0x71])) {\n      return {\n        ext: 'cpio',\n        mime: 'application/x-cpio'\n      };\n    }\n    if (this.check([0x60, 0xEA])) {\n      return {\n        ext: 'arj',\n        mime: 'application/x-arj'\n      };\n    }\n\n    // -- 3-byte signatures --\n\n    if (this.check([0xEF, 0xBB, 0xBF])) {\n      // UTF-8-BOM\n      // Strip off UTF-8-BOM\n      this.tokenizer.ignore(3);\n      return this.parse(tokenizer);\n    }\n    if (this.check([0x47, 0x49, 0x46])) {\n      return {\n        ext: 'gif',\n        mime: 'image/gif'\n      };\n    }\n    if (this.check([0x49, 0x49, 0xBC])) {\n      return {\n        ext: 'jxr',\n        mime: 'image/vnd.ms-photo'\n      };\n    }\n    if (this.check([0x1F, 0x8B, 0x8])) {\n      return {\n        ext: 'gz',\n        mime: 'application/gzip'\n      };\n    }\n    if (this.check([0x42, 0x5A, 0x68])) {\n      return {\n        ext: 'bz2',\n        mime: 'application/x-bzip2'\n      };\n    }\n    if (this.checkString('ID3')) {\n      await tokenizer.ignore(6); // Skip ID3 header until the header size\n      const id3HeaderLength = await tokenizer.readToken(uint32SyncSafeToken);\n      if (tokenizer.position + id3HeaderLength > tokenizer.fileInfo.size) {\n        // Guess file type based on ID3 header for backward compatibility\n        return {\n          ext: 'mp3',\n          mime: 'audio/mpeg'\n        };\n      }\n      await tokenizer.ignore(id3HeaderLength);\n      return fileTypeFromTokenizer(tokenizer); // Skip ID3 header, recursion\n    }\n\n    // Musepack, SV7\n    if (this.checkString('MP+')) {\n      return {\n        ext: 'mpc',\n        mime: 'audio/x-musepack'\n      };\n    }\n    if ((this.buffer[0] === 0x43 || this.buffer[0] === 0x46) && this.check([0x57, 0x53], {\n      offset: 1\n    })) {\n      return {\n        ext: 'swf',\n        mime: 'application/x-shockwave-flash'\n      };\n    }\n\n    // -- 4-byte signatures --\n\n    // Requires a sample size of 4 bytes\n    if (this.check([0xFF, 0xD8, 0xFF])) {\n      if (this.check([0xF7], {\n        offset: 3\n      })) {\n        // JPG7/SOF55, indicating a ISO/IEC 14495 / JPEG-LS file\n        return {\n          ext: 'jls',\n          mime: 'image/jls'\n        };\n      }\n      return {\n        ext: 'jpg',\n        mime: 'image/jpeg'\n      };\n    }\n    if (this.check([0x4F, 0x62, 0x6A, 0x01])) {\n      return {\n        ext: 'avro',\n        mime: 'application/avro'\n      };\n    }\n    if (this.checkString('FLIF')) {\n      return {\n        ext: 'flif',\n        mime: 'image/flif'\n      };\n    }\n    if (this.checkString('8BPS')) {\n      return {\n        ext: 'psd',\n        mime: 'image/vnd.adobe.photoshop'\n      };\n    }\n    if (this.checkString('WEBP', {\n      offset: 8\n    })) {\n      return {\n        ext: 'webp',\n        mime: 'image/webp'\n      };\n    }\n\n    // Musepack, SV8\n    if (this.checkString('MPCK')) {\n      return {\n        ext: 'mpc',\n        mime: 'audio/x-musepack'\n      };\n    }\n    if (this.checkString('FORM')) {\n      return {\n        ext: 'aif',\n        mime: 'audio/aiff'\n      };\n    }\n    if (this.checkString('icns', {\n      offset: 0\n    })) {\n      return {\n        ext: 'icns',\n        mime: 'image/icns'\n      };\n    }\n\n    // Zip-based file formats\n    // Need to be before the `zip` check\n    if (this.check([0x50, 0x4B, 0x3, 0x4])) {\n      // Local file header signature\n      try {\n        while (tokenizer.position + 30 < tokenizer.fileInfo.size) {\n          await tokenizer.readBuffer(this.buffer, {\n            length: 30\n          });\n\n          // https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers\n          const zipHeader = {\n            compressedSize: this.buffer.readUInt32LE(18),\n            uncompressedSize: this.buffer.readUInt32LE(22),\n            filenameLength: this.buffer.readUInt16LE(26),\n            extraFieldLength: this.buffer.readUInt16LE(28)\n          };\n          zipHeader.filename = await tokenizer.readToken(new Token.StringType(zipHeader.filenameLength, 'utf-8'));\n          await tokenizer.ignore(zipHeader.extraFieldLength);\n\n          // Assumes signed `.xpi` from addons.mozilla.org\n          if (zipHeader.filename === 'META-INF/mozilla.rsa') {\n            return {\n              ext: 'xpi',\n              mime: 'application/x-xpinstall'\n            };\n          }\n          if (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {\n            const type = zipHeader.filename.split('/')[0];\n            switch (type) {\n              case '_rels':\n                break;\n              case 'word':\n                return {\n                  ext: 'docx',\n                  mime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n                };\n              case 'ppt':\n                return {\n                  ext: 'pptx',\n                  mime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n                };\n              case 'xl':\n                return {\n                  ext: 'xlsx',\n                  mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n                };\n              default:\n                break;\n            }\n          }\n          if (zipHeader.filename.startsWith('xl/')) {\n            return {\n              ext: 'xlsx',\n              mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n            };\n          }\n          if (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {\n            return {\n              ext: '3mf',\n              mime: 'model/3mf'\n            };\n          }\n\n          // The docx, xlsx and pptx file types extend the Office Open XML file format:\n          // https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\n          // We look for:\n          // - one entry named '[Content_Types].xml' or '_rels/.rels',\n          // - one entry indicating specific type of file.\n          // MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.\n          if (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {\n            let mimeType = await tokenizer.readToken(new Token.StringType(zipHeader.compressedSize, 'utf-8'));\n            mimeType = mimeType.trim();\n            switch (mimeType) {\n              case 'application/epub+zip':\n                return {\n                  ext: 'epub',\n                  mime: 'application/epub+zip'\n                };\n              case 'application/vnd.oasis.opendocument.text':\n                return {\n                  ext: 'odt',\n                  mime: 'application/vnd.oasis.opendocument.text'\n                };\n              case 'application/vnd.oasis.opendocument.spreadsheet':\n                return {\n                  ext: 'ods',\n                  mime: 'application/vnd.oasis.opendocument.spreadsheet'\n                };\n              case 'application/vnd.oasis.opendocument.presentation':\n                return {\n                  ext: 'odp',\n                  mime: 'application/vnd.oasis.opendocument.presentation'\n                };\n              default:\n            }\n          }\n\n          // Try to find next header manually when current one is corrupted\n          if (zipHeader.compressedSize === 0) {\n            let nextHeaderIndex = -1;\n            while (nextHeaderIndex < 0 && tokenizer.position < tokenizer.fileInfo.size) {\n              await tokenizer.peekBuffer(this.buffer, {\n                mayBeLess: true\n              });\n              nextHeaderIndex = this.buffer.indexOf('504B0304', 0, 'hex');\n              // Move position to the next header if found, skip the whole buffer otherwise\n              await tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : this.buffer.length);\n            }\n          } else {\n            await tokenizer.ignore(zipHeader.compressedSize);\n          }\n        }\n      } catch (error) {\n        if (!(error instanceof strtok3.EndOfStreamError)) {\n          throw error;\n        }\n      }\n      return {\n        ext: 'zip',\n        mime: 'application/zip'\n      };\n    }\n    if (this.checkString('OggS')) {\n      // This is an OGG container\n      await tokenizer.ignore(28);\n      const type = Buffer.alloc(8);\n      await tokenizer.readBuffer(type);\n\n      // Needs to be before `ogg` check\n      if (_check(type, [0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64])) {\n        return {\n          ext: 'opus',\n          mime: 'audio/opus'\n        };\n      }\n\n      // If ' theora' in header.\n      if (_check(type, [0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61])) {\n        return {\n          ext: 'ogv',\n          mime: 'video/ogg'\n        };\n      }\n\n      // If '\\x01video' in header.\n      if (_check(type, [0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00])) {\n        return {\n          ext: 'ogm',\n          mime: 'video/ogg'\n        };\n      }\n\n      // If ' FLAC' in header  https://xiph.org/flac/faq.html\n      if (_check(type, [0x7F, 0x46, 0x4C, 0x41, 0x43])) {\n        return {\n          ext: 'oga',\n          mime: 'audio/ogg'\n        };\n      }\n\n      // 'Speex  ' in header https://en.wikipedia.org/wiki/Speex\n      if (_check(type, [0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20])) {\n        return {\n          ext: 'spx',\n          mime: 'audio/ogg'\n        };\n      }\n\n      // If '\\x01vorbis' in header\n      if (_check(type, [0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73])) {\n        return {\n          ext: 'ogg',\n          mime: 'audio/ogg'\n        };\n      }\n\n      // Default OGG container https://www.iana.org/assignments/media-types/application/ogg\n      return {\n        ext: 'ogx',\n        mime: 'application/ogg'\n      };\n    }\n    if (this.check([0x50, 0x4B]) && (this.buffer[2] === 0x3 || this.buffer[2] === 0x5 || this.buffer[2] === 0x7) && (this.buffer[3] === 0x4 || this.buffer[3] === 0x6 || this.buffer[3] === 0x8)) {\n      return {\n        ext: 'zip',\n        mime: 'application/zip'\n      };\n    }\n\n    //\n\n    // File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)\n    // It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.\n    // `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.\n    // Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).\n    if (this.checkString('ftyp', {\n      offset: 4\n    }) && (this.buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?\n    ) {\n      // They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.\n      // For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.\n      const brandMajor = this.buffer.toString('binary', 8, 12).replace('\\0', ' ').trim();\n      switch (brandMajor) {\n        case 'avif':\n        case 'avis':\n          return {\n            ext: 'avif',\n            mime: 'image/avif'\n          };\n        case 'mif1':\n          return {\n            ext: 'heic',\n            mime: 'image/heif'\n          };\n        case 'msf1':\n          return {\n            ext: 'heic',\n            mime: 'image/heif-sequence'\n          };\n        case 'heic':\n        case 'heix':\n          return {\n            ext: 'heic',\n            mime: 'image/heic'\n          };\n        case 'hevc':\n        case 'hevx':\n          return {\n            ext: 'heic',\n            mime: 'image/heic-sequence'\n          };\n        case 'qt':\n          return {\n            ext: 'mov',\n            mime: 'video/quicktime'\n          };\n        case 'M4V':\n        case 'M4VH':\n        case 'M4VP':\n          return {\n            ext: 'm4v',\n            mime: 'video/x-m4v'\n          };\n        case 'M4P':\n          return {\n            ext: 'm4p',\n            mime: 'video/mp4'\n          };\n        case 'M4B':\n          return {\n            ext: 'm4b',\n            mime: 'audio/mp4'\n          };\n        case 'M4A':\n          return {\n            ext: 'm4a',\n            mime: 'audio/x-m4a'\n          };\n        case 'F4V':\n          return {\n            ext: 'f4v',\n            mime: 'video/mp4'\n          };\n        case 'F4P':\n          return {\n            ext: 'f4p',\n            mime: 'video/mp4'\n          };\n        case 'F4A':\n          return {\n            ext: 'f4a',\n            mime: 'audio/mp4'\n          };\n        case 'F4B':\n          return {\n            ext: 'f4b',\n            mime: 'audio/mp4'\n          };\n        case 'crx':\n          return {\n            ext: 'cr3',\n            mime: 'image/x-canon-cr3'\n          };\n        default:\n          if (brandMajor.startsWith('3g')) {\n            if (brandMajor.startsWith('3g2')) {\n              return {\n                ext: '3g2',\n                mime: 'video/3gpp2'\n              };\n            }\n            return {\n              ext: '3gp',\n              mime: 'video/3gpp'\n            };\n          }\n          return {\n            ext: 'mp4',\n            mime: 'video/mp4'\n          };\n      }\n    }\n    if (this.checkString('MThd')) {\n      return {\n        ext: 'mid',\n        mime: 'audio/midi'\n      };\n    }\n    if (this.checkString('wOFF') && (this.check([0x00, 0x01, 0x00, 0x00], {\n      offset: 4\n    }) || this.checkString('OTTO', {\n      offset: 4\n    }))) {\n      return {\n        ext: 'woff',\n        mime: 'font/woff'\n      };\n    }\n    if (this.checkString('wOF2') && (this.check([0x00, 0x01, 0x00, 0x00], {\n      offset: 4\n    }) || this.checkString('OTTO', {\n      offset: 4\n    }))) {\n      return {\n        ext: 'woff2',\n        mime: 'font/woff2'\n      };\n    }\n    if (this.check([0xD4, 0xC3, 0xB2, 0xA1]) || this.check([0xA1, 0xB2, 0xC3, 0xD4])) {\n      return {\n        ext: 'pcap',\n        mime: 'application/vnd.tcpdump.pcap'\n      };\n    }\n\n    // Sony DSD Stream File (DSF)\n    if (this.checkString('DSD ')) {\n      return {\n        ext: 'dsf',\n        mime: 'audio/x-dsf' // Non-standard\n      };\n    }\n\n    if (this.checkString('LZIP')) {\n      return {\n        ext: 'lz',\n        mime: 'application/x-lzip'\n      };\n    }\n    if (this.checkString('fLaC')) {\n      return {\n        ext: 'flac',\n        mime: 'audio/x-flac'\n      };\n    }\n    if (this.check([0x42, 0x50, 0x47, 0xFB])) {\n      return {\n        ext: 'bpg',\n        mime: 'image/bpg'\n      };\n    }\n    if (this.checkString('wvpk')) {\n      return {\n        ext: 'wv',\n        mime: 'audio/wavpack'\n      };\n    }\n    if (this.checkString('%PDF')) {\n      try {\n        await tokenizer.ignore(1350);\n        const maxBufferSize = 10 * 1024 * 1024;\n        const buffer = Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));\n        await tokenizer.readBuffer(buffer, {\n          mayBeLess: true\n        });\n\n        // Check if this is an Adobe Illustrator file\n        if (buffer.includes(Buffer.from('AIPrivateData'))) {\n          return {\n            ext: 'ai',\n            mime: 'application/postscript'\n          };\n        }\n      } catch (error) {\n        // Swallow end of stream error if file is too small for the Adobe AI check\n        if (!(error instanceof strtok3.EndOfStreamError)) {\n          throw error;\n        }\n      }\n\n      // Assume this is just a normal PDF\n      return {\n        ext: 'pdf',\n        mime: 'application/pdf'\n      };\n    }\n    if (this.check([0x00, 0x61, 0x73, 0x6D])) {\n      return {\n        ext: 'wasm',\n        mime: 'application/wasm'\n      };\n    }\n\n    // TIFF, little-endian type\n    if (this.check([0x49, 0x49])) {\n      const fileType = await this.readTiffHeader(false);\n      if (fileType) {\n        return fileType;\n      }\n    }\n\n    // TIFF, big-endian type\n    if (this.check([0x4D, 0x4D])) {\n      const fileType = await this.readTiffHeader(true);\n      if (fileType) {\n        return fileType;\n      }\n    }\n    if (this.checkString('MAC ')) {\n      return {\n        ext: 'ape',\n        mime: 'audio/ape'\n      };\n    }\n\n    // https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska\n    if (this.check([0x1A, 0x45, 0xDF, 0xA3])) {\n      // Root element: EBML\n      async function readField() {\n        const msb = await tokenizer.peekNumber(Token.UINT8);\n        let mask = 0x80;\n        let ic = 0; // 0 = A, 1 = B, 2 = C, 3\n        // = D\n\n        while ((msb & mask) === 0 && mask !== 0) {\n          ++ic;\n          mask >>= 1;\n        }\n        const id = Buffer.alloc(ic + 1);\n        await tokenizer.readBuffer(id);\n        return id;\n      }\n      async function readElement() {\n        const id = await readField();\n        const lengthField = await readField();\n        lengthField[0] ^= 0x80 >> lengthField.length - 1;\n        const nrLength = Math.min(6, lengthField.length); // JavaScript can max read 6 bytes integer\n        return {\n          id: id.readUIntBE(0, id.length),\n          len: lengthField.readUIntBE(lengthField.length - nrLength, nrLength)\n        };\n      }\n      async function readChildren(children) {\n        while (children > 0) {\n          const element = await readElement();\n          if (element.id === 0x42_82) {\n            const rawValue = await tokenizer.readToken(new Token.StringType(element.len, 'utf-8'));\n            return rawValue.replace(/\\00.*$/g, ''); // Return DocType\n          }\n\n          await tokenizer.ignore(element.len); // ignore payload\n          --children;\n        }\n      }\n      const re = await readElement();\n      const docType = await readChildren(re.len);\n      switch (docType) {\n        case 'webm':\n          return {\n            ext: 'webm',\n            mime: 'video/webm'\n          };\n        case 'matroska':\n          return {\n            ext: 'mkv',\n            mime: 'video/x-matroska'\n          };\n        default:\n          return;\n      }\n    }\n\n    // RIFF file format which might be AVI, WAV, QCP, etc\n    if (this.check([0x52, 0x49, 0x46, 0x46])) {\n      if (this.check([0x41, 0x56, 0x49], {\n        offset: 8\n      })) {\n        return {\n          ext: 'avi',\n          mime: 'video/vnd.avi'\n        };\n      }\n      if (this.check([0x57, 0x41, 0x56, 0x45], {\n        offset: 8\n      })) {\n        return {\n          ext: 'wav',\n          mime: 'audio/vnd.wave'\n        };\n      }\n\n      // QLCM, QCP file\n      if (this.check([0x51, 0x4C, 0x43, 0x4D], {\n        offset: 8\n      })) {\n        return {\n          ext: 'qcp',\n          mime: 'audio/qcelp'\n        };\n      }\n    }\n    if (this.checkString('SQLi')) {\n      return {\n        ext: 'sqlite',\n        mime: 'application/x-sqlite3'\n      };\n    }\n    if (this.check([0x4E, 0x45, 0x53, 0x1A])) {\n      return {\n        ext: 'nes',\n        mime: 'application/x-nintendo-nes-rom'\n      };\n    }\n    if (this.checkString('Cr24')) {\n      return {\n        ext: 'crx',\n        mime: 'application/x-google-chrome-extension'\n      };\n    }\n    if (this.checkString('MSCF') || this.checkString('ISc(')) {\n      return {\n        ext: 'cab',\n        mime: 'application/vnd.ms-cab-compressed'\n      };\n    }\n    if (this.check([0xED, 0xAB, 0xEE, 0xDB])) {\n      return {\n        ext: 'rpm',\n        mime: 'application/x-rpm'\n      };\n    }\n    if (this.check([0xC5, 0xD0, 0xD3, 0xC6])) {\n      return {\n        ext: 'eps',\n        mime: 'application/eps'\n      };\n    }\n    if (this.check([0x28, 0xB5, 0x2F, 0xFD])) {\n      return {\n        ext: 'zst',\n        mime: 'application/zstd'\n      };\n    }\n    if (this.check([0x7F, 0x45, 0x4C, 0x46])) {\n      return {\n        ext: 'elf',\n        mime: 'application/x-elf'\n      };\n    }\n    if (this.check([0x21, 0x42, 0x44, 0x4E])) {\n      return {\n        ext: 'pst',\n        mime: 'application/vnd.ms-outlook'\n      };\n    }\n    if (this.checkString('PAR1')) {\n      return {\n        ext: 'parquet',\n        mime: 'application/x-parquet'\n      };\n    }\n\n    // -- 5-byte signatures --\n\n    if (this.check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {\n      return {\n        ext: 'otf',\n        mime: 'font/otf'\n      };\n    }\n    if (this.checkString('#!AMR')) {\n      return {\n        ext: 'amr',\n        mime: 'audio/amr'\n      };\n    }\n    if (this.checkString('{\\\\rtf')) {\n      return {\n        ext: 'rtf',\n        mime: 'application/rtf'\n      };\n    }\n    if (this.check([0x46, 0x4C, 0x56, 0x01])) {\n      return {\n        ext: 'flv',\n        mime: 'video/x-flv'\n      };\n    }\n    if (this.checkString('IMPM')) {\n      return {\n        ext: 'it',\n        mime: 'audio/x-it'\n      };\n    }\n    if (this.checkString('-lh0-', {\n      offset: 2\n    }) || this.checkString('-lh1-', {\n      offset: 2\n    }) || this.checkString('-lh2-', {\n      offset: 2\n    }) || this.checkString('-lh3-', {\n      offset: 2\n    }) || this.checkString('-lh4-', {\n      offset: 2\n    }) || this.checkString('-lh5-', {\n      offset: 2\n    }) || this.checkString('-lh6-', {\n      offset: 2\n    }) || this.checkString('-lh7-', {\n      offset: 2\n    }) || this.checkString('-lzs-', {\n      offset: 2\n    }) || this.checkString('-lz4-', {\n      offset: 2\n    }) || this.checkString('-lz5-', {\n      offset: 2\n    }) || this.checkString('-lhd-', {\n      offset: 2\n    })) {\n      return {\n        ext: 'lzh',\n        mime: 'application/x-lzh-compressed'\n      };\n    }\n\n    // MPEG program stream (PS or MPEG-PS)\n    if (this.check([0x00, 0x00, 0x01, 0xBA])) {\n      //  MPEG-PS, MPEG-1 Part 1\n      if (this.check([0x21], {\n        offset: 4,\n        mask: [0xF1]\n      })) {\n        return {\n          ext: 'mpg',\n          // May also be .ps, .mpeg\n          mime: 'video/MP1S'\n        };\n      }\n\n      // MPEG-PS, MPEG-2 Part 1\n      if (this.check([0x44], {\n        offset: 4,\n        mask: [0xC4]\n      })) {\n        return {\n          ext: 'mpg',\n          // May also be .mpg, .m2p, .vob or .sub\n          mime: 'video/MP2P'\n        };\n      }\n    }\n    if (this.checkString('ITSF')) {\n      return {\n        ext: 'chm',\n        mime: 'application/vnd.ms-htmlhelp'\n      };\n    }\n    if (this.check([0xCA, 0xFE, 0xBA, 0xBE])) {\n      return {\n        ext: 'class',\n        mime: 'application/java-vm'\n      };\n    }\n\n    // -- 6-byte signatures --\n\n    if (this.check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {\n      return {\n        ext: 'xz',\n        mime: 'application/x-xz'\n      };\n    }\n    if (this.checkString('<?xml ')) {\n      return {\n        ext: 'xml',\n        mime: 'application/xml'\n      };\n    }\n    if (this.check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {\n      return {\n        ext: '7z',\n        mime: 'application/x-7z-compressed'\n      };\n    }\n    if (this.check([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7]) && (this.buffer[6] === 0x0 || this.buffer[6] === 0x1)) {\n      return {\n        ext: 'rar',\n        mime: 'application/x-rar-compressed'\n      };\n    }\n    if (this.checkString('solid ')) {\n      return {\n        ext: 'stl',\n        mime: 'model/stl'\n      };\n    }\n    if (this.checkString('AC')) {\n      const version = this.buffer.toString('binary', 2, 6);\n      if (version.match('^d*') && version >= 1000 && version <= 1050) {\n        return {\n          ext: 'dwg',\n          mime: 'image/vnd.dwg'\n        };\n      }\n    }\n    if (this.checkString('070707')) {\n      return {\n        ext: 'cpio',\n        mime: 'application/x-cpio'\n      };\n    }\n\n    // -- 7-byte signatures --\n\n    if (this.checkString('BLENDER')) {\n      return {\n        ext: 'blend',\n        mime: 'application/x-blender'\n      };\n    }\n    if (this.checkString('!<arch>')) {\n      await tokenizer.ignore(8);\n      const string = await tokenizer.readToken(new Token.StringType(13, 'ascii'));\n      if (string === 'debian-binary') {\n        return {\n          ext: 'deb',\n          mime: 'application/x-deb'\n        };\n      }\n      return {\n        ext: 'ar',\n        mime: 'application/x-unix-archive'\n      };\n    }\n    if (this.checkString('**ACE', {\n      offset: 7\n    })) {\n      await tokenizer.peekBuffer(this.buffer, {\n        length: 14,\n        mayBeLess: true\n      });\n      if (this.checkString('**', {\n        offset: 12\n      })) {\n        return {\n          ext: 'ace',\n          mime: 'application/x-ace-compressed'\n        };\n      }\n    }\n\n    // -- 8-byte signatures --\n\n    if (this.check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {\n      // APNG format (https://wiki.mozilla.org/APNG_Specification)\n      // 1. Find the first IDAT (image data) chunk (49 44 41 54)\n      // 2. Check if there is an \"acTL\" chunk before the IDAT one (61 63 54 4C)\n\n      // Offset calculated as follows:\n      // - 8 bytes: PNG signature\n      // - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk\n\n      await tokenizer.ignore(8); // ignore PNG signature\n\n      async function readChunkHeader() {\n        return {\n          length: await tokenizer.readToken(Token.INT32_BE),\n          type: await tokenizer.readToken(new Token.StringType(4, 'binary'))\n        };\n      }\n      do {\n        const chunk = await readChunkHeader();\n        if (chunk.length < 0) {\n          return; // Invalid chunk length\n        }\n\n        switch (chunk.type) {\n          case 'IDAT':\n            return {\n              ext: 'png',\n              mime: 'image/png'\n            };\n          case 'acTL':\n            return {\n              ext: 'apng',\n              mime: 'image/apng'\n            };\n          default:\n            await tokenizer.ignore(chunk.length + 4);\n          // Ignore chunk-data + CRC\n        }\n      } while (tokenizer.position + 8 < tokenizer.fileInfo.size);\n      return {\n        ext: 'png',\n        mime: 'image/png'\n      };\n    }\n    if (this.check([0x41, 0x52, 0x52, 0x4F, 0x57, 0x31, 0x00, 0x00])) {\n      return {\n        ext: 'arrow',\n        mime: 'application/x-apache-arrow'\n      };\n    }\n    if (this.check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {\n      return {\n        ext: 'glb',\n        mime: 'model/gltf-binary'\n      };\n    }\n\n    // `mov` format variants\n    if (this.check([0x66, 0x72, 0x65, 0x65], {\n      offset: 4\n    }) // `free`\n    || this.check([0x6D, 0x64, 0x61, 0x74], {\n      offset: 4\n    }) // `mdat` MJPEG\n    || this.check([0x6D, 0x6F, 0x6F, 0x76], {\n      offset: 4\n    }) // `moov`\n    || this.check([0x77, 0x69, 0x64, 0x65], {\n      offset: 4\n    }) // `wide`\n    ) {\n      return {\n        ext: 'mov',\n        mime: 'video/quicktime'\n      };\n    }\n\n    // -- 9-byte signatures --\n\n    if (this.check([0x49, 0x49, 0x52, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x18])) {\n      return {\n        ext: 'orf',\n        mime: 'image/x-olympus-orf'\n      };\n    }\n    if (this.checkString('gimp xcf ')) {\n      return {\n        ext: 'xcf',\n        mime: 'image/x-xcf'\n      };\n    }\n\n    // -- 12-byte signatures --\n\n    if (this.check([0x49, 0x49, 0x55, 0x00, 0x18, 0x00, 0x00, 0x00, 0x88, 0xE7, 0x74, 0xD8])) {\n      return {\n        ext: 'rw2',\n        mime: 'image/x-panasonic-rw2'\n      };\n    }\n\n    // ASF_Header_Object first 80 bytes\n    if (this.check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {\n      async function readHeader() {\n        const guid = Buffer.alloc(16);\n        await tokenizer.readBuffer(guid);\n        return {\n          id: guid,\n          size: Number(await tokenizer.readToken(Token.UINT64_LE))\n        };\n      }\n      await tokenizer.ignore(30);\n      // Search for header should be in first 1KB of file.\n      while (tokenizer.position + 24 < tokenizer.fileInfo.size) {\n        const header = await readHeader();\n        let payload = header.size - 24;\n        if (_check(header.id, [0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65])) {\n          // Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)\n          const typeId = Buffer.alloc(16);\n          payload -= await tokenizer.readBuffer(typeId);\n          if (_check(typeId, [0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n            // Found audio:\n            return {\n              ext: 'asf',\n              mime: 'audio/x-ms-asf'\n            };\n          }\n          if (_check(typeId, [0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n            // Found video:\n            return {\n              ext: 'asf',\n              mime: 'video/x-ms-asf'\n            };\n          }\n          break;\n        }\n        await tokenizer.ignore(payload);\n      }\n\n      // Default to ASF generic extension\n      return {\n        ext: 'asf',\n        mime: 'application/vnd.ms-asf'\n      };\n    }\n    if (this.check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {\n      return {\n        ext: 'ktx',\n        mime: 'image/ktx'\n      };\n    }\n    if ((this.check([0x7E, 0x10, 0x04]) || this.check([0x7E, 0x18, 0x04])) && this.check([0x30, 0x4D, 0x49, 0x45], {\n      offset: 4\n    })) {\n      return {\n        ext: 'mie',\n        mime: 'application/x-mie'\n      };\n    }\n    if (this.check([0x27, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], {\n      offset: 2\n    })) {\n      return {\n        ext: 'shp',\n        mime: 'application/x-esri-shape'\n      };\n    }\n    if (this.check([0xFF, 0x4F, 0xFF, 0x51])) {\n      return {\n        ext: 'j2c',\n        mime: 'image/j2c'\n      };\n    }\n    if (this.check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n      // JPEG-2000 family\n\n      await tokenizer.ignore(20);\n      const type = await tokenizer.readToken(new Token.StringType(4, 'ascii'));\n      switch (type) {\n        case 'jp2 ':\n          return {\n            ext: 'jp2',\n            mime: 'image/jp2'\n          };\n        case 'jpx ':\n          return {\n            ext: 'jpx',\n            mime: 'image/jpx'\n          };\n        case 'jpm ':\n          return {\n            ext: 'jpm',\n            mime: 'image/jpm'\n          };\n        case 'mjp2':\n          return {\n            ext: 'mj2',\n            mime: 'image/mj2'\n          };\n        default:\n          return;\n      }\n    }\n    if (this.check([0xFF, 0x0A]) || this.check([0x00, 0x00, 0x00, 0x0C, 0x4A, 0x58, 0x4C, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n      return {\n        ext: 'jxl',\n        mime: 'image/jxl'\n      };\n    }\n    if (this.check([0xFE, 0xFF])) {\n      // UTF-16-BOM-LE\n      if (this.check([0, 60, 0, 63, 0, 120, 0, 109, 0, 108], {\n        offset: 2\n      })) {\n        return {\n          ext: 'xml',\n          mime: 'application/xml'\n        };\n      }\n      return undefined; // Some unknown text based format\n    }\n\n    // -- Unsafe signatures --\n\n    if (this.check([0x0, 0x0, 0x1, 0xBA]) || this.check([0x0, 0x0, 0x1, 0xB3])) {\n      return {\n        ext: 'mpg',\n        mime: 'video/mpeg'\n      };\n    }\n    if (this.check([0x00, 0x01, 0x00, 0x00, 0x00])) {\n      return {\n        ext: 'ttf',\n        mime: 'font/ttf'\n      };\n    }\n    if (this.check([0x00, 0x00, 0x01, 0x00])) {\n      return {\n        ext: 'ico',\n        mime: 'image/x-icon'\n      };\n    }\n    if (this.check([0x00, 0x00, 0x02, 0x00])) {\n      return {\n        ext: 'cur',\n        mime: 'image/x-icon'\n      };\n    }\n    if (this.check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {\n      // Detected Microsoft Compound File Binary File (MS-CFB) Format.\n      return {\n        ext: 'cfb',\n        mime: 'application/x-cfb'\n      };\n    }\n\n    // Increase sample size from 12 to 256.\n    await tokenizer.peekBuffer(this.buffer, {\n      length: Math.min(256, tokenizer.fileInfo.size),\n      mayBeLess: true\n    });\n    if (this.check([0x61, 0x63, 0x73, 0x70], {\n      offset: 36\n    })) {\n      return {\n        ext: 'icc',\n        mime: 'application/vnd.iccprofile'\n      };\n    }\n\n    // -- 15-byte signatures --\n\n    if (this.checkString('BEGIN:')) {\n      if (this.checkString('VCARD', {\n        offset: 6\n      })) {\n        return {\n          ext: 'vcf',\n          mime: 'text/vcard'\n        };\n      }\n      if (this.checkString('VCALENDAR', {\n        offset: 6\n      })) {\n        return {\n          ext: 'ics',\n          mime: 'text/calendar'\n        };\n      }\n    }\n\n    // `raf` is here just to keep all the raw image detectors together.\n    if (this.checkString('FUJIFILMCCD-RAW')) {\n      return {\n        ext: 'raf',\n        mime: 'image/x-fujifilm-raf'\n      };\n    }\n    if (this.checkString('Extended Module:')) {\n      return {\n        ext: 'xm',\n        mime: 'audio/x-xm'\n      };\n    }\n    if (this.checkString('Creative Voice File')) {\n      return {\n        ext: 'voc',\n        mime: 'audio/x-voc'\n      };\n    }\n    if (this.check([0x04, 0x00, 0x00, 0x00]) && this.buffer.length >= 16) {\n      // Rough & quick check Pickle/ASAR\n      const jsonSize = this.buffer.readUInt32LE(12);\n      if (jsonSize > 12 && this.buffer.length >= jsonSize + 16) {\n        try {\n          const header = this.buffer.slice(16, jsonSize + 16).toString();\n          const json = JSON.parse(header);\n          // Check if Pickle is ASAR\n          if (json.files) {\n            // Final check, assuring Pickle/ASAR format\n            return {\n              ext: 'asar',\n              mime: 'application/x-asar'\n            };\n          }\n        } catch {}\n      }\n    }\n    if (this.check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {\n      return {\n        ext: 'mxf',\n        mime: 'application/mxf'\n      };\n    }\n    if (this.checkString('SCRM', {\n      offset: 44\n    })) {\n      return {\n        ext: 's3m',\n        mime: 'audio/x-s3m'\n      };\n    }\n\n    // Raw MPEG-2 transport stream (188-byte packets)\n    if (this.check([0x47]) && this.check([0x47], {\n      offset: 188\n    })) {\n      return {\n        ext: 'mts',\n        mime: 'video/mp2t'\n      };\n    }\n\n    // Blu-ray Disc Audio-Video (BDAV) MPEG-2 transport stream has 4-byte TP_extra_header before each 188-byte packet\n    if (this.check([0x47], {\n      offset: 4\n    }) && this.check([0x47], {\n      offset: 196\n    })) {\n      return {\n        ext: 'mts',\n        mime: 'video/mp2t'\n      };\n    }\n    if (this.check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {\n      offset: 60\n    })) {\n      return {\n        ext: 'mobi',\n        mime: 'application/x-mobipocket-ebook'\n      };\n    }\n    if (this.check([0x44, 0x49, 0x43, 0x4D], {\n      offset: 128\n    })) {\n      return {\n        ext: 'dcm',\n        mime: 'application/dicom'\n      };\n    }\n    if (this.check([0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])) {\n      return {\n        ext: 'lnk',\n        mime: 'application/x.ms.shortcut' // Invented by us\n      };\n    }\n\n    if (this.check([0x62, 0x6F, 0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x00])) {\n      return {\n        ext: 'alias',\n        mime: 'application/x.apple.alias' // Invented by us\n      };\n    }\n\n    if (this.check([0x4C, 0x50], {\n      offset: 34\n    }) && (this.check([0x00, 0x00, 0x01], {\n      offset: 8\n    }) || this.check([0x01, 0x00, 0x02], {\n      offset: 8\n    }) || this.check([0x02, 0x00, 0x02], {\n      offset: 8\n    }))) {\n      return {\n        ext: 'eot',\n        mime: 'application/vnd.ms-fontobject'\n      };\n    }\n    if (this.check([0x06, 0x06, 0xED, 0xF5, 0xD8, 0x1D, 0x46, 0xE5, 0xBD, 0x31, 0xEF, 0xE7, 0xFE, 0x74, 0xB7, 0x1D])) {\n      return {\n        ext: 'indd',\n        mime: 'application/x-indesign'\n      };\n    }\n\n    // Increase sample size from 256 to 512\n    await tokenizer.peekBuffer(this.buffer, {\n      length: Math.min(512, tokenizer.fileInfo.size),\n      mayBeLess: true\n    });\n\n    // Requires a buffer size of 512 bytes\n    if (tarHeaderChecksumMatches(this.buffer)) {\n      return {\n        ext: 'tar',\n        mime: 'application/x-tar'\n      };\n    }\n    if (this.check([0xFF, 0xFE])) {\n      // UTF-16-BOM-BE\n      if (this.check([60, 0, 63, 0, 120, 0, 109, 0, 108, 0], {\n        offset: 2\n      })) {\n        return {\n          ext: 'xml',\n          mime: 'application/xml'\n        };\n      }\n      if (this.check([0xFF, 0x0E, 0x53, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00], {\n        offset: 2\n      })) {\n        return {\n          ext: 'skp',\n          mime: 'application/vnd.sketchup.skp'\n        };\n      }\n      return undefined; // Some text based format\n    }\n\n    if (this.checkString('-----BEGIN PGP MESSAGE-----')) {\n      return {\n        ext: 'pgp',\n        mime: 'application/pgp-encrypted'\n      };\n    }\n\n    // Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)\n    if (this.buffer.length >= 2 && this.check([0xFF, 0xE0], {\n      offset: 0,\n      mask: [0xFF, 0xE0]\n    })) {\n      if (this.check([0x10], {\n        offset: 1,\n        mask: [0x16]\n      })) {\n        // Check for (ADTS) MPEG-2\n        if (this.check([0x08], {\n          offset: 1,\n          mask: [0x08]\n        })) {\n          return {\n            ext: 'aac',\n            mime: 'audio/aac'\n          };\n        }\n\n        // Must be (ADTS) MPEG-4\n        return {\n          ext: 'aac',\n          mime: 'audio/aac'\n        };\n      }\n\n      // MPEG 1 or 2 Layer 3 header\n      // Check for MPEG layer 3\n      if (this.check([0x02], {\n        offset: 1,\n        mask: [0x06]\n      })) {\n        return {\n          ext: 'mp3',\n          mime: 'audio/mpeg'\n        };\n      }\n\n      // Check for MPEG layer 2\n      if (this.check([0x04], {\n        offset: 1,\n        mask: [0x06]\n      })) {\n        return {\n          ext: 'mp2',\n          mime: 'audio/mpeg'\n        };\n      }\n\n      // Check for MPEG layer 1\n      if (this.check([0x06], {\n        offset: 1,\n        mask: [0x06]\n      })) {\n        return {\n          ext: 'mp1',\n          mime: 'audio/mpeg'\n        };\n      }\n    }\n  }\n  async readTiffTag(bigEndian) {\n    const tagId = await this.tokenizer.readToken(bigEndian ? Token.UINT16_BE : Token.UINT16_LE);\n    this.tokenizer.ignore(10);\n    switch (tagId) {\n      case 50_341:\n        return {\n          ext: 'arw',\n          mime: 'image/x-sony-arw'\n        };\n      case 50_706:\n        return {\n          ext: 'dng',\n          mime: 'image/x-adobe-dng'\n        };\n      default:\n    }\n  }\n  async readTiffIFD(bigEndian) {\n    const numberOfTags = await this.tokenizer.readToken(bigEndian ? Token.UINT16_BE : Token.UINT16_LE);\n    for (let n = 0; n < numberOfTags; ++n) {\n      const fileType = await this.readTiffTag(bigEndian);\n      if (fileType) {\n        return fileType;\n      }\n    }\n  }\n  async readTiffHeader(bigEndian) {\n    const version = (bigEndian ? Token.UINT16_BE : Token.UINT16_LE).get(this.buffer, 2);\n    const ifdOffset = (bigEndian ? Token.UINT32_BE : Token.UINT32_LE).get(this.buffer, 4);\n    if (version === 42) {\n      // TIFF file header\n      if (ifdOffset >= 6) {\n        if (this.checkString('CR', {\n          offset: 8\n        })) {\n          return {\n            ext: 'cr2',\n            mime: 'image/x-canon-cr2'\n          };\n        }\n        if (ifdOffset >= 8 && (this.check([0x1C, 0x00, 0xFE, 0x00], {\n          offset: 8\n        }) || this.check([0x1F, 0x00, 0x0B, 0x00], {\n          offset: 8\n        }))) {\n          return {\n            ext: 'nef',\n            mime: 'image/x-nikon-nef'\n          };\n        }\n      }\n      await this.tokenizer.ignore(ifdOffset);\n      const fileType = await this.readTiffIFD(bigEndian);\n      return fileType ?? {\n        ext: 'tif',\n        mime: 'image/tiff'\n      };\n    }\n    if (version === 43) {\n      // Big TIFF file header\n      return {\n        ext: 'tif',\n        mime: 'image/tiff'\n      };\n    }\n  }\n}\nexport async function fileTypeStream(readableStream) {\n  let {\n    sampleSize = minimumBytes\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    default: stream\n  } = await import('node:stream');\n  return new Promise((resolve, reject) => {\n    readableStream.on('error', reject);\n    readableStream.once('readable', () => {\n      (async () => {\n        try {\n          // Set up output stream\n          const pass = new stream.PassThrough();\n          const outputStream = stream.pipeline ? stream.pipeline(readableStream, pass, () => {}) : readableStream.pipe(pass);\n\n          // Read the input stream and detect the filetype\n          const chunk = readableStream.read(sampleSize) ?? readableStream.read() ?? Buffer.alloc(0);\n          try {\n            const fileType = await fileTypeFromBuffer(chunk);\n            pass.fileType = fileType;\n          } catch (error) {\n            if (error instanceof strtok3.EndOfStreamError) {\n              pass.fileType = undefined;\n            } else {\n              reject(error);\n            }\n          }\n          resolve(outputStream);\n        } catch (error) {\n          reject(error);\n        }\n      })();\n    });\n  });\n}\nexport const supportedExtensions = new Set(extensions);\nexport const supportedMimeTypes = new Set(mimeTypes);","map":{"version":3,"names":["Buffer","Token","strtok3","stringToBytes","tarHeaderChecksumMatches","uint32SyncSafeToken","extensions","mimeTypes","minimumBytes","fileTypeFromStream","stream","tokenizer","fromStream","fileTypeFromTokenizer","close","fileTypeFromBuffer","input","Uint8Array","ArrayBuffer","TypeError","buffer","length","fromBuffer","fileTypeFromBlob","blob","arrayBuffer","_check","headers","options","offset","index","header","entries","mask","FileTypeParser","parse","error","EndOfStreamError","check","checkString","alloc","fileInfo","size","undefined","Number","MAX_SAFE_INTEGER","peekBuffer","mayBeLess","ext","mime","ignore","id3HeaderLength","readToken","position","readBuffer","zipHeader","compressedSize","readUInt32LE","uncompressedSize","filenameLength","readUInt16LE","extraFieldLength","filename","StringType","endsWith","type","split","startsWith","mimeType","trim","nextHeaderIndex","indexOf","brandMajor","toString","replace","maxBufferSize","Math","min","includes","from","fileType","readTiffHeader","readField","msb","peekNumber","UINT8","ic","id","readElement","lengthField","nrLength","readUIntBE","len","readChildren","children","element","rawValue","re","docType","version","match","string","readChunkHeader","INT32_BE","chunk","readHeader","guid","UINT64_LE","payload","typeId","jsonSize","slice","json","JSON","files","readTiffTag","bigEndian","tagId","UINT16_BE","UINT16_LE","readTiffIFD","numberOfTags","n","get","ifdOffset","UINT32_BE","UINT32_LE","fileTypeStream","readableStream","sampleSize","arguments","default","Promise","resolve","reject","on","once","pass","PassThrough","outputStream","pipeline","pipe","read","supportedExtensions","Set","supportedMimeTypes"],"sources":["C:/Users/Ferhat/Social-Media-App-Project/wsfrontend/node_modules/file-type/core.js"],"sourcesContent":["import {Buffer} from 'node:buffer';\nimport * as Token from 'token-types';\nimport * as strtok3 from 'strtok3/core'; // eslint-disable-line n/file-extension-in-import\nimport {\n\tstringToBytes,\n\ttarHeaderChecksumMatches,\n\tuint32SyncSafeToken,\n} from './util.js';\nimport {extensions, mimeTypes} from './supported.js';\n\nconst minimumBytes = 4100; // A fair amount of file-types are detectable within this range.\n\nexport async function fileTypeFromStream(stream) {\n\tconst tokenizer = await strtok3.fromStream(stream);\n\ttry {\n\t\treturn await fileTypeFromTokenizer(tokenizer);\n\t} finally {\n\t\tawait tokenizer.close();\n\t}\n}\n\nexport async function fileTypeFromBuffer(input) {\n\tif (!(input instanceof Uint8Array || input instanceof ArrayBuffer)) {\n\t\tthrow new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``);\n\t}\n\n\tconst buffer = input instanceof Uint8Array ? input : new Uint8Array(input);\n\n\tif (!(buffer?.length > 1)) {\n\t\treturn;\n\t}\n\n\treturn fileTypeFromTokenizer(strtok3.fromBuffer(buffer));\n}\n\nexport async function fileTypeFromBlob(blob) {\n\tconst buffer = await blob.arrayBuffer();\n\treturn fileTypeFromBuffer(new Uint8Array(buffer));\n}\n\nfunction _check(buffer, headers, options) {\n\toptions = {\n\t\toffset: 0,\n\t\t...options,\n\t};\n\n\tfor (const [index, header] of headers.entries()) {\n\t\t// If a bitmask is set\n\t\tif (options.mask) {\n\t\t\t// If header doesn't equal `buf` with bits masked off\n\t\t\tif (header !== (options.mask[index] & buffer[index + options.offset])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (header !== buffer[index + options.offset]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport async function fileTypeFromTokenizer(tokenizer) {\n\ttry {\n\t\treturn new FileTypeParser().parse(tokenizer);\n\t} catch (error) {\n\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nclass FileTypeParser {\n\tcheck(header, options) {\n\t\treturn _check(this.buffer, header, options);\n\t}\n\n\tcheckString(header, options) {\n\t\treturn this.check(stringToBytes(header), options);\n\t}\n\n\tasync parse(tokenizer) {\n\t\tthis.buffer = Buffer.alloc(minimumBytes);\n\n\t\t// Keep reading until EOF if the file size is unknown.\n\t\tif (tokenizer.fileInfo.size === undefined) {\n\t\t\ttokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\n\t\t}\n\n\t\tthis.tokenizer = tokenizer;\n\n\t\tawait tokenizer.peekBuffer(this.buffer, {length: 12, mayBeLess: true});\n\n\t\t// -- 2-byte signatures --\n\n\t\tif (this.check([0x42, 0x4D])) {\n\t\t\treturn {\n\t\t\t\text: 'bmp',\n\t\t\t\tmime: 'image/bmp',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x0B, 0x77])) {\n\t\t\treturn {\n\t\t\t\text: 'ac3',\n\t\t\t\tmime: 'audio/vnd.dolby.dd-raw',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x78, 0x01])) {\n\t\t\treturn {\n\t\t\t\text: 'dmg',\n\t\t\t\tmime: 'application/x-apple-diskimage',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x4D, 0x5A])) {\n\t\t\treturn {\n\t\t\t\text: 'exe',\n\t\t\t\tmime: 'application/x-msdownload',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x25, 0x21])) {\n\t\t\tawait tokenizer.peekBuffer(this.buffer, {length: 24, mayBeLess: true});\n\n\t\t\tif (\n\t\t\t\tthis.checkString('PS-Adobe-', {offset: 2})\n\t\t\t\t&& this.checkString(' EPSF-', {offset: 14})\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'eps',\n\t\t\t\t\tmime: 'application/eps',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\text: 'ps',\n\t\t\t\tmime: 'application/postscript',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.check([0x1F, 0xA0])\n\t\t\t|| this.check([0x1F, 0x9D])\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'Z',\n\t\t\t\tmime: 'application/x-compress',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xC7, 0x71])) {\n\t\t\treturn {\n\t\t\t\text: 'cpio',\n\t\t\t\tmime: 'application/x-cpio',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x60, 0xEA])) {\n\t\t\treturn {\n\t\t\t\text: 'arj',\n\t\t\t\tmime: 'application/x-arj',\n\t\t\t};\n\t\t}\n\n\t\t// -- 3-byte signatures --\n\n\t\tif (this.check([0xEF, 0xBB, 0xBF])) { // UTF-8-BOM\n\t\t\t// Strip off UTF-8-BOM\n\t\t\tthis.tokenizer.ignore(3);\n\t\t\treturn this.parse(tokenizer);\n\t\t}\n\n\t\tif (this.check([0x47, 0x49, 0x46])) {\n\t\t\treturn {\n\t\t\t\text: 'gif',\n\t\t\t\tmime: 'image/gif',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x49, 0x49, 0xBC])) {\n\t\t\treturn {\n\t\t\t\text: 'jxr',\n\t\t\t\tmime: 'image/vnd.ms-photo',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x1F, 0x8B, 0x8])) {\n\t\t\treturn {\n\t\t\t\text: 'gz',\n\t\t\t\tmime: 'application/gzip',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x42, 0x5A, 0x68])) {\n\t\t\treturn {\n\t\t\t\text: 'bz2',\n\t\t\t\tmime: 'application/x-bzip2',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('ID3')) {\n\t\t\tawait tokenizer.ignore(6); // Skip ID3 header until the header size\n\t\t\tconst id3HeaderLength = await tokenizer.readToken(uint32SyncSafeToken);\n\t\t\tif (tokenizer.position + id3HeaderLength > tokenizer.fileInfo.size) {\n\t\t\t\t// Guess file type based on ID3 header for backward compatibility\n\t\t\t\treturn {\n\t\t\t\t\text: 'mp3',\n\t\t\t\t\tmime: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tawait tokenizer.ignore(id3HeaderLength);\n\t\t\treturn fileTypeFromTokenizer(tokenizer); // Skip ID3 header, recursion\n\t\t}\n\n\t\t// Musepack, SV7\n\t\tif (this.checkString('MP+')) {\n\t\t\treturn {\n\t\t\t\text: 'mpc',\n\t\t\t\tmime: 'audio/x-musepack',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\t(this.buffer[0] === 0x43 || this.buffer[0] === 0x46)\n\t\t\t&& this.check([0x57, 0x53], {offset: 1})\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'swf',\n\t\t\t\tmime: 'application/x-shockwave-flash',\n\t\t\t};\n\t\t}\n\n\t\t// -- 4-byte signatures --\n\n\t\t// Requires a sample size of 4 bytes\n\t\tif (this.check([0xFF, 0xD8, 0xFF])) {\n\t\t\tif (this.check([0xF7], {offset: 3})) { // JPG7/SOF55, indicating a ISO/IEC 14495 / JPEG-LS file\n\t\t\t\treturn {\n\t\t\t\t\text: 'jls',\n\t\t\t\t\tmime: 'image/jls',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\text: 'jpg',\n\t\t\t\tmime: 'image/jpeg',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x4F, 0x62, 0x6A, 0x01])) {\n\t\t\treturn {\n\t\t\t\text: 'avro',\n\t\t\t\tmime: 'application/avro',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('FLIF')) {\n\t\t\treturn {\n\t\t\t\text: 'flif',\n\t\t\t\tmime: 'image/flif',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('8BPS')) {\n\t\t\treturn {\n\t\t\t\text: 'psd',\n\t\t\t\tmime: 'image/vnd.adobe.photoshop',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('WEBP', {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'webp',\n\t\t\t\tmime: 'image/webp',\n\t\t\t};\n\t\t}\n\n\t\t// Musepack, SV8\n\t\tif (this.checkString('MPCK')) {\n\t\t\treturn {\n\t\t\t\text: 'mpc',\n\t\t\t\tmime: 'audio/x-musepack',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('FORM')) {\n\t\t\treturn {\n\t\t\t\text: 'aif',\n\t\t\t\tmime: 'audio/aiff',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('icns', {offset: 0})) {\n\t\t\treturn {\n\t\t\t\text: 'icns',\n\t\t\t\tmime: 'image/icns',\n\t\t\t};\n\t\t}\n\n\t\t// Zip-based file formats\n\t\t// Need to be before the `zip` check\n\t\tif (this.check([0x50, 0x4B, 0x3, 0x4])) { // Local file header signature\n\t\t\ttry {\n\t\t\t\twhile (tokenizer.position + 30 < tokenizer.fileInfo.size) {\n\t\t\t\t\tawait tokenizer.readBuffer(this.buffer, {length: 30});\n\n\t\t\t\t\t// https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers\n\t\t\t\t\tconst zipHeader = {\n\t\t\t\t\t\tcompressedSize: this.buffer.readUInt32LE(18),\n\t\t\t\t\t\tuncompressedSize: this.buffer.readUInt32LE(22),\n\t\t\t\t\t\tfilenameLength: this.buffer.readUInt16LE(26),\n\t\t\t\t\t\textraFieldLength: this.buffer.readUInt16LE(28),\n\t\t\t\t\t};\n\n\t\t\t\t\tzipHeader.filename = await tokenizer.readToken(new Token.StringType(zipHeader.filenameLength, 'utf-8'));\n\t\t\t\t\tawait tokenizer.ignore(zipHeader.extraFieldLength);\n\n\t\t\t\t\t// Assumes signed `.xpi` from addons.mozilla.org\n\t\t\t\t\tif (zipHeader.filename === 'META-INF/mozilla.rsa') {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'xpi',\n\t\t\t\t\t\t\tmime: 'application/x-xpinstall',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {\n\t\t\t\t\t\tconst type = zipHeader.filename.split('/')[0];\n\t\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\t\tcase '_rels':\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'word':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'docx',\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcase 'ppt':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'pptx',\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcase 'xl':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'xlsx',\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (zipHeader.filename.startsWith('xl/')) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'xlsx',\n\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: '3mf',\n\t\t\t\t\t\t\tmime: 'model/3mf',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// The docx, xlsx and pptx file types extend the Office Open XML file format:\n\t\t\t\t\t// https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\n\t\t\t\t\t// We look for:\n\t\t\t\t\t// - one entry named '[Content_Types].xml' or '_rels/.rels',\n\t\t\t\t\t// - one entry indicating specific type of file.\n\t\t\t\t\t// MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.\n\t\t\t\t\tif (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {\n\t\t\t\t\t\tlet mimeType = await tokenizer.readToken(new Token.StringType(zipHeader.compressedSize, 'utf-8'));\n\t\t\t\t\t\tmimeType = mimeType.trim();\n\n\t\t\t\t\t\tswitch (mimeType) {\n\t\t\t\t\t\t\tcase 'application/epub+zip':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'epub',\n\t\t\t\t\t\t\t\t\tmime: 'application/epub+zip',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.text':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'odt',\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.text',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.spreadsheet':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'ods',\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.spreadsheet',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.presentation':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\text: 'odp',\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.presentation',\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Try to find next header manually when current one is corrupted\n\t\t\t\t\tif (zipHeader.compressedSize === 0) {\n\t\t\t\t\t\tlet nextHeaderIndex = -1;\n\n\t\t\t\t\t\twhile (nextHeaderIndex < 0 && (tokenizer.position < tokenizer.fileInfo.size)) {\n\t\t\t\t\t\t\tawait tokenizer.peekBuffer(this.buffer, {mayBeLess: true});\n\n\t\t\t\t\t\t\tnextHeaderIndex = this.buffer.indexOf('504B0304', 0, 'hex');\n\t\t\t\t\t\t\t// Move position to the next header if found, skip the whole buffer otherwise\n\t\t\t\t\t\t\tawait tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : this.buffer.length);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait tokenizer.ignore(zipHeader.compressedSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\text: 'zip',\n\t\t\t\tmime: 'application/zip',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('OggS')) {\n\t\t\t// This is an OGG container\n\t\t\tawait tokenizer.ignore(28);\n\t\t\tconst type = Buffer.alloc(8);\n\t\t\tawait tokenizer.readBuffer(type);\n\n\t\t\t// Needs to be before `ogg` check\n\t\t\tif (_check(type, [0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64])) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'opus',\n\t\t\t\t\tmime: 'audio/opus',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If ' theora' in header.\n\t\t\tif (_check(type, [0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61])) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'ogv',\n\t\t\t\t\tmime: 'video/ogg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If '\\x01video' in header.\n\t\t\tif (_check(type, [0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00])) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'ogm',\n\t\t\t\t\tmime: 'video/ogg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If ' FLAC' in header  https://xiph.org/flac/faq.html\n\t\t\tif (_check(type, [0x7F, 0x46, 0x4C, 0x41, 0x43])) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'oga',\n\t\t\t\t\tmime: 'audio/ogg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// 'Speex  ' in header https://en.wikipedia.org/wiki/Speex\n\t\t\tif (_check(type, [0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20])) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'spx',\n\t\t\t\t\tmime: 'audio/ogg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If '\\x01vorbis' in header\n\t\t\tif (_check(type, [0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73])) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'ogg',\n\t\t\t\t\tmime: 'audio/ogg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Default OGG container https://www.iana.org/assignments/media-types/application/ogg\n\t\t\treturn {\n\t\t\t\text: 'ogx',\n\t\t\t\tmime: 'application/ogg',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.check([0x50, 0x4B])\n\t\t\t&& (this.buffer[2] === 0x3 || this.buffer[2] === 0x5 || this.buffer[2] === 0x7)\n\t\t\t&& (this.buffer[3] === 0x4 || this.buffer[3] === 0x6 || this.buffer[3] === 0x8)\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'zip',\n\t\t\t\tmime: 'application/zip',\n\t\t\t};\n\t\t}\n\n\t\t//\n\n\t\t// File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)\n\t\t// It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.\n\t\t// `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.\n\t\t// Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).\n\t\tif (\n\t\t\tthis.checkString('ftyp', {offset: 4})\n\t\t\t&& (this.buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?\n\t\t) {\n\t\t\t// They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.\n\t\t\t// For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.\n\t\t\tconst brandMajor = this.buffer.toString('binary', 8, 12).replace('\\0', ' ').trim();\n\t\t\tswitch (brandMajor) {\n\t\t\t\tcase 'avif':\n\t\t\t\tcase 'avis':\n\t\t\t\t\treturn {ext: 'avif', mime: 'image/avif'};\n\t\t\t\tcase 'mif1':\n\t\t\t\t\treturn {ext: 'heic', mime: 'image/heif'};\n\t\t\t\tcase 'msf1':\n\t\t\t\t\treturn {ext: 'heic', mime: 'image/heif-sequence'};\n\t\t\t\tcase 'heic':\n\t\t\t\tcase 'heix':\n\t\t\t\t\treturn {ext: 'heic', mime: 'image/heic'};\n\t\t\t\tcase 'hevc':\n\t\t\t\tcase 'hevx':\n\t\t\t\t\treturn {ext: 'heic', mime: 'image/heic-sequence'};\n\t\t\t\tcase 'qt':\n\t\t\t\t\treturn {ext: 'mov', mime: 'video/quicktime'};\n\t\t\t\tcase 'M4V':\n\t\t\t\tcase 'M4VH':\n\t\t\t\tcase 'M4VP':\n\t\t\t\t\treturn {ext: 'm4v', mime: 'video/x-m4v'};\n\t\t\t\tcase 'M4P':\n\t\t\t\t\treturn {ext: 'm4p', mime: 'video/mp4'};\n\t\t\t\tcase 'M4B':\n\t\t\t\t\treturn {ext: 'm4b', mime: 'audio/mp4'};\n\t\t\t\tcase 'M4A':\n\t\t\t\t\treturn {ext: 'm4a', mime: 'audio/x-m4a'};\n\t\t\t\tcase 'F4V':\n\t\t\t\t\treturn {ext: 'f4v', mime: 'video/mp4'};\n\t\t\t\tcase 'F4P':\n\t\t\t\t\treturn {ext: 'f4p', mime: 'video/mp4'};\n\t\t\t\tcase 'F4A':\n\t\t\t\t\treturn {ext: 'f4a', mime: 'audio/mp4'};\n\t\t\t\tcase 'F4B':\n\t\t\t\t\treturn {ext: 'f4b', mime: 'audio/mp4'};\n\t\t\t\tcase 'crx':\n\t\t\t\t\treturn {ext: 'cr3', mime: 'image/x-canon-cr3'};\n\t\t\t\tdefault:\n\t\t\t\t\tif (brandMajor.startsWith('3g')) {\n\t\t\t\t\t\tif (brandMajor.startsWith('3g2')) {\n\t\t\t\t\t\t\treturn {ext: '3g2', mime: 'video/3gpp2'};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {ext: '3gp', mime: 'video/3gpp'};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {ext: 'mp4', mime: 'video/mp4'};\n\t\t\t}\n\t\t}\n\n\t\tif (this.checkString('MThd')) {\n\t\t\treturn {\n\t\t\t\text: 'mid',\n\t\t\t\tmime: 'audio/midi',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.checkString('wOFF')\n\t\t\t&& (\n\t\t\t\tthis.check([0x00, 0x01, 0x00, 0x00], {offset: 4})\n\t\t\t\t|| this.checkString('OTTO', {offset: 4})\n\t\t\t)\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'woff',\n\t\t\t\tmime: 'font/woff',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.checkString('wOF2')\n\t\t\t&& (\n\t\t\t\tthis.check([0x00, 0x01, 0x00, 0x00], {offset: 4})\n\t\t\t\t|| this.checkString('OTTO', {offset: 4})\n\t\t\t)\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'woff2',\n\t\t\t\tmime: 'font/woff2',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xD4, 0xC3, 0xB2, 0xA1]) || this.check([0xA1, 0xB2, 0xC3, 0xD4])) {\n\t\t\treturn {\n\t\t\t\text: 'pcap',\n\t\t\t\tmime: 'application/vnd.tcpdump.pcap',\n\t\t\t};\n\t\t}\n\n\t\t// Sony DSD Stream File (DSF)\n\t\tif (this.checkString('DSD ')) {\n\t\t\treturn {\n\t\t\t\text: 'dsf',\n\t\t\t\tmime: 'audio/x-dsf', // Non-standard\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('LZIP')) {\n\t\t\treturn {\n\t\t\t\text: 'lz',\n\t\t\t\tmime: 'application/x-lzip',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('fLaC')) {\n\t\t\treturn {\n\t\t\t\text: 'flac',\n\t\t\t\tmime: 'audio/x-flac',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x42, 0x50, 0x47, 0xFB])) {\n\t\t\treturn {\n\t\t\t\text: 'bpg',\n\t\t\t\tmime: 'image/bpg',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('wvpk')) {\n\t\t\treturn {\n\t\t\t\text: 'wv',\n\t\t\t\tmime: 'audio/wavpack',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('%PDF')) {\n\t\t\ttry {\n\t\t\t\tawait tokenizer.ignore(1350);\n\t\t\t\tconst maxBufferSize = 10 * 1024 * 1024;\n\t\t\t\tconst buffer = Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));\n\t\t\t\tawait tokenizer.readBuffer(buffer, {mayBeLess: true});\n\n\t\t\t\t// Check if this is an Adobe Illustrator file\n\t\t\t\tif (buffer.includes(Buffer.from('AIPrivateData'))) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'ai',\n\t\t\t\t\t\tmime: 'application/postscript',\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Swallow end of stream error if file is too small for the Adobe AI check\n\t\t\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Assume this is just a normal PDF\n\t\t\treturn {\n\t\t\t\text: 'pdf',\n\t\t\t\tmime: 'application/pdf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x00, 0x61, 0x73, 0x6D])) {\n\t\t\treturn {\n\t\t\t\text: 'wasm',\n\t\t\t\tmime: 'application/wasm',\n\t\t\t};\n\t\t}\n\n\t\t// TIFF, little-endian type\n\t\tif (this.check([0x49, 0x49])) {\n\t\t\tconst fileType = await this.readTiffHeader(false);\n\t\t\tif (fileType) {\n\t\t\t\treturn fileType;\n\t\t\t}\n\t\t}\n\n\t\t// TIFF, big-endian type\n\t\tif (this.check([0x4D, 0x4D])) {\n\t\t\tconst fileType = await this.readTiffHeader(true);\n\t\t\tif (fileType) {\n\t\t\t\treturn fileType;\n\t\t\t}\n\t\t}\n\n\t\tif (this.checkString('MAC ')) {\n\t\t\treturn {\n\t\t\t\text: 'ape',\n\t\t\t\tmime: 'audio/ape',\n\t\t\t};\n\t\t}\n\n\t\t// https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska\n\t\tif (this.check([0x1A, 0x45, 0xDF, 0xA3])) { // Root element: EBML\n\t\t\tasync function readField() {\n\t\t\t\tconst msb = await tokenizer.peekNumber(Token.UINT8);\n\t\t\t\tlet mask = 0x80;\n\t\t\t\tlet ic = 0; // 0 = A, 1 = B, 2 = C, 3\n\t\t\t\t// = D\n\n\t\t\t\twhile ((msb & mask) === 0 && mask !== 0) {\n\t\t\t\t\t++ic;\n\t\t\t\t\tmask >>= 1;\n\t\t\t\t}\n\n\t\t\t\tconst id = Buffer.alloc(ic + 1);\n\t\t\t\tawait tokenizer.readBuffer(id);\n\t\t\t\treturn id;\n\t\t\t}\n\n\t\t\tasync function readElement() {\n\t\t\t\tconst id = await readField();\n\t\t\t\tconst lengthField = await readField();\n\t\t\t\tlengthField[0] ^= 0x80 >> (lengthField.length - 1);\n\t\t\t\tconst nrLength = Math.min(6, lengthField.length); // JavaScript can max read 6 bytes integer\n\t\t\t\treturn {\n\t\t\t\t\tid: id.readUIntBE(0, id.length),\n\t\t\t\t\tlen: lengthField.readUIntBE(lengthField.length - nrLength, nrLength),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tasync function readChildren(children) {\n\t\t\t\twhile (children > 0) {\n\t\t\t\t\tconst element = await readElement();\n\t\t\t\t\tif (element.id === 0x42_82) {\n\t\t\t\t\t\tconst rawValue = await tokenizer.readToken(new Token.StringType(element.len, 'utf-8'));\n\t\t\t\t\t\treturn rawValue.replace(/\\00.*$/g, ''); // Return DocType\n\t\t\t\t\t}\n\n\t\t\t\t\tawait tokenizer.ignore(element.len); // ignore payload\n\t\t\t\t\t--children;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst re = await readElement();\n\t\t\tconst docType = await readChildren(re.len);\n\n\t\t\tswitch (docType) {\n\t\t\t\tcase 'webm':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'webm',\n\t\t\t\t\t\tmime: 'video/webm',\n\t\t\t\t\t};\n\n\t\t\t\tcase 'matroska':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'mkv',\n\t\t\t\t\t\tmime: 'video/x-matroska',\n\t\t\t\t\t};\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// RIFF file format which might be AVI, WAV, QCP, etc\n\t\tif (this.check([0x52, 0x49, 0x46, 0x46])) {\n\t\t\tif (this.check([0x41, 0x56, 0x49], {offset: 8})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'avi',\n\t\t\t\t\tmime: 'video/vnd.avi',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (this.check([0x57, 0x41, 0x56, 0x45], {offset: 8})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'wav',\n\t\t\t\t\tmime: 'audio/vnd.wave',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// QLCM, QCP file\n\t\t\tif (this.check([0x51, 0x4C, 0x43, 0x4D], {offset: 8})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'qcp',\n\t\t\t\t\tmime: 'audio/qcelp',\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (this.checkString('SQLi')) {\n\t\t\treturn {\n\t\t\t\text: 'sqlite',\n\t\t\t\tmime: 'application/x-sqlite3',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x4E, 0x45, 0x53, 0x1A])) {\n\t\t\treturn {\n\t\t\t\text: 'nes',\n\t\t\t\tmime: 'application/x-nintendo-nes-rom',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('Cr24')) {\n\t\t\treturn {\n\t\t\t\text: 'crx',\n\t\t\t\tmime: 'application/x-google-chrome-extension',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.checkString('MSCF')\n\t\t\t|| this.checkString('ISc(')\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'cab',\n\t\t\t\tmime: 'application/vnd.ms-cab-compressed',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xED, 0xAB, 0xEE, 0xDB])) {\n\t\t\treturn {\n\t\t\t\text: 'rpm',\n\t\t\t\tmime: 'application/x-rpm',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xC5, 0xD0, 0xD3, 0xC6])) {\n\t\t\treturn {\n\t\t\t\text: 'eps',\n\t\t\t\tmime: 'application/eps',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x28, 0xB5, 0x2F, 0xFD])) {\n\t\t\treturn {\n\t\t\t\text: 'zst',\n\t\t\t\tmime: 'application/zstd',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x7F, 0x45, 0x4C, 0x46])) {\n\t\t\treturn {\n\t\t\t\text: 'elf',\n\t\t\t\tmime: 'application/x-elf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x21, 0x42, 0x44, 0x4E])) {\n\t\t\treturn {\n\t\t\t\text: 'pst',\n\t\t\t\tmime: 'application/vnd.ms-outlook',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('PAR1')) {\n\t\t\treturn {\n\t\t\t\text: 'parquet',\n\t\t\t\tmime: 'application/x-parquet',\n\t\t\t};\n\t\t}\n\n\t\t// -- 5-byte signatures --\n\n\t\tif (this.check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'otf',\n\t\t\t\tmime: 'font/otf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('#!AMR')) {\n\t\t\treturn {\n\t\t\t\text: 'amr',\n\t\t\t\tmime: 'audio/amr',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('{\\\\rtf')) {\n\t\t\treturn {\n\t\t\t\text: 'rtf',\n\t\t\t\tmime: 'application/rtf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x46, 0x4C, 0x56, 0x01])) {\n\t\t\treturn {\n\t\t\t\text: 'flv',\n\t\t\t\tmime: 'video/x-flv',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('IMPM')) {\n\t\t\treturn {\n\t\t\t\text: 'it',\n\t\t\t\tmime: 'audio/x-it',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.checkString('-lh0-', {offset: 2})\n\t\t\t|| this.checkString('-lh1-', {offset: 2})\n\t\t\t|| this.checkString('-lh2-', {offset: 2})\n\t\t\t|| this.checkString('-lh3-', {offset: 2})\n\t\t\t|| this.checkString('-lh4-', {offset: 2})\n\t\t\t|| this.checkString('-lh5-', {offset: 2})\n\t\t\t|| this.checkString('-lh6-', {offset: 2})\n\t\t\t|| this.checkString('-lh7-', {offset: 2})\n\t\t\t|| this.checkString('-lzs-', {offset: 2})\n\t\t\t|| this.checkString('-lz4-', {offset: 2})\n\t\t\t|| this.checkString('-lz5-', {offset: 2})\n\t\t\t|| this.checkString('-lhd-', {offset: 2})\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'lzh',\n\t\t\t\tmime: 'application/x-lzh-compressed',\n\t\t\t};\n\t\t}\n\n\t\t// MPEG program stream (PS or MPEG-PS)\n\t\tif (this.check([0x00, 0x00, 0x01, 0xBA])) {\n\t\t\t//  MPEG-PS, MPEG-1 Part 1\n\t\t\tif (this.check([0x21], {offset: 4, mask: [0xF1]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'mpg', // May also be .ps, .mpeg\n\t\t\t\t\tmime: 'video/MP1S',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// MPEG-PS, MPEG-2 Part 1\n\t\t\tif (this.check([0x44], {offset: 4, mask: [0xC4]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'mpg', // May also be .mpg, .m2p, .vob or .sub\n\t\t\t\t\tmime: 'video/MP2P',\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (this.checkString('ITSF')) {\n\t\t\treturn {\n\t\t\t\text: 'chm',\n\t\t\t\tmime: 'application/vnd.ms-htmlhelp',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xCA, 0xFE, 0xBA, 0xBE])) {\n\t\t\treturn {\n\t\t\t\text: 'class',\n\t\t\t\tmime: 'application/java-vm',\n\t\t\t};\n\t\t}\n\n\t\t// -- 6-byte signatures --\n\n\t\tif (this.check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'xz',\n\t\t\t\tmime: 'application/x-xz',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('<?xml ')) {\n\t\t\treturn {\n\t\t\t\text: 'xml',\n\t\t\t\tmime: 'application/xml',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {\n\t\t\treturn {\n\t\t\t\text: '7z',\n\t\t\t\tmime: 'application/x-7z-compressed',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.check([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7])\n\t\t\t&& (this.buffer[6] === 0x0 || this.buffer[6] === 0x1)\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'rar',\n\t\t\t\tmime: 'application/x-rar-compressed',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('solid ')) {\n\t\t\treturn {\n\t\t\t\text: 'stl',\n\t\t\t\tmime: 'model/stl',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('AC')) {\n\t\t\tconst version = this.buffer.toString('binary', 2, 6);\n\t\t\tif (version.match('^d*') && version >= 1000 && version <= 1050) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'dwg',\n\t\t\t\t\tmime: 'image/vnd.dwg',\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (this.checkString('070707')) {\n\t\t\treturn {\n\t\t\t\text: 'cpio',\n\t\t\t\tmime: 'application/x-cpio',\n\t\t\t};\n\t\t}\n\n\t\t// -- 7-byte signatures --\n\n\t\tif (this.checkString('BLENDER')) {\n\t\t\treturn {\n\t\t\t\text: 'blend',\n\t\t\t\tmime: 'application/x-blender',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('!<arch>')) {\n\t\t\tawait tokenizer.ignore(8);\n\t\t\tconst string = await tokenizer.readToken(new Token.StringType(13, 'ascii'));\n\t\t\tif (string === 'debian-binary') {\n\t\t\t\treturn {\n\t\t\t\t\text: 'deb',\n\t\t\t\t\tmime: 'application/x-deb',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\text: 'ar',\n\t\t\t\tmime: 'application/x-unix-archive',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('**ACE', {offset: 7})) {\n\t\t\tawait tokenizer.peekBuffer(this.buffer, {length: 14, mayBeLess: true});\n\t\t\tif (this.checkString('**', {offset: 12})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'ace',\n\t\t\t\t\tmime: 'application/x-ace-compressed',\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// -- 8-byte signatures --\n\n\t\tif (this.check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\t\t// APNG format (https://wiki.mozilla.org/APNG_Specification)\n\t\t\t// 1. Find the first IDAT (image data) chunk (49 44 41 54)\n\t\t\t// 2. Check if there is an \"acTL\" chunk before the IDAT one (61 63 54 4C)\n\n\t\t\t// Offset calculated as follows:\n\t\t\t// - 8 bytes: PNG signature\n\t\t\t// - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk\n\n\t\t\tawait tokenizer.ignore(8); // ignore PNG signature\n\n\t\t\tasync function readChunkHeader() {\n\t\t\t\treturn {\n\t\t\t\t\tlength: await tokenizer.readToken(Token.INT32_BE),\n\t\t\t\t\ttype: await tokenizer.readToken(new Token.StringType(4, 'binary')),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tdo {\n\t\t\t\tconst chunk = await readChunkHeader();\n\t\t\t\tif (chunk.length < 0) {\n\t\t\t\t\treturn; // Invalid chunk length\n\t\t\t\t}\n\n\t\t\t\tswitch (chunk.type) {\n\t\t\t\t\tcase 'IDAT':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'png',\n\t\t\t\t\t\t\tmime: 'image/png',\n\t\t\t\t\t\t};\n\t\t\t\t\tcase 'acTL':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'apng',\n\t\t\t\t\t\t\tmime: 'image/apng',\n\t\t\t\t\t\t};\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tawait tokenizer.ignore(chunk.length + 4); // Ignore chunk-data + CRC\n\t\t\t\t}\n\t\t\t} while (tokenizer.position + 8 < tokenizer.fileInfo.size);\n\n\t\t\treturn {\n\t\t\t\text: 'png',\n\t\t\t\tmime: 'image/png',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x41, 0x52, 0x52, 0x4F, 0x57, 0x31, 0x00, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'arrow',\n\t\t\t\tmime: 'application/x-apache-arrow',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'glb',\n\t\t\t\tmime: 'model/gltf-binary',\n\t\t\t};\n\t\t}\n\n\t\t// `mov` format variants\n\t\tif (\n\t\t\tthis.check([0x66, 0x72, 0x65, 0x65], {offset: 4}) // `free`\n\t\t\t|| this.check([0x6D, 0x64, 0x61, 0x74], {offset: 4}) // `mdat` MJPEG\n\t\t\t|| this.check([0x6D, 0x6F, 0x6F, 0x76], {offset: 4}) // `moov`\n\t\t\t|| this.check([0x77, 0x69, 0x64, 0x65], {offset: 4}) // `wide`\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'mov',\n\t\t\t\tmime: 'video/quicktime',\n\t\t\t};\n\t\t}\n\n\t\t// -- 9-byte signatures --\n\n\t\tif (this.check([0x49, 0x49, 0x52, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x18])) {\n\t\t\treturn {\n\t\t\t\text: 'orf',\n\t\t\t\tmime: 'image/x-olympus-orf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('gimp xcf ')) {\n\t\t\treturn {\n\t\t\t\text: 'xcf',\n\t\t\t\tmime: 'image/x-xcf',\n\t\t\t};\n\t\t}\n\n\t\t// -- 12-byte signatures --\n\n\t\tif (this.check([0x49, 0x49, 0x55, 0x00, 0x18, 0x00, 0x00, 0x00, 0x88, 0xE7, 0x74, 0xD8])) {\n\t\t\treturn {\n\t\t\t\text: 'rw2',\n\t\t\t\tmime: 'image/x-panasonic-rw2',\n\t\t\t};\n\t\t}\n\n\t\t// ASF_Header_Object first 80 bytes\n\t\tif (this.check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {\n\t\t\tasync function readHeader() {\n\t\t\t\tconst guid = Buffer.alloc(16);\n\t\t\t\tawait tokenizer.readBuffer(guid);\n\t\t\t\treturn {\n\t\t\t\t\tid: guid,\n\t\t\t\t\tsize: Number(await tokenizer.readToken(Token.UINT64_LE)),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tawait tokenizer.ignore(30);\n\t\t\t// Search for header should be in first 1KB of file.\n\t\t\twhile (tokenizer.position + 24 < tokenizer.fileInfo.size) {\n\t\t\t\tconst header = await readHeader();\n\t\t\t\tlet payload = header.size - 24;\n\t\t\t\tif (_check(header.id, [0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65])) {\n\t\t\t\t\t// Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)\n\t\t\t\t\tconst typeId = Buffer.alloc(16);\n\t\t\t\t\tpayload -= await tokenizer.readBuffer(typeId);\n\n\t\t\t\t\tif (_check(typeId, [0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n\t\t\t\t\t\t// Found audio:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'asf',\n\t\t\t\t\t\t\tmime: 'audio/x-ms-asf',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_check(typeId, [0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n\t\t\t\t\t\t// Found video:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'asf',\n\t\t\t\t\t\t\tmime: 'video/x-ms-asf',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tawait tokenizer.ignore(payload);\n\t\t\t}\n\n\t\t\t// Default to ASF generic extension\n\t\t\treturn {\n\t\t\t\text: 'asf',\n\t\t\t\tmime: 'application/vnd.ms-asf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\t\treturn {\n\t\t\t\text: 'ktx',\n\t\t\t\tmime: 'image/ktx',\n\t\t\t};\n\t\t}\n\n\t\tif ((this.check([0x7E, 0x10, 0x04]) || this.check([0x7E, 0x18, 0x04])) && this.check([0x30, 0x4D, 0x49, 0x45], {offset: 4})) {\n\t\t\treturn {\n\t\t\t\text: 'mie',\n\t\t\t\tmime: 'application/x-mie',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x27, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], {offset: 2})) {\n\t\t\treturn {\n\t\t\t\text: 'shp',\n\t\t\t\tmime: 'application/x-esri-shape',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xFF, 0x4F, 0xFF, 0x51])) {\n\t\t\treturn {\n\t\t\t\text: 'j2c',\n\t\t\t\tmime: 'image/j2c',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n\t\t\t// JPEG-2000 family\n\n\t\t\tawait tokenizer.ignore(20);\n\t\t\tconst type = await tokenizer.readToken(new Token.StringType(4, 'ascii'));\n\t\t\tswitch (type) {\n\t\t\t\tcase 'jp2 ':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'jp2',\n\t\t\t\t\t\tmime: 'image/jp2',\n\t\t\t\t\t};\n\t\t\t\tcase 'jpx ':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'jpx',\n\t\t\t\t\t\tmime: 'image/jpx',\n\t\t\t\t\t};\n\t\t\t\tcase 'jpm ':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'jpm',\n\t\t\t\t\t\tmime: 'image/jpm',\n\t\t\t\t\t};\n\t\t\t\tcase 'mjp2':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'mj2',\n\t\t\t\t\t\tmime: 'image/mj2',\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tthis.check([0xFF, 0x0A])\n\t\t\t|| this.check([0x00, 0x00, 0x00, 0x0C, 0x4A, 0x58, 0x4C, 0x20, 0x0D, 0x0A, 0x87, 0x0A])\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'jxl',\n\t\t\t\tmime: 'image/jxl',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xFE, 0xFF])) { // UTF-16-BOM-LE\n\t\t\tif (this.check([0, 60, 0, 63, 0, 120, 0, 109, 0, 108], {offset: 2})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'xml',\n\t\t\t\t\tmime: 'application/xml',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn undefined; // Some unknown text based format\n\t\t}\n\n\t\t// -- Unsafe signatures --\n\n\t\tif (\n\t\t\tthis.check([0x0, 0x0, 0x1, 0xBA])\n\t\t\t|| this.check([0x0, 0x0, 0x1, 0xB3])\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'mpg',\n\t\t\t\tmime: 'video/mpeg',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x00, 0x01, 0x00, 0x00, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'ttf',\n\t\t\t\tmime: 'font/ttf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x00, 0x00, 0x01, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'ico',\n\t\t\t\tmime: 'image/x-icon',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x00, 0x00, 0x02, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'cur',\n\t\t\t\tmime: 'image/x-icon',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {\n\t\t\t// Detected Microsoft Compound File Binary File (MS-CFB) Format.\n\t\t\treturn {\n\t\t\t\text: 'cfb',\n\t\t\t\tmime: 'application/x-cfb',\n\t\t\t};\n\t\t}\n\n\t\t// Increase sample size from 12 to 256.\n\t\tawait tokenizer.peekBuffer(this.buffer, {length: Math.min(256, tokenizer.fileInfo.size), mayBeLess: true});\n\n\t\tif (this.check([0x61, 0x63, 0x73, 0x70], {offset: 36})) {\n\t\t\treturn {\n\t\t\t\text: 'icc',\n\t\t\t\tmime: 'application/vnd.iccprofile',\n\t\t\t};\n\t\t}\n\n\t\t// -- 15-byte signatures --\n\n\t\tif (this.checkString('BEGIN:')) {\n\t\t\tif (this.checkString('VCARD', {offset: 6})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'vcf',\n\t\t\t\t\tmime: 'text/vcard',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (this.checkString('VCALENDAR', {offset: 6})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'ics',\n\t\t\t\t\tmime: 'text/calendar',\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// `raf` is here just to keep all the raw image detectors together.\n\t\tif (this.checkString('FUJIFILMCCD-RAW')) {\n\t\t\treturn {\n\t\t\t\text: 'raf',\n\t\t\t\tmime: 'image/x-fujifilm-raf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('Extended Module:')) {\n\t\t\treturn {\n\t\t\t\text: 'xm',\n\t\t\t\tmime: 'audio/x-xm',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('Creative Voice File')) {\n\t\t\treturn {\n\t\t\t\text: 'voc',\n\t\t\t\tmime: 'audio/x-voc',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x04, 0x00, 0x00, 0x00]) && this.buffer.length >= 16) { // Rough & quick check Pickle/ASAR\n\t\t\tconst jsonSize = this.buffer.readUInt32LE(12);\n\t\t\tif (jsonSize > 12 && this.buffer.length >= jsonSize + 16) {\n\t\t\t\ttry {\n\t\t\t\t\tconst header = this.buffer.slice(16, jsonSize + 16).toString();\n\t\t\t\t\tconst json = JSON.parse(header);\n\t\t\t\t\t// Check if Pickle is ASAR\n\t\t\t\t\tif (json.files) { // Final check, assuring Pickle/ASAR format\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\text: 'asar',\n\t\t\t\t\t\t\tmime: 'application/x-asar',\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t} catch {}\n\t\t\t}\n\t\t}\n\n\t\tif (this.check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {\n\t\t\treturn {\n\t\t\t\text: 'mxf',\n\t\t\t\tmime: 'application/mxf',\n\t\t\t};\n\t\t}\n\n\t\tif (this.checkString('SCRM', {offset: 44})) {\n\t\t\treturn {\n\t\t\t\text: 's3m',\n\t\t\t\tmime: 'audio/x-s3m',\n\t\t\t};\n\t\t}\n\n\t\t// Raw MPEG-2 transport stream (188-byte packets)\n\t\tif (this.check([0x47]) && this.check([0x47], {offset: 188})) {\n\t\t\treturn {\n\t\t\t\text: 'mts',\n\t\t\t\tmime: 'video/mp2t',\n\t\t\t};\n\t\t}\n\n\t\t// Blu-ray Disc Audio-Video (BDAV) MPEG-2 transport stream has 4-byte TP_extra_header before each 188-byte packet\n\t\tif (this.check([0x47], {offset: 4}) && this.check([0x47], {offset: 196})) {\n\t\t\treturn {\n\t\t\t\text: 'mts',\n\t\t\t\tmime: 'video/mp2t',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {offset: 60})) {\n\t\t\treturn {\n\t\t\t\text: 'mobi',\n\t\t\t\tmime: 'application/x-mobipocket-ebook',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x44, 0x49, 0x43, 0x4D], {offset: 128})) {\n\t\t\treturn {\n\t\t\t\text: 'dcm',\n\t\t\t\tmime: 'application/dicom',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])) {\n\t\t\treturn {\n\t\t\t\text: 'lnk',\n\t\t\t\tmime: 'application/x.ms.shortcut', // Invented by us\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x62, 0x6F, 0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'alias',\n\t\t\t\tmime: 'application/x.apple.alias', // Invented by us\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tthis.check([0x4C, 0x50], {offset: 34})\n\t\t\t&& (\n\t\t\t\tthis.check([0x00, 0x00, 0x01], {offset: 8})\n\t\t\t\t|| this.check([0x01, 0x00, 0x02], {offset: 8})\n\t\t\t\t|| this.check([0x02, 0x00, 0x02], {offset: 8})\n\t\t\t)\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'eot',\n\t\t\t\tmime: 'application/vnd.ms-fontobject',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0x06, 0x06, 0xED, 0xF5, 0xD8, 0x1D, 0x46, 0xE5, 0xBD, 0x31, 0xEF, 0xE7, 0xFE, 0x74, 0xB7, 0x1D])) {\n\t\t\treturn {\n\t\t\t\text: 'indd',\n\t\t\t\tmime: 'application/x-indesign',\n\t\t\t};\n\t\t}\n\n\t\t// Increase sample size from 256 to 512\n\t\tawait tokenizer.peekBuffer(this.buffer, {length: Math.min(512, tokenizer.fileInfo.size), mayBeLess: true});\n\n\t\t// Requires a buffer size of 512 bytes\n\t\tif (tarHeaderChecksumMatches(this.buffer)) {\n\t\t\treturn {\n\t\t\t\text: 'tar',\n\t\t\t\tmime: 'application/x-tar',\n\t\t\t};\n\t\t}\n\n\t\tif (this.check([0xFF, 0xFE])) { // UTF-16-BOM-BE\n\t\t\tif (this.check([60, 0, 63, 0, 120, 0, 109, 0, 108, 0], {offset: 2})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'xml',\n\t\t\t\t\tmime: 'application/xml',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (this.check([0xFF, 0x0E, 0x53, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00], {offset: 2})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'skp',\n\t\t\t\t\tmime: 'application/vnd.sketchup.skp',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn undefined; // Some text based format\n\t\t}\n\n\t\tif (this.checkString('-----BEGIN PGP MESSAGE-----')) {\n\t\t\treturn {\n\t\t\t\text: 'pgp',\n\t\t\t\tmime: 'application/pgp-encrypted',\n\t\t\t};\n\t\t}\n\n\t\t// Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)\n\t\tif (this.buffer.length >= 2 && this.check([0xFF, 0xE0], {offset: 0, mask: [0xFF, 0xE0]})) {\n\t\t\tif (this.check([0x10], {offset: 1, mask: [0x16]})) {\n\t\t\t\t// Check for (ADTS) MPEG-2\n\t\t\t\tif (this.check([0x08], {offset: 1, mask: [0x08]})) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'aac',\n\t\t\t\t\t\tmime: 'audio/aac',\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Must be (ADTS) MPEG-4\n\t\t\t\treturn {\n\t\t\t\t\text: 'aac',\n\t\t\t\t\tmime: 'audio/aac',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// MPEG 1 or 2 Layer 3 header\n\t\t\t// Check for MPEG layer 3\n\t\t\tif (this.check([0x02], {offset: 1, mask: [0x06]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'mp3',\n\t\t\t\t\tmime: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Check for MPEG layer 2\n\t\t\tif (this.check([0x04], {offset: 1, mask: [0x06]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'mp2',\n\t\t\t\t\tmime: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Check for MPEG layer 1\n\t\t\tif (this.check([0x06], {offset: 1, mask: [0x06]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'mp1',\n\t\t\t\t\tmime: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\tasync readTiffTag(bigEndian) {\n\t\tconst tagId = await this.tokenizer.readToken(bigEndian ? Token.UINT16_BE : Token.UINT16_LE);\n\t\tthis.tokenizer.ignore(10);\n\t\tswitch (tagId) {\n\t\t\tcase 50_341:\n\t\t\t\treturn {\n\t\t\t\t\text: 'arw',\n\t\t\t\t\tmime: 'image/x-sony-arw',\n\t\t\t\t};\n\t\t\tcase 50_706:\n\t\t\t\treturn {\n\t\t\t\t\text: 'dng',\n\t\t\t\t\tmime: 'image/x-adobe-dng',\n\t\t\t\t};\n\t\t\tdefault:\n\t\t}\n\t}\n\n\tasync readTiffIFD(bigEndian) {\n\t\tconst numberOfTags = await this.tokenizer.readToken(bigEndian ? Token.UINT16_BE : Token.UINT16_LE);\n\t\tfor (let n = 0; n < numberOfTags; ++n) {\n\t\t\tconst fileType = await this.readTiffTag(bigEndian);\n\t\t\tif (fileType) {\n\t\t\t\treturn fileType;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync readTiffHeader(bigEndian) {\n\t\tconst version = (bigEndian ? Token.UINT16_BE : Token.UINT16_LE).get(this.buffer, 2);\n\t\tconst ifdOffset = (bigEndian ? Token.UINT32_BE : Token.UINT32_LE).get(this.buffer, 4);\n\n\t\tif (version === 42) {\n\t\t\t// TIFF file header\n\t\t\tif (ifdOffset >= 6) {\n\t\t\t\tif (this.checkString('CR', {offset: 8})) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'cr2',\n\t\t\t\t\t\tmime: 'image/x-canon-cr2',\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (ifdOffset >= 8 && (this.check([0x1C, 0x00, 0xFE, 0x00], {offset: 8}) || this.check([0x1F, 0x00, 0x0B, 0x00], {offset: 8}))) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'nef',\n\t\t\t\t\t\tmime: 'image/x-nikon-nef',\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait this.tokenizer.ignore(ifdOffset);\n\t\t\tconst fileType = await this.readTiffIFD(bigEndian);\n\t\t\treturn fileType ?? {\n\t\t\t\text: 'tif',\n\t\t\t\tmime: 'image/tiff',\n\t\t\t};\n\t\t}\n\n\t\tif (version === 43) {\t// Big TIFF file header\n\t\t\treturn {\n\t\t\t\text: 'tif',\n\t\t\t\tmime: 'image/tiff',\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport async function fileTypeStream(readableStream, {sampleSize = minimumBytes} = {}) {\n\tconst {default: stream} = await import('node:stream');\n\n\treturn new Promise((resolve, reject) => {\n\t\treadableStream.on('error', reject);\n\n\t\treadableStream.once('readable', () => {\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\t// Set up output stream\n\t\t\t\t\tconst pass = new stream.PassThrough();\n\t\t\t\t\tconst outputStream = stream.pipeline ? stream.pipeline(readableStream, pass, () => {}) : readableStream.pipe(pass);\n\n\t\t\t\t\t// Read the input stream and detect the filetype\n\t\t\t\t\tconst chunk = readableStream.read(sampleSize) ?? readableStream.read() ?? Buffer.alloc(0);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst fileType = await fileTypeFromBuffer(chunk);\n\t\t\t\t\t\tpass.fileType = fileType;\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (error instanceof strtok3.EndOfStreamError) {\n\t\t\t\t\t\t\tpass.fileType = undefined;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(outputStream);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t})();\n\t\t});\n\t});\n}\n\nexport const supportedExtensions = new Set(extensions);\nexport const supportedMimeTypes = new Set(mimeTypes);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}