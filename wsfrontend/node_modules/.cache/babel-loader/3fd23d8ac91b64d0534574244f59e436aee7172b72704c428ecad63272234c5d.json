{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconciler\n */\n\n'use strict';\n\nvar ReactRef = require('./ReactRef');\n\n/**\n * Helper to call ReactRef.attachRefs with this composite component, split out\n * to avoid allocations in the transaction mount-ready queue.\n */\nfunction attachRefs() {\n  ReactRef.attachRefs(this, this._currentElement);\n}\nvar ReactReconciler = {\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (internalInstance, rootID, transaction, context) {\n    var markup = internalInstance.mountComponent(rootID, transaction, context);\n    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n    return markup;\n  },\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function (internalInstance) {\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);\n    internalInstance.unmountComponent();\n  },\n  /**\n   * Update a component using a new element.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @internal\n   */\n  receiveComponent: function (internalInstance, nextElement, transaction, context) {\n    var prevElement = internalInstance._currentElement;\n    if (nextElement === prevElement && context === internalInstance._context) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for an element created outside a composite to be\n      // deeply mutated and reused.\n\n      // TODO: Bailing out early is just a perf optimization right?\n      // TODO: Removing the return statement should affect correctness?\n      return;\n    }\n    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);\n    if (refsChanged) {\n      ReactRef.detachRefs(internalInstance, prevElement);\n    }\n    internalInstance.receiveComponent(nextElement, transaction, context);\n    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n  },\n  /**\n   * Flush any dirty changes in a component.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (internalInstance, transaction) {\n    internalInstance.performUpdateIfNecessary(transaction);\n  }\n};\nmodule.exports = ReactReconciler;","map":{"version":3,"names":["ReactRef","require","attachRefs","_currentElement","ReactReconciler","mountComponent","internalInstance","rootID","transaction","context","markup","ref","getReactMountReady","enqueue","unmountComponent","detachRefs","receiveComponent","nextElement","prevElement","_context","refsChanged","shouldUpdateRefs","performUpdateIfNecessary","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/ReactReconciler.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconciler\n */\n\n'use strict';\n\nvar ReactRef = require('./ReactRef');\n\n/**\n * Helper to call ReactRef.attachRefs with this composite component, split out\n * to avoid allocations in the transaction mount-ready queue.\n */\nfunction attachRefs() {\n  ReactRef.attachRefs(this, this._currentElement);\n}\n\nvar ReactReconciler = {\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (internalInstance, rootID, transaction, context) {\n    var markup = internalInstance.mountComponent(rootID, transaction, context);\n    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function (internalInstance) {\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);\n    internalInstance.unmountComponent();\n  },\n\n  /**\n   * Update a component using a new element.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @internal\n   */\n  receiveComponent: function (internalInstance, nextElement, transaction, context) {\n    var prevElement = internalInstance._currentElement;\n\n    if (nextElement === prevElement && context === internalInstance._context) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for an element created outside a composite to be\n      // deeply mutated and reused.\n\n      // TODO: Bailing out early is just a perf optimization right?\n      // TODO: Removing the return statement should affect correctness?\n      return;\n    }\n\n    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);\n\n    if (refsChanged) {\n      ReactRef.detachRefs(internalInstance, prevElement);\n    }\n\n    internalInstance.receiveComponent(nextElement, transaction, context);\n\n    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n  },\n\n  /**\n   * Flush any dirty changes in a component.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (internalInstance, transaction) {\n    internalInstance.performUpdateIfNecessary(transaction);\n  }\n\n};\n\nmodule.exports = ReactReconciler;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAEpC;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAAA,EAAG;EACpBF,QAAQ,CAACE,UAAU,CAAC,IAAI,EAAE,IAAI,CAACC,eAAe,CAAC;AACjD;AAEA,IAAIC,eAAe,GAAG;EAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,cAAc,EAAE,SAAAA,CAAUC,gBAAgB,EAAEC,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAE;IACxE,IAAIC,MAAM,GAAGJ,gBAAgB,CAACD,cAAc,CAACE,MAAM,EAAEC,WAAW,EAAEC,OAAO,CAAC;IAC1E,IAAIH,gBAAgB,CAACH,eAAe,IAAIG,gBAAgB,CAACH,eAAe,CAACQ,GAAG,IAAI,IAAI,EAAE;MACpFH,WAAW,CAACI,kBAAkB,CAAC,CAAC,CAACC,OAAO,CAACX,UAAU,EAAEI,gBAAgB,CAAC;IACxE;IACA,OAAOI,MAAM;EACf,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEI,gBAAgB,EAAE,SAAAA,CAAUR,gBAAgB,EAAE;IAC5CN,QAAQ,CAACe,UAAU,CAACT,gBAAgB,EAAEA,gBAAgB,CAACH,eAAe,CAAC;IACvEG,gBAAgB,CAACQ,gBAAgB,CAAC,CAAC;EACrC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,gBAAgB,EAAE,SAAAA,CAAUV,gBAAgB,EAAEW,WAAW,EAAET,WAAW,EAAEC,OAAO,EAAE;IAC/E,IAAIS,WAAW,GAAGZ,gBAAgB,CAACH,eAAe;IAElD,IAAIc,WAAW,KAAKC,WAAW,IAAIT,OAAO,KAAKH,gBAAgB,CAACa,QAAQ,EAAE;MACxE;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;IACF;IAEA,IAAIC,WAAW,GAAGpB,QAAQ,CAACqB,gBAAgB,CAACH,WAAW,EAAED,WAAW,CAAC;IAErE,IAAIG,WAAW,EAAE;MACfpB,QAAQ,CAACe,UAAU,CAACT,gBAAgB,EAAEY,WAAW,CAAC;IACpD;IAEAZ,gBAAgB,CAACU,gBAAgB,CAACC,WAAW,EAAET,WAAW,EAAEC,OAAO,CAAC;IAEpE,IAAIW,WAAW,IAAId,gBAAgB,CAACH,eAAe,IAAIG,gBAAgB,CAACH,eAAe,CAACQ,GAAG,IAAI,IAAI,EAAE;MACnGH,WAAW,CAACI,kBAAkB,CAAC,CAAC,CAACC,OAAO,CAACX,UAAU,EAAEI,gBAAgB,CAAC;IACxE;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEgB,wBAAwB,EAAE,SAAAA,CAAUhB,gBAAgB,EAAEE,WAAW,EAAE;IACjEF,gBAAgB,CAACgB,wBAAwB,CAACd,WAAW,CAAC;EACxD;AAEF,CAAC;AAEDe,MAAM,CAACC,OAAO,GAAGpB,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}