{"ast":null,"code":"import { ReadStreamTokenizer } from './ReadStreamTokenizer.js';\nimport { BufferTokenizer } from './BufferTokenizer.js';\nexport { EndOfStreamError } from 'peek-readable';\n/**\n * Construct ReadStreamTokenizer from given Stream.\n * Will set fileSize, if provided given Stream has set the .path property/\n * @param stream - Read from Node.js Stream.Readable\n * @param fileInfo - Pass the file information, like size and MIME-type of the corresponding stream.\n * @returns ReadStreamTokenizer\n */\nexport function fromStream(stream, fileInfo) {\n  fileInfo = fileInfo ? fileInfo : {};\n  return new ReadStreamTokenizer(stream, fileInfo);\n}\n/**\n * Construct ReadStreamTokenizer from given Buffer.\n * @param uint8Array - Uint8Array to tokenize\n * @param fileInfo - Pass additional file information to the tokenizer\n * @returns BufferTokenizer\n */\nexport function fromBuffer(uint8Array, fileInfo) {\n  return new BufferTokenizer(uint8Array, fileInfo);\n}","map":{"version":3,"names":["ReadStreamTokenizer","BufferTokenizer","EndOfStreamError","fromStream","stream","fileInfo","fromBuffer","uint8Array"],"sources":["C:/Users/Ferhat/Social-Media-App-Project/wsfrontend/node_modules/strtok3/lib/core.js"],"sourcesContent":["import { ReadStreamTokenizer } from './ReadStreamTokenizer.js';\nimport { BufferTokenizer } from './BufferTokenizer.js';\nexport { EndOfStreamError } from 'peek-readable';\n/**\n * Construct ReadStreamTokenizer from given Stream.\n * Will set fileSize, if provided given Stream has set the .path property/\n * @param stream - Read from Node.js Stream.Readable\n * @param fileInfo - Pass the file information, like size and MIME-type of the corresponding stream.\n * @returns ReadStreamTokenizer\n */\nexport function fromStream(stream, fileInfo) {\n    fileInfo = fileInfo ? fileInfo : {};\n    return new ReadStreamTokenizer(stream, fileInfo);\n}\n/**\n * Construct ReadStreamTokenizer from given Buffer.\n * @param uint8Array - Uint8Array to tokenize\n * @param fileInfo - Pass additional file information to the tokenizer\n * @returns BufferTokenizer\n */\nexport function fromBuffer(uint8Array, fileInfo) {\n    return new BufferTokenizer(uint8Array, fileInfo);\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,gBAAgB,QAAQ,eAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,MAAM,EAAEC,QAAQ,EAAE;EACzCA,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,GAAG,CAAC,CAAC;EACnC,OAAO,IAAIL,mBAAmB,CAACI,MAAM,EAAEC,QAAQ,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,UAAU,EAAEF,QAAQ,EAAE;EAC7C,OAAO,IAAIJ,eAAe,CAACM,UAAU,EAAEF,QAAQ,CAAC;AACpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}