{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createNodesFromMarkup\n * @typechecks\n */\n\n/*eslint-disable fb-www/unsafe-html*/\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\nvar createArrayFromMixed = require('./createArrayFromMixed');\nvar getMarkupWrap = require('./getMarkupWrap');\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;\n  var nodeName = getNodeName(markup);\n  var wrap = nodeName && getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n    var wrapDepth = wrap[0];\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n  var scripts = node.getElementsByTagName('script');\n  if (scripts.length) {\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n  var nodes = createArrayFromMixed(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\nmodule.exports = createNodesFromMarkup;","map":{"version":3,"names":["ExecutionEnvironment","require","createArrayFromMixed","getMarkupWrap","invariant","dummyNode","canUseDOM","document","createElement","nodeNamePattern","getNodeName","markup","nodeNameMatch","match","toLowerCase","createNodesFromMarkup","handleScript","node","process","env","NODE_ENV","undefined","nodeName","wrap","innerHTML","wrapDepth","lastChild","scripts","getElementsByTagName","length","forEach","nodes","childNodes","removeChild","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/fbjs/lib/createNodesFromMarkup.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createNodesFromMarkup\n * @typechecks\n */\n\n/*eslint-disable fb-www/unsafe-html*/\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar createArrayFromMixed = require('./createArrayFromMixed');\nvar getMarkupWrap = require('./getMarkupWrap');\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;\n  var nodeName = getNodeName(markup);\n\n  var wrap = nodeName && getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n\n    var wrapDepth = wrap[0];\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n  if (scripts.length) {\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = createArrayFromMixed(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,YAAY;;AAEZ,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAE5D,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAC5D,IAAIE,aAAa,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAC9C,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAa,CAAC;;AAEtC;AACA;AACA;AACA,IAAII,SAAS,GAAGL,oBAAoB,CAACM,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,GAAG,IAAI;;AAErF;AACA;AACA;AACA,IAAIC,eAAe,GAAG,YAAY;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,MAAM,EAAE;EAC3B,IAAIC,aAAa,GAAGD,MAAM,CAACE,KAAK,CAACJ,eAAe,CAAC;EACjD,OAAOG,aAAa,IAAIA,aAAa,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACJ,MAAM,EAAEK,YAAY,EAAE;EACnD,IAAIC,IAAI,GAAGZ,SAAS;EACpB,CAAC,CAAC,CAACA,SAAS,GAAGa,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGhB,SAAS,CAAC,KAAK,EAAE,6CAA6C,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAGiB,SAAS;EACrJ,IAAIC,QAAQ,GAAGZ,WAAW,CAACC,MAAM,CAAC;EAElC,IAAIY,IAAI,GAAGD,QAAQ,IAAInB,aAAa,CAACmB,QAAQ,CAAC;EAC9C,IAAIC,IAAI,EAAE;IACRN,IAAI,CAACO,SAAS,GAAGD,IAAI,CAAC,CAAC,CAAC,GAAGZ,MAAM,GAAGY,IAAI,CAAC,CAAC,CAAC;IAE3C,IAAIE,SAAS,GAAGF,IAAI,CAAC,CAAC,CAAC;IACvB,OAAOE,SAAS,EAAE,EAAE;MAClBR,IAAI,GAAGA,IAAI,CAACS,SAAS;IACvB;EACF,CAAC,MAAM;IACLT,IAAI,CAACO,SAAS,GAAGb,MAAM;EACzB;EAEA,IAAIgB,OAAO,GAAGV,IAAI,CAACW,oBAAoB,CAAC,QAAQ,CAAC;EACjD,IAAID,OAAO,CAACE,MAAM,EAAE;IAClB,CAACb,YAAY,GAAGE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGhB,SAAS,CAAC,KAAK,EAAE,mEAAmE,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAGiB,SAAS;IAC5KnB,oBAAoB,CAACyB,OAAO,CAAC,CAACG,OAAO,CAACd,YAAY,CAAC;EACrD;EAEA,IAAIe,KAAK,GAAG7B,oBAAoB,CAACe,IAAI,CAACe,UAAU,CAAC;EACjD,OAAOf,IAAI,CAACS,SAAS,EAAE;IACrBT,IAAI,CAACgB,WAAW,CAAChB,IAAI,CAACS,SAAS,CAAC;EAClC;EACA,OAAOK,KAAK;AACd;AAEAG,MAAM,CAACC,OAAO,GAAGpB,qBAAqB"},"metadata":{},"sourceType":"script","externalDependencies":[]}