{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactChildReconciler = require('./ReactChildReconciler');\nvar flattenChildren = require('./flattenChildren');\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueInsertMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    content: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the markup of a node.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @private\n */\nfunction enqueueSetMarkup(parentID, markup) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.SET_MARKUP,\n    markupIndex: null,\n    content: markup,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    content: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {\n      var nextChildren;\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n        }\n      }\n      nextChildren = flattenChildren(nextNestedChildrenElements);\n      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n    },\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n      return mountImages;\n    },\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        // TODO: The setTextContent operation should be enough\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChild(prevChildren[name]);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        this.setMarkup(nextMarkup);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildrenElements, transaction, context);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);\n      this._renderedChildren = nextChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChild(prevChild);\n          }\n          // The child must be instantiated before it's mounted.\n          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChild(prevChildren[name]);\n        }\n      }\n    },\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, mountImage) {\n      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n    /**\n     * Sets this markup string.\n     *\n     * @param {string} markup Markup to set.\n     * @protected\n     */\n    setMarkup: function (markup) {\n      enqueueSetMarkup(this._rootNodeID, markup);\n    },\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n  }\n};\nmodule.exports = ReactMultiChild;","map":{"version":3,"names":["ReactComponentEnvironment","require","ReactMultiChildUpdateTypes","ReactCurrentOwner","ReactReconciler","ReactChildReconciler","flattenChildren","updateDepth","updateQueue","markupQueue","enqueueInsertMarkup","parentID","markup","toIndex","push","parentNode","type","INSERT_MARKUP","markupIndex","content","fromIndex","enqueueMove","MOVE_EXISTING","enqueueRemove","REMOVE_NODE","enqueueSetMarkup","SET_MARKUP","enqueueTextContent","textContent","TEXT_CONTENT","processQueue","length","processChildrenUpdates","clearQueue","ReactMultiChild","Mixin","_reconcilerInstantiateChildren","nestedChildren","transaction","context","process","env","NODE_ENV","_currentElement","current","_owner","instantiateChildren","_reconcilerUpdateChildren","prevChildren","nextNestedChildrenElements","nextChildren","updateChildren","mountChildren","children","_renderedChildren","mountImages","index","name","hasOwnProperty","child","rootID","_rootNodeID","mountImage","mountComponent","_mountIndex","updateTextContent","nextContent","errorThrown","unmountChildren","_unmountChild","setTextContent","updateMarkup","nextMarkup","_unmountChildByName","setMarkup","_updateChildren","lastIndex","nextIndex","prevChild","nextChild","moveChild","Math","max","_mountChildByNameAtIndex","renderedChildren","createChild","removeChild","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/ReactMultiChild.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactChildReconciler = require('./ReactChildReconciler');\n\nvar flattenChildren = require('./flattenChildren');\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueInsertMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    content: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the markup of a node.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @private\n */\nfunction enqueueSetMarkup(parentID, markup) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.SET_MARKUP,\n    markupIndex: null,\n    content: markup,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    content: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {\n      var nextChildren;\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n        }\n      }\n      nextChildren = flattenChildren(nextNestedChildrenElements);\n      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n    },\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        // TODO: The setTextContent operation should be enough\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChild(prevChildren[name]);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        this.setMarkup(nextMarkup);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildrenElements, transaction, context);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);\n      this._renderedChildren = nextChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChild(prevChild);\n          }\n          // The child must be instantiated before it's mounted.\n          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChild(prevChildren[name]);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, mountImage) {\n      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Sets this markup string.\n     *\n     * @param {string} markup Markup to set.\n     * @protected\n     */\n    setMarkup: function (markup) {\n      enqueueSetMarkup(this._rootNodeID, markup);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}