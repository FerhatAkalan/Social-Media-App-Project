{"ast":null,"code":"/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport invariant from 'tiny-invariant';\nconst DEFAULT_LINK_REL = 'noopener noreferrer nofollow';\nexport default class LinkService {\n  constructor() {\n    this.externalLinkEnabled = true;\n    this.externalLinkRel = undefined;\n    this.externalLinkTarget = undefined;\n    this.isInPresentationMode = false;\n    this.pdfDocument = undefined;\n    this.pdfViewer = undefined;\n  }\n  setDocument(pdfDocument) {\n    this.pdfDocument = pdfDocument;\n  }\n  setViewer(pdfViewer) {\n    this.pdfViewer = pdfViewer;\n  }\n  setExternalLinkRel(externalLinkRel) {\n    this.externalLinkRel = externalLinkRel;\n  }\n  setExternalLinkTarget(externalLinkTarget) {\n    this.externalLinkTarget = externalLinkTarget;\n  }\n  setHistory() {\n    // Intentionally empty\n  }\n  get pagesCount() {\n    return this.pdfDocument ? this.pdfDocument.numPages : 0;\n  }\n  get page() {\n    invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n    return this.pdfViewer.currentPageNumber || 0;\n  }\n  set page(value) {\n    invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n    this.pdfViewer.currentPageNumber = value;\n  }\n  // eslint-disable-next-line @typescript-eslint/class-literal-property-style\n  get rotation() {\n    return 0;\n  }\n  set rotation(value) {\n    // Intentionally empty\n  }\n  goToDestination(dest) {\n    return new Promise(resolve => {\n      invariant(this.pdfDocument, 'PDF document not loaded.');\n      invariant(dest, 'Destination is not specified.');\n      if (typeof dest === 'string') {\n        this.pdfDocument.getDestination(dest).then(resolve);\n      } else if (Array.isArray(dest)) {\n        resolve(dest);\n      } else {\n        dest.then(resolve);\n      }\n    }).then(explicitDest => {\n      invariant(Array.isArray(explicitDest), `\"${explicitDest}\" is not a valid destination array.`);\n      const destRef = explicitDest[0];\n      new Promise(resolve => {\n        invariant(this.pdfDocument, 'PDF document not loaded.');\n        if (destRef instanceof Object) {\n          this.pdfDocument.getPageIndex(destRef).then(pageIndex => {\n            resolve(pageIndex);\n          }).catch(() => {\n            invariant(false, `\"${destRef}\" is not a valid page reference.`);\n          });\n        } else if (typeof destRef === 'number') {\n          resolve(destRef);\n        } else {\n          invariant(false, `\"${destRef}\" is not a valid destination reference.`);\n        }\n      }).then(pageIndex => {\n        const pageNumber = pageIndex + 1;\n        invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n        invariant(pageNumber >= 1 && pageNumber <= this.pagesCount, `\"${pageNumber}\" is not a valid page number.`);\n        this.pdfViewer.scrollPageIntoView({\n          dest: explicitDest,\n          pageIndex,\n          pageNumber\n        });\n      });\n    });\n  }\n  navigateTo(dest) {\n    this.goToDestination(dest);\n  }\n  goToPage(pageNumber) {\n    const pageIndex = pageNumber - 1;\n    invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n    invariant(pageNumber >= 1 && pageNumber <= this.pagesCount, `\"${pageNumber}\" is not a valid page number.`);\n    this.pdfViewer.scrollPageIntoView({\n      pageIndex,\n      pageNumber\n    });\n  }\n  addLinkAttributes(link, url, newWindow) {\n    link.href = url;\n    link.rel = this.externalLinkRel || DEFAULT_LINK_REL;\n    link.target = newWindow ? '_blank' : this.externalLinkTarget || '';\n  }\n  getDestinationHash() {\n    return '#';\n  }\n  getAnchorUrl() {\n    return '#';\n  }\n  setHash() {\n    // Intentionally empty\n  }\n  executeNamedAction() {\n    // Intentionally empty\n  }\n  cachePageRef() {\n    // Intentionally empty\n  }\n  isPageVisible() {\n    return true;\n  }\n  isPageCached() {\n    return true;\n  }\n  executeSetOCGState() {\n    // Intentionally empty\n  }\n}","map":{"version":3,"names":["invariant","DEFAULT_LINK_REL","LinkService","constructor","externalLinkEnabled","externalLinkRel","undefined","externalLinkTarget","isInPresentationMode","pdfDocument","pdfViewer","setDocument","setViewer","setExternalLinkRel","setExternalLinkTarget","setHistory","pagesCount","numPages","page","currentPageNumber","value","rotation","goToDestination","dest","Promise","resolve","getDestination","then","Array","isArray","explicitDest","destRef","Object","getPageIndex","pageIndex","catch","pageNumber","scrollPageIntoView","navigateTo","goToPage","addLinkAttributes","link","url","newWindow","href","rel","target","getDestinationHash","getAnchorUrl","setHash","executeNamedAction","cachePageRef","isPageVisible","isPageCached","executeSetOCGState"],"sources":["C:/Users/Ferhat/Social-Media-App-Project/wsfrontend/node_modules/react-pdf/dist/esm/LinkService.js"],"sourcesContent":["/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport invariant from 'tiny-invariant';\nconst DEFAULT_LINK_REL = 'noopener noreferrer nofollow';\nexport default class LinkService {\n    constructor() {\n        this.externalLinkEnabled = true;\n        this.externalLinkRel = undefined;\n        this.externalLinkTarget = undefined;\n        this.isInPresentationMode = false;\n        this.pdfDocument = undefined;\n        this.pdfViewer = undefined;\n    }\n    setDocument(pdfDocument) {\n        this.pdfDocument = pdfDocument;\n    }\n    setViewer(pdfViewer) {\n        this.pdfViewer = pdfViewer;\n    }\n    setExternalLinkRel(externalLinkRel) {\n        this.externalLinkRel = externalLinkRel;\n    }\n    setExternalLinkTarget(externalLinkTarget) {\n        this.externalLinkTarget = externalLinkTarget;\n    }\n    setHistory() {\n        // Intentionally empty\n    }\n    get pagesCount() {\n        return this.pdfDocument ? this.pdfDocument.numPages : 0;\n    }\n    get page() {\n        invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n        return this.pdfViewer.currentPageNumber || 0;\n    }\n    set page(value) {\n        invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n        this.pdfViewer.currentPageNumber = value;\n    }\n    // eslint-disable-next-line @typescript-eslint/class-literal-property-style\n    get rotation() {\n        return 0;\n    }\n    set rotation(value) {\n        // Intentionally empty\n    }\n    goToDestination(dest) {\n        return new Promise((resolve) => {\n            invariant(this.pdfDocument, 'PDF document not loaded.');\n            invariant(dest, 'Destination is not specified.');\n            if (typeof dest === 'string') {\n                this.pdfDocument.getDestination(dest).then(resolve);\n            }\n            else if (Array.isArray(dest)) {\n                resolve(dest);\n            }\n            else {\n                dest.then(resolve);\n            }\n        }).then((explicitDest) => {\n            invariant(Array.isArray(explicitDest), `\"${explicitDest}\" is not a valid destination array.`);\n            const destRef = explicitDest[0];\n            new Promise((resolve) => {\n                invariant(this.pdfDocument, 'PDF document not loaded.');\n                if (destRef instanceof Object) {\n                    this.pdfDocument\n                        .getPageIndex(destRef)\n                        .then((pageIndex) => {\n                        resolve(pageIndex);\n                    })\n                        .catch(() => {\n                        invariant(false, `\"${destRef}\" is not a valid page reference.`);\n                    });\n                }\n                else if (typeof destRef === 'number') {\n                    resolve(destRef);\n                }\n                else {\n                    invariant(false, `\"${destRef}\" is not a valid destination reference.`);\n                }\n            }).then((pageIndex) => {\n                const pageNumber = pageIndex + 1;\n                invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n                invariant(pageNumber >= 1 && pageNumber <= this.pagesCount, `\"${pageNumber}\" is not a valid page number.`);\n                this.pdfViewer.scrollPageIntoView({\n                    dest: explicitDest,\n                    pageIndex,\n                    pageNumber,\n                });\n            });\n        });\n    }\n    navigateTo(dest) {\n        this.goToDestination(dest);\n    }\n    goToPage(pageNumber) {\n        const pageIndex = pageNumber - 1;\n        invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n        invariant(pageNumber >= 1 && pageNumber <= this.pagesCount, `\"${pageNumber}\" is not a valid page number.`);\n        this.pdfViewer.scrollPageIntoView({\n            pageIndex,\n            pageNumber,\n        });\n    }\n    addLinkAttributes(link, url, newWindow) {\n        link.href = url;\n        link.rel = this.externalLinkRel || DEFAULT_LINK_REL;\n        link.target = newWindow ? '_blank' : this.externalLinkTarget || '';\n    }\n    getDestinationHash() {\n        return '#';\n    }\n    getAnchorUrl() {\n        return '#';\n    }\n    setHash() {\n        // Intentionally empty\n    }\n    executeNamedAction() {\n        // Intentionally empty\n    }\n    cachePageRef() {\n        // Intentionally empty\n    }\n    isPageVisible() {\n        return true;\n    }\n    isPageCached() {\n        return true;\n    }\n    executeSetOCGState() {\n        // Intentionally empty\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}