{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule ReactServerRendering\n */\n'use strict';\n\nvar ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');\nvar ReactElement = require('./ReactElement');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');\nvar ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');\nvar ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');\nvar ReactUpdates = require('./ReactUpdates');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar instantiateReactComponent = require('./instantiateReactComponent');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup\n */\nfunction renderToString(element) {\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n  var transaction;\n  try {\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(false);\n    return transaction.perform(function () {\n      var componentInstance = instantiateReactComponent(element, null);\n      var markup = componentInstance.mountComponent(id, transaction, emptyObject);\n      return ReactMarkupChecksum.addChecksumToMarkup(markup);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n    // Revert to the DOM batching strategy since these two renderers\n    // currently share these stateful modules.\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n  }\n}\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup, without the extra React ID and checksum\n * (for generating static pages)\n */\nfunction renderToStaticMarkup(element) {\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n  var transaction;\n  try {\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(true);\n    return transaction.perform(function () {\n      var componentInstance = instantiateReactComponent(element, null);\n      return componentInstance.mountComponent(id, transaction, emptyObject);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n    // Revert to the DOM batching strategy since these two renderers\n    // currently share these stateful modules.\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n  }\n}\nmodule.exports = {\n  renderToString: renderToString,\n  renderToStaticMarkup: renderToStaticMarkup\n};","map":{"version":3,"names":["ReactDefaultBatchingStrategy","require","ReactElement","ReactInstanceHandles","ReactMarkupChecksum","ReactServerBatchingStrategy","ReactServerRenderingTransaction","ReactUpdates","emptyObject","instantiateReactComponent","invariant","renderToString","element","isValidElement","process","env","NODE_ENV","undefined","transaction","injection","injectBatchingStrategy","id","createReactRootID","getPooled","perform","componentInstance","markup","mountComponent","addChecksumToMarkup","release","renderToStaticMarkup","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/ReactServerRendering.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule ReactServerRendering\n */\n'use strict';\n\nvar ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');\nvar ReactElement = require('./ReactElement');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');\nvar ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');\nvar ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar instantiateReactComponent = require('./instantiateReactComponent');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup\n */\nfunction renderToString(element) {\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n\n  var transaction;\n  try {\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);\n\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(false);\n\n    return transaction.perform(function () {\n      var componentInstance = instantiateReactComponent(element, null);\n      var markup = componentInstance.mountComponent(id, transaction, emptyObject);\n      return ReactMarkupChecksum.addChecksumToMarkup(markup);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n    // Revert to the DOM batching strategy since these two renderers\n    // currently share these stateful modules.\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n  }\n}\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup, without the extra React ID and checksum\n * (for generating static pages)\n */\nfunction renderToStaticMarkup(element) {\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n\n  var transaction;\n  try {\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);\n\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(true);\n\n    return transaction.perform(function () {\n      var componentInstance = instantiateReactComponent(element, null);\n      return componentInstance.mountComponent(id, transaction, emptyObject);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n    // Revert to the DOM batching strategy since these two renderers\n    // currently share these stateful modules.\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n  }\n}\n\nmodule.exports = {\n  renderToString: renderToString,\n  renderToStaticMarkup: renderToStaticMarkup\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}