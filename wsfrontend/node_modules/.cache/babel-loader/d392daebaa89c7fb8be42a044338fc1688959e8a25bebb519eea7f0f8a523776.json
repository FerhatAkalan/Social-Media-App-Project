{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n  /**\n   * @param {object} object\n   * @param {string} objectName\n   * @param {object<string>} methodNames\n   */\n  measureMethods: function (object, objectName, methodNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      for (var key in methodNames) {\n        if (!methodNames.hasOwnProperty(key)) {\n          continue;\n        }\n        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);\n      }\n    }\n  },\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function (objName, fnName, func) {\n    if (process.env.NODE_ENV !== 'production') {\n      var measuredFunc = null;\n      var wrapper = function () {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n          return measuredFunc.apply(this, arguments);\n        }\n        return func.apply(this, arguments);\n      };\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n    return func;\n  },\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function (measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\nmodule.exports = ReactPerf;","map":{"version":3,"names":["ReactPerf","enableMeasure","storedMeasure","_noMeasure","measureMethods","object","objectName","methodNames","process","env","NODE_ENV","key","hasOwnProperty","measure","objName","fnName","func","measuredFunc","wrapper","apply","arguments","displayName","injection","injectMeasure","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/ReactPerf.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * @param {object} object\n   * @param {string} objectName\n   * @param {object<string>} methodNames\n   */\n  measureMethods: function (object, objectName, methodNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      for (var key in methodNames) {\n        if (!methodNames.hasOwnProperty(key)) {\n          continue;\n        }\n        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);\n      }\n    }\n  },\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function (objName, fnName, func) {\n    if (process.env.NODE_ENV !== 'production') {\n      var measuredFunc = null;\n      var wrapper = function () {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n          return measuredFunc.apply(this, arguments);\n        }\n        return func.apply(this, arguments);\n      };\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n    return func;\n  },\n\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function (measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports = ReactPerf;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAG;EACd;AACF;AACA;AACA;EACEC,aAAa,EAAE,KAAK;EAEpB;AACF;AACA;AACA;EACEC,aAAa,EAAEC,UAAU;EAEzB;AACF;AACA;AACA;AACA;EACEC,cAAc,EAAE,SAAAA,CAAUC,MAAM,EAAEC,UAAU,EAAEC,WAAW,EAAE;IACzD,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,KAAK,IAAIC,GAAG,IAAIJ,WAAW,EAAE;QAC3B,IAAI,CAACA,WAAW,CAACK,cAAc,CAACD,GAAG,CAAC,EAAE;UACpC;QACF;QACAN,MAAM,CAACM,GAAG,CAAC,GAAGX,SAAS,CAACa,OAAO,CAACP,UAAU,EAAEC,WAAW,CAACI,GAAG,CAAC,EAAEN,MAAM,CAACM,GAAG,CAAC,CAAC;MAC5E;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,OAAO,EAAE,SAAAA,CAAUC,OAAO,EAAEC,MAAM,EAAEC,IAAI,EAAE;IACxC,IAAIR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAIO,YAAY,GAAG,IAAI;MACvB,IAAIC,OAAO,GAAG,SAAAA,CAAA,EAAY;QACxB,IAAIlB,SAAS,CAACC,aAAa,EAAE;UAC3B,IAAI,CAACgB,YAAY,EAAE;YACjBA,YAAY,GAAGjB,SAAS,CAACE,aAAa,CAACY,OAAO,EAAEC,MAAM,EAAEC,IAAI,CAAC;UAC/D;UACA,OAAOC,YAAY,CAACE,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QAC5C;QACA,OAAOJ,IAAI,CAACG,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;MACpC,CAAC;MACDF,OAAO,CAACG,WAAW,GAAGP,OAAO,GAAG,GAAG,GAAGC,MAAM;MAC5C,OAAOG,OAAO;IAChB;IACA,OAAOF,IAAI;EACb,CAAC;EAEDM,SAAS,EAAE;IACT;AACJ;AACA;IACIC,aAAa,EAAE,SAAAA,CAAUV,OAAO,EAAE;MAChCb,SAAS,CAACE,aAAa,GAAGW,OAAO;IACnC;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASV,UAAUA,CAACW,OAAO,EAAEC,MAAM,EAAEC,IAAI,EAAE;EACzC,OAAOA,IAAI;AACb;AAEAQ,MAAM,CAACC,OAAO,GAAGzB,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}