{"ast":null,"code":"'use strict';\n\nconst {\n  readdir: _readdir,\n  readdirSync\n} = require('fs');\nconst {\n  platform\n} = require('os');\nconst {\n  isAbsolute,\n  normalize\n} = require('path');\nconst {\n  promisify: pify\n} = require('util');\nconst readdir = pify(_readdir);\nconst isWindows = platform() === 'win32';\nconst delimiter = isWindows ? '\\\\' : '/';\nmodule.exports = {\n  trueCasePath: _trueCasePath({\n    sync: false\n  }),\n  trueCasePathSync: _trueCasePath({\n    sync: true\n  })\n};\nfunction getRelevantFilePathSegments(filePath) {\n  return filePath.split(delimiter).filter(s => s !== '');\n}\nfunction escapeString(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nfunction matchCaseInsensitive(fileOrDirectory, directoryContents, filePath) {\n  const caseInsensitiveRegex = new RegExp(`^${escapeString(fileOrDirectory)}$`, 'i');\n  for (const file of directoryContents) {\n    if (caseInsensitiveRegex.test(file)) return file;\n  }\n  throw new Error(`[true-case-path]: Called with ${filePath}, but no matching file exists`);\n}\nfunction _trueCasePath(_ref) {\n  let {\n    sync\n  } = _ref;\n  return (filePath, basePath) => {\n    if (basePath) {\n      if (!isAbsolute(basePath)) {\n        throw new Error(`[true-case-path]: basePath argument must be absolute. Received \"${basePath}\"`);\n      }\n      basePath = normalize(basePath);\n    }\n    filePath = normalize(filePath);\n    const segments = getRelevantFilePathSegments(filePath);\n    if (isAbsolute(filePath)) {\n      if (basePath) {\n        throw new Error('[true-case-path]: filePath must be relative when used with basePath');\n      }\n      basePath = isWindows ? segments.shift().toUpperCase() // drive letter\n      : '';\n    } else if (!basePath) {\n      basePath = process.cwd();\n    }\n    return sync ? iterateSync(basePath, filePath, segments) : iterateAsync(basePath, filePath, segments);\n  };\n}\nfunction iterateSync(basePath, filePath, segments) {\n  return segments.reduce((realPath, fileOrDirectory) => realPath + delimiter + matchCaseInsensitive(fileOrDirectory, readdirSync(realPath + delimiter), filePath), basePath);\n}\nasync function iterateAsync(basePath, filePath, segments) {\n  return await segments.reduce(async (realPathPromise, fileOrDirectory) => (await realPathPromise) + delimiter + matchCaseInsensitive(fileOrDirectory, await readdir((await realPathPromise) + delimiter), filePath), basePath);\n}","map":{"version":3,"names":["readdir","_readdir","readdirSync","require","platform","isAbsolute","normalize","promisify","pify","isWindows","delimiter","module","exports","trueCasePath","_trueCasePath","sync","trueCasePathSync","getRelevantFilePathSegments","filePath","split","filter","s","escapeString","str","replace","matchCaseInsensitive","fileOrDirectory","directoryContents","caseInsensitiveRegex","RegExp","file","test","Error","_ref","basePath","segments","shift","toUpperCase","process","cwd","iterateSync","iterateAsync","reduce","realPath","realPathPromise"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/true-case-path/index.js"],"sourcesContent":["'use strict'\n\nconst { readdir: _readdir, readdirSync } = require('fs')\nconst { platform } = require('os')\nconst { isAbsolute, normalize } = require('path')\nconst { promisify: pify } = require('util')\n\nconst readdir = pify(_readdir)\nconst isWindows = platform() === 'win32'\nconst delimiter = isWindows ? '\\\\' : '/'\n\nmodule.exports = {\n  trueCasePath: _trueCasePath({ sync: false }),\n  trueCasePathSync: _trueCasePath({ sync: true })\n}\n\nfunction getRelevantFilePathSegments(filePath) {\n  return filePath.split(delimiter).filter((s) => s !== '')\n}\n\nfunction escapeString(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n}\n\nfunction matchCaseInsensitive(fileOrDirectory, directoryContents, filePath) {\n  const caseInsensitiveRegex = new RegExp(\n    `^${escapeString(fileOrDirectory)}$`,\n    'i'\n  )\n  for (const file of directoryContents) {\n    if (caseInsensitiveRegex.test(file)) return file\n  }\n  throw new Error(\n    `[true-case-path]: Called with ${filePath}, but no matching file exists`\n  )\n}\n\nfunction _trueCasePath({ sync }) {\n  return (filePath, basePath) => {\n    if (basePath) {\n      if (!isAbsolute(basePath)) {\n        throw new Error(\n          `[true-case-path]: basePath argument must be absolute. Received \"${basePath}\"`\n        )\n      }\n      basePath = normalize(basePath)\n    }\n    filePath = normalize(filePath)\n    const segments = getRelevantFilePathSegments(filePath)\n    if (isAbsolute(filePath)) {\n      if (basePath) {\n        throw new Error(\n          '[true-case-path]: filePath must be relative when used with basePath'\n        )\n      }\n      basePath = isWindows\n        ? segments.shift().toUpperCase() // drive letter\n        : ''\n    } else if (!basePath) {\n      basePath = process.cwd()\n    }\n    return sync\n      ? iterateSync(basePath, filePath, segments)\n      : iterateAsync(basePath, filePath, segments)\n  }\n}\n\nfunction iterateSync(basePath, filePath, segments) {\n  return segments.reduce(\n    (realPath, fileOrDirectory) =>\n      realPath +\n      delimiter +\n      matchCaseInsensitive(\n        fileOrDirectory,\n        readdirSync(realPath + delimiter),\n        filePath\n      ),\n    basePath\n  )\n}\n\nasync function iterateAsync(basePath, filePath, segments) {\n  return await segments.reduce(\n    async (realPathPromise, fileOrDirectory) =>\n      (await realPathPromise) +\n      delimiter +\n      matchCaseInsensitive(\n        fileOrDirectory,\n        await readdir((await realPathPromise) + delimiter),\n        filePath\n      ),\n    basePath\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}