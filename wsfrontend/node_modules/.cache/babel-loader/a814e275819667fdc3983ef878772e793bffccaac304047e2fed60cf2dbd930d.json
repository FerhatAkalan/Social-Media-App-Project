{"ast":null,"code":"/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n *\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  var currentIsArray = Array.isArray(current);\n  var nextIsArray = Array.isArray(next);\n  if (currentIsArray && nextIsArray) {\n    current.push.apply(current, next);\n    return current;\n  }\n  if (currentIsArray) {\n    current.push(next);\n    return current;\n  }\n  if (nextIsArray) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n  return [current, next];\n}\nmodule.exports = accumulateInto;","map":{"version":3,"names":["invariant","require","accumulateInto","current","next","process","env","NODE_ENV","undefined","currentIsArray","Array","isArray","nextIsArray","push","apply","concat","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/accumulateInto.js"],"sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n *\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  var currentIsArray = Array.isArray(current);\n  var nextIsArray = Array.isArray(next);\n\n  if (currentIsArray && nextIsArray) {\n    current.push.apply(current, next);\n    return current;\n  }\n\n  if (currentIsArray) {\n    current.push(next);\n    return current;\n  }\n\n  if (nextIsArray) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nmodule.exports = accumulateInto;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAoB,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,cAAcA,CAACC,OAAO,EAAEC,IAAI,EAAE;EACrC,EAAEA,IAAI,IAAI,IAAI,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGP,SAAS,CAAC,KAAK,EAAE,uEAAuE,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAGQ,SAAS;EAClL,IAAIL,OAAO,IAAI,IAAI,EAAE;IACnB,OAAOC,IAAI;EACb;;EAEA;EACA;EACA,IAAIK,cAAc,GAAGC,KAAK,CAACC,OAAO,CAACR,OAAO,CAAC;EAC3C,IAAIS,WAAW,GAAGF,KAAK,CAACC,OAAO,CAACP,IAAI,CAAC;EAErC,IAAIK,cAAc,IAAIG,WAAW,EAAE;IACjCT,OAAO,CAACU,IAAI,CAACC,KAAK,CAACX,OAAO,EAAEC,IAAI,CAAC;IACjC,OAAOD,OAAO;EAChB;EAEA,IAAIM,cAAc,EAAE;IAClBN,OAAO,CAACU,IAAI,CAACT,IAAI,CAAC;IAClB,OAAOD,OAAO;EAChB;EAEA,IAAIS,WAAW,EAAE;IACf;IACA,OAAO,CAACT,OAAO,CAAC,CAACY,MAAM,CAACX,IAAI,CAAC;EAC/B;EAEA,OAAO,CAACD,OAAO,EAAEC,IAAI,CAAC;AACxB;AAEAY,MAAM,CAACC,OAAO,GAAGf,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}