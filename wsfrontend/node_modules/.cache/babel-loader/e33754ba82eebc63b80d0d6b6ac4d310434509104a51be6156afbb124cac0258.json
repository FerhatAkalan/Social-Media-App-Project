{"ast":null,"code":"import { AbstractTokenizer } from './AbstractTokenizer.js';\nimport { EndOfStreamError, StreamReader } from 'peek-readable';\nconst maxBufferSize = 256000;\nexport class ReadStreamTokenizer extends AbstractTokenizer {\n  constructor(stream, fileInfo) {\n    super(fileInfo);\n    this.streamReader = new StreamReader(stream);\n  }\n  /**\n   * Get file information, an HTTP-client may implement this doing a HEAD request\n   * @return Promise with file information\n   */\n  async getFileInfo() {\n    return this.fileInfo;\n  }\n  /**\n   * Read buffer from tokenizer\n   * @param uint8Array - Target Uint8Array to fill with data read from the tokenizer-stream\n   * @param options - Read behaviour options\n   * @returns Promise with number of bytes read\n   */\n  async readBuffer(uint8Array, options) {\n    const normOptions = this.normalizeOptions(uint8Array, options);\n    const skipBytes = normOptions.position - this.position;\n    if (skipBytes > 0) {\n      await this.ignore(skipBytes);\n      return this.readBuffer(uint8Array, options);\n    } else if (skipBytes < 0) {\n      throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\n    }\n    if (normOptions.length === 0) {\n      return 0;\n    }\n    const bytesRead = await this.streamReader.read(uint8Array, normOptions.offset, normOptions.length);\n    this.position += bytesRead;\n    if ((!options || !options.mayBeLess) && bytesRead < normOptions.length) {\n      throw new EndOfStreamError();\n    }\n    return bytesRead;\n  }\n  /**\n   * Peek (read ahead) buffer from tokenizer\n   * @param uint8Array - Uint8Array (or Buffer) to write data to\n   * @param options - Read behaviour options\n   * @returns Promise with number of bytes peeked\n   */\n  async peekBuffer(uint8Array, options) {\n    const normOptions = this.normalizeOptions(uint8Array, options);\n    let bytesRead = 0;\n    if (normOptions.position) {\n      const skipBytes = normOptions.position - this.position;\n      if (skipBytes > 0) {\n        const skipBuffer = new Uint8Array(normOptions.length + skipBytes);\n        bytesRead = await this.peekBuffer(skipBuffer, {\n          mayBeLess: normOptions.mayBeLess\n        });\n        uint8Array.set(skipBuffer.subarray(skipBytes), normOptions.offset);\n        return bytesRead - skipBytes;\n      } else if (skipBytes < 0) {\n        throw new Error('Cannot peek from a negative offset in a stream');\n      }\n    }\n    if (normOptions.length > 0) {\n      try {\n        bytesRead = await this.streamReader.peek(uint8Array, normOptions.offset, normOptions.length);\n      } catch (err) {\n        if (options && options.mayBeLess && err instanceof EndOfStreamError) {\n          return 0;\n        }\n        throw err;\n      }\n      if (!normOptions.mayBeLess && bytesRead < normOptions.length) {\n        throw new EndOfStreamError();\n      }\n    }\n    return bytesRead;\n  }\n  async ignore(length) {\n    // debug(`ignore ${this.position}...${this.position + length - 1}`);\n    const bufSize = Math.min(maxBufferSize, length);\n    const buf = new Uint8Array(bufSize);\n    let totBytesRead = 0;\n    while (totBytesRead < length) {\n      const remaining = length - totBytesRead;\n      const bytesRead = await this.readBuffer(buf, {\n        length: Math.min(bufSize, remaining)\n      });\n      if (bytesRead < 0) {\n        return bytesRead;\n      }\n      totBytesRead += bytesRead;\n    }\n    return totBytesRead;\n  }\n}","map":{"version":3,"names":["AbstractTokenizer","EndOfStreamError","StreamReader","maxBufferSize","ReadStreamTokenizer","constructor","stream","fileInfo","streamReader","getFileInfo","readBuffer","uint8Array","options","normOptions","normalizeOptions","skipBytes","position","ignore","Error","length","bytesRead","read","offset","mayBeLess","peekBuffer","skipBuffer","Uint8Array","set","subarray","peek","err","bufSize","Math","min","buf","totBytesRead","remaining"],"sources":["C:/Users/Ferhat/Social-Media-App-Project/wsfrontend/node_modules/strtok3/lib/ReadStreamTokenizer.js"],"sourcesContent":["import { AbstractTokenizer } from './AbstractTokenizer.js';\nimport { EndOfStreamError, StreamReader } from 'peek-readable';\nconst maxBufferSize = 256000;\nexport class ReadStreamTokenizer extends AbstractTokenizer {\n    constructor(stream, fileInfo) {\n        super(fileInfo);\n        this.streamReader = new StreamReader(stream);\n    }\n    /**\n     * Get file information, an HTTP-client may implement this doing a HEAD request\n     * @return Promise with file information\n     */\n    async getFileInfo() {\n        return this.fileInfo;\n    }\n    /**\n     * Read buffer from tokenizer\n     * @param uint8Array - Target Uint8Array to fill with data read from the tokenizer-stream\n     * @param options - Read behaviour options\n     * @returns Promise with number of bytes read\n     */\n    async readBuffer(uint8Array, options) {\n        const normOptions = this.normalizeOptions(uint8Array, options);\n        const skipBytes = normOptions.position - this.position;\n        if (skipBytes > 0) {\n            await this.ignore(skipBytes);\n            return this.readBuffer(uint8Array, options);\n        }\n        else if (skipBytes < 0) {\n            throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\n        }\n        if (normOptions.length === 0) {\n            return 0;\n        }\n        const bytesRead = await this.streamReader.read(uint8Array, normOptions.offset, normOptions.length);\n        this.position += bytesRead;\n        if ((!options || !options.mayBeLess) && bytesRead < normOptions.length) {\n            throw new EndOfStreamError();\n        }\n        return bytesRead;\n    }\n    /**\n     * Peek (read ahead) buffer from tokenizer\n     * @param uint8Array - Uint8Array (or Buffer) to write data to\n     * @param options - Read behaviour options\n     * @returns Promise with number of bytes peeked\n     */\n    async peekBuffer(uint8Array, options) {\n        const normOptions = this.normalizeOptions(uint8Array, options);\n        let bytesRead = 0;\n        if (normOptions.position) {\n            const skipBytes = normOptions.position - this.position;\n            if (skipBytes > 0) {\n                const skipBuffer = new Uint8Array(normOptions.length + skipBytes);\n                bytesRead = await this.peekBuffer(skipBuffer, { mayBeLess: normOptions.mayBeLess });\n                uint8Array.set(skipBuffer.subarray(skipBytes), normOptions.offset);\n                return bytesRead - skipBytes;\n            }\n            else if (skipBytes < 0) {\n                throw new Error('Cannot peek from a negative offset in a stream');\n            }\n        }\n        if (normOptions.length > 0) {\n            try {\n                bytesRead = await this.streamReader.peek(uint8Array, normOptions.offset, normOptions.length);\n            }\n            catch (err) {\n                if (options && options.mayBeLess && err instanceof EndOfStreamError) {\n                    return 0;\n                }\n                throw err;\n            }\n            if ((!normOptions.mayBeLess) && bytesRead < normOptions.length) {\n                throw new EndOfStreamError();\n            }\n        }\n        return bytesRead;\n    }\n    async ignore(length) {\n        // debug(`ignore ${this.position}...${this.position + length - 1}`);\n        const bufSize = Math.min(maxBufferSize, length);\n        const buf = new Uint8Array(bufSize);\n        let totBytesRead = 0;\n        while (totBytesRead < length) {\n            const remaining = length - totBytesRead;\n            const bytesRead = await this.readBuffer(buf, { length: Math.min(bufSize, remaining) });\n            if (bytesRead < 0) {\n                return bytesRead;\n            }\n            totBytesRead += bytesRead;\n        }\n        return totBytesRead;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}