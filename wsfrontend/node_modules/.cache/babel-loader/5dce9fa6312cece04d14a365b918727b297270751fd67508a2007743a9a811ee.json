{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ferhat\\\\Social-Media-App-Project\\\\wsfrontend\\\\src\\\\components\\\\LikedPostFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { getLikedPosts } from \"../api/apiCalls\";\nimport PostView from \"./PostView\";\nimport Spinner from \"../components/Spinner\";\nimport { useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LikedPostFeed = () => {\n  _s();\n  const [postPage, setPostPage] = useState({\n    content: [],\n    last: true,\n    number: 0,\n    pageable: {} // pageable alanını da ekledik\n  });\n\n  const {\n    username\n  } = useParams();\n  const {\n    t\n  } = useTranslation();\n  useEffect(() => {\n    const loadLikedPosts = async page => {\n      try {\n        const response = await getLikedPosts(username, page);\n        console.log(\"API Response:\", response); // API yanıtını kontrol et\n        setPostPage(previousPostPage => ({\n          ...response,\n          // response içeriğini doğrudan postPage'e atıyoruz\n          content: [...previousPostPage.content, ...response.content]\n        }));\n      } catch (error) {\n        console.error(\"Error loading liked posts:\", error);\n      }\n    };\n    loadLikedPosts();\n  }, [username]);\n  const {\n    content\n  } = postPage;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: content.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-\",\n      children: /*#__PURE__*/_jsxDEV(PostView, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(LikedPostFeed, \"KXl0NB6yFFo7tWM/2Dbkm/Q4og4=\", false, function () {\n  return [useParams, useTranslation];\n});\n_c = LikedPostFeed;\nexport default LikedPostFeed;\nvar _c;\n$RefreshReg$(_c, \"LikedPostFeed\");","map":{"version":3,"names":["React","useEffect","useState","getLikedPosts","PostView","Spinner","useParams","useTranslation","jsxDEV","_jsxDEV","LikedPostFeed","_s","postPage","setPostPage","content","last","number","pageable","username","t","loadLikedPosts","page","response","console","log","previousPostPage","error","children","map","post","className","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["C:/Users/Ferhat/Social-Media-App-Project/wsfrontend/src/components/LikedPostFeed.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { getLikedPosts } from \"../api/apiCalls\";\r\nimport PostView from \"./PostView\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst LikedPostFeed = () => {\r\n  const [postPage, setPostPage] = useState({\r\n    content: [],\r\n    last: true,\r\n    number: 0,\r\n    pageable: {}, // pageable alanını da ekledik\r\n  });\r\n  const { username } = useParams();\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    const loadLikedPosts = async (page) => {\r\n      try {\r\n        const response = await getLikedPosts(username, page);\r\n        console.log(\"API Response:\", response); // API yanıtını kontrol et\r\n        setPostPage((previousPostPage) => ({\r\n          ...response, // response içeriğini doğrudan postPage'e atıyoruz\r\n          content: [...previousPostPage.content, ...response.content],\r\n        }));\r\n      } catch (error) {\r\n        console.error(\"Error loading liked posts:\", error);\r\n      }\r\n    };\r\n    loadLikedPosts();\r\n  }, [username]);\r\n\r\n  const { content } = postPage;\r\n\r\n  return (\r\n    <div>\r\n      {content.map((post) => (\r\n        <div key={post.id} className=\"mb-\">\r\n          <PostView post={post}></PostView>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LikedPostFeed;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,cAAc,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC;IACvCY,OAAO,EAAE,EAAE;IACXC,IAAI,EAAE,IAAI;IACVC,MAAM,EAAE,CAAC;IACTC,QAAQ,EAAE,CAAC,CAAC,CAAE;EAChB,CAAC,CAAC;;EACF,MAAM;IAAEC;EAAS,CAAC,GAAGZ,SAAS,CAAC,CAAC;EAChC,MAAM;IAAEa;EAAE,CAAC,GAAGZ,cAAc,CAAC,CAAC;EAE9BN,SAAS,CAAC,MAAM;IACd,MAAMmB,cAAc,GAAG,MAAOC,IAAI,IAAK;MACrC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMnB,aAAa,CAACe,QAAQ,EAAEG,IAAI,CAAC;QACpDE,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,QAAQ,CAAC,CAAC,CAAC;QACxCT,WAAW,CAAEY,gBAAgB,KAAM;UACjC,GAAGH,QAAQ;UAAE;UACbR,OAAO,EAAE,CAAC,GAAGW,gBAAgB,CAACX,OAAO,EAAE,GAAGQ,QAAQ,CAACR,OAAO;QAC5D,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IACDN,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC;EAEd,MAAM;IAAEJ;EAAQ,CAAC,GAAGF,QAAQ;EAE5B,oBACEH,OAAA;IAAAkB,QAAA,EACGb,OAAO,CAACc,GAAG,CAAEC,IAAI,iBAChBpB,OAAA;MAAmBqB,SAAS,EAAC,KAAK;MAAAH,QAAA,eAChClB,OAAA,CAACL,QAAQ;QAACyB,IAAI,EAAEA;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW;IAAC,GADzBL,IAAI,CAACM,EAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEZ,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACvB,EAAA,CArCID,aAAa;EAAA,QAOIJ,SAAS,EAChBC,cAAc;AAAA;AAAA6B,EAAA,GARxB1B,aAAa;AAuCnB,eAAeA,aAAa;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}