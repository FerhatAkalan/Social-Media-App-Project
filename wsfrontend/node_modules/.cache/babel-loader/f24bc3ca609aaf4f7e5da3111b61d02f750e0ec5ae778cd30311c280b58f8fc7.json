{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule adler32\n */\n\n'use strict';\n\nvar MOD = 65521;\n\n// adler32 is not cryptographically strong, and is only used to sanity check that\n// markup generated on the server matches the markup generated on the client.\n// This implementation (a modified version of the SheetJS version) has been optimized\n// for our use case, at the expense of conforming to the adler32 specification\n// for non-ascii inputs.\nfunction adler32(data) {\n  var a = 1;\n  var b = 0;\n  var i = 0;\n  var l = data.length;\n  var m = l & ~0x3;\n  while (i < m) {\n    for (; i < Math.min(i + 4096, m); i += 4) {\n      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));\n    }\n    a %= MOD;\n    b %= MOD;\n  }\n  for (; i < l; i++) {\n    b += a += data.charCodeAt(i);\n  }\n  a %= MOD;\n  b %= MOD;\n  return a | b << 16;\n}\nmodule.exports = adler32;","map":{"version":3,"names":["MOD","adler32","data","a","b","i","l","length","m","Math","min","charCodeAt","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/adler32.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule adler32\n */\n\n'use strict';\n\nvar MOD = 65521;\n\n// adler32 is not cryptographically strong, and is only used to sanity check that\n// markup generated on the server matches the markup generated on the client.\n// This implementation (a modified version of the SheetJS version) has been optimized\n// for our use case, at the expense of conforming to the adler32 specification\n// for non-ascii inputs.\nfunction adler32(data) {\n  var a = 1;\n  var b = 0;\n  var i = 0;\n  var l = data.length;\n  var m = l & ~0x3;\n  while (i < m) {\n    for (; i < Math.min(i + 4096, m); i += 4) {\n      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));\n    }\n    a %= MOD;\n    b %= MOD;\n  }\n  for (; i < l; i++) {\n    b += a += data.charCodeAt(i);\n  }\n  a %= MOD;\n  b %= MOD;\n  return a | b << 16;\n}\n\nmodule.exports = adler32;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,GAAG,GAAG,KAAK;;AAEf;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,IAAI,EAAE;EACrB,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAGJ,IAAI,CAACK,MAAM;EACnB,IAAIC,CAAC,GAAGF,CAAC,GAAG,CAAC,GAAG;EAChB,OAAOD,CAAC,GAAGG,CAAC,EAAE;IACZ,OAAOH,CAAC,GAAGI,IAAI,CAACC,GAAG,CAACL,CAAC,GAAG,IAAI,EAAEG,CAAC,CAAC,EAAEH,CAAC,IAAI,CAAC,EAAE;MACxCD,CAAC,IAAI,CAACD,CAAC,IAAID,IAAI,CAACS,UAAU,CAACN,CAAC,CAAC,KAAKF,CAAC,IAAID,IAAI,CAACS,UAAU,CAACN,CAAC,GAAG,CAAC,CAAC,CAAC,IAAIF,CAAC,IAAID,IAAI,CAACS,UAAU,CAACN,CAAC,GAAG,CAAC,CAAC,CAAC,IAAIF,CAAC,IAAID,IAAI,CAACS,UAAU,CAACN,CAAC,GAAG,CAAC,CAAC,CAAC;IAChI;IACAF,CAAC,IAAIH,GAAG;IACRI,CAAC,IAAIJ,GAAG;EACV;EACA,OAAOK,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IACjBD,CAAC,IAAID,CAAC,IAAID,IAAI,CAACS,UAAU,CAACN,CAAC,CAAC;EAC9B;EACAF,CAAC,IAAIH,GAAG;EACRI,CAAC,IAAIJ,GAAG;EACR,OAAOG,CAAC,GAAGC,CAAC,IAAI,EAAE;AACpB;AAEAQ,MAAM,CAACC,OAAO,GAAGZ,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}