{"ast":null,"code":"import * as ACTIONS from \"./Constants\";\nimport { login, signup, logout, likePostApi, unlikePostApi } from \"../api/apiCalls\";\nexport const logoutSucces = () => {\n  return async function (dispatch) {\n    try {\n      await logout();\n    } catch (error) {}\n    dispatch({\n      type: ACTIONS.LOGOUT_SUCCES\n    });\n  };\n};\nexport const loginSuccess = authState => {\n  return {\n    type: ACTIONS.LOGIN_SUCCES,\n    payload: authState\n  };\n};\nexport const updateSuccess = _ref => {\n  let {\n    displayName,\n    image\n  } = _ref;\n  return {\n    type: ACTIONS.UPDATE_SUCCESS,\n    payload: {\n      displayName,\n      image\n    }\n  };\n};\nexport const updateAdminStatus = admin => ({\n  type: ACTIONS.UPDATE_ADMIN_STATUS,\n  payload: {\n    admin\n  }\n});\nexport const loginHandler = credentials => {\n  return async function (dispatch) {\n    const response = await login(credentials);\n    const authState = {\n      ...response.data.user,\n      password: credentials.password,\n      token: response.data.token\n    };\n    dispatch(loginSuccess(authState));\n    dispatch(updateAdminStatus(response.data.user.admin));\n    return response;\n  };\n};\nexport const signupHandler = user => {\n  return async function (dispatch) {\n    const response = await signup(user);\n    await dispatch(loginHandler(user));\n    return response;\n  };\n};\nexport const likePost = (postId, loggedInUsername) => {\n  return async (dispatch, getState) => {\n    try {\n      await likePostApi(postId, loggedInUsername);\n      dispatch({\n        type: ACTIONS.LIKE_POST,\n        payload: postId\n      });\n      const state = getState();\n      const isPostAlreadyLiked = state.auth.likedPosts[postId] === true;\n      if (!isPostAlreadyLiked) {\n        dispatch(addLikedPost(postId)); // Beğenilen postu eklemek için yeni bir eylem\n      }\n    } catch (error) {\n      console.error('Error liking post:', error);\n    }\n  };\n};\nexport const unlikePost = (postId, loggedInUsername) => {\n  return async (dispatch, getState) => {\n    try {\n      await unlikePostApi(postId, loggedInUsername);\n      dispatch({\n        type: ACTIONS.UNLIKE_POST,\n        payload: postId\n      });\n      const state = getState();\n      const isPostStillLiked = state.auth.likedPosts[postId] === true;\n      if (isPostStillLiked) {\n        dispatch(removeLikedPost(postId)); // Beğenilen postu kaldırmak için yeni bir eylem\n      }\n    } catch (error) {\n      console.error('Error unliking post:', error);\n    }\n  };\n};","map":{"version":3,"names":["ACTIONS","login","signup","logout","likePostApi","unlikePostApi","logoutSucces","dispatch","error","type","LOGOUT_SUCCES","loginSuccess","authState","LOGIN_SUCCES","payload","updateSuccess","_ref","displayName","image","UPDATE_SUCCESS","updateAdminStatus","admin","UPDATE_ADMIN_STATUS","loginHandler","credentials","response","data","user","password","token","signupHandler","likePost","postId","loggedInUsername","getState","LIKE_POST","state","isPostAlreadyLiked","auth","likedPosts","addLikedPost","console","unlikePost","UNLIKE_POST","isPostStillLiked","removeLikedPost"],"sources":["C:/Users/Ferhat/Social-Media-App-Project/wsfrontend/src/redux/authActions.js"],"sourcesContent":["import * as ACTIONS from \"./Constants\";\r\nimport { login, signup, logout,likePostApi,unlikePostApi } from \"../api/apiCalls\";\r\n\r\nexport const logoutSucces = () => {\r\n  return async function (dispatch) {\r\n    try {\r\n      await logout();\r\n    } catch (error) {}\r\n    dispatch({\r\n      type: ACTIONS.LOGOUT_SUCCES,\r\n    });\r\n  };\r\n};\r\n\r\nexport const loginSuccess = (authState) => {\r\n  return {\r\n    type: ACTIONS.LOGIN_SUCCES,\r\n    payload: authState,\r\n  };\r\n};\r\n\r\nexport const updateSuccess = ({ displayName, image }) => {\r\n  return {\r\n    type: ACTIONS.UPDATE_SUCCESS,\r\n    payload: {\r\n      displayName,\r\n      image,\r\n    },\r\n  };\r\n};\r\n\r\nexport const updateAdminStatus = (admin) => ({\r\n  type: ACTIONS.UPDATE_ADMIN_STATUS,\r\n  payload: { admin },\r\n});\r\n\r\nexport const loginHandler = (credentials) => {\r\n  return async function (dispatch) {\r\n    const response = await login(credentials);\r\n    const authState = {\r\n      ...response.data.user,\r\n      password: credentials.password,\r\n      token: response.data.token,\r\n    };\r\n    dispatch(loginSuccess(authState));\r\n    dispatch(updateAdminStatus(response.data.user.admin));\r\n    return response;\r\n  };\r\n};\r\n\r\nexport const signupHandler = (user) => {\r\n  return async function (dispatch) {\r\n    const response = await signup(user);\r\n    await dispatch(loginHandler(user));\r\n    return response;\r\n  };\r\n};\r\nexport const likePost = (postId, loggedInUsername) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      await likePostApi(postId, loggedInUsername);\r\n      dispatch({ type: ACTIONS.LIKE_POST, payload: postId });\r\n      \r\n      const state = getState();\r\n      const isPostAlreadyLiked = state.auth.likedPosts[postId] === true;\r\n      if (!isPostAlreadyLiked) {\r\n        dispatch(addLikedPost(postId)); // Beğenilen postu eklemek için yeni bir eylem\r\n      }\r\n    } catch (error) {\r\n      console.error('Error liking post:', error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const unlikePost = (postId, loggedInUsername) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      await unlikePostApi(postId, loggedInUsername);\r\n      dispatch({ type: ACTIONS.UNLIKE_POST, payload: postId });\r\n      \r\n      const state = getState();\r\n      const isPostStillLiked = state.auth.likedPosts[postId] === true;\r\n      if (isPostStillLiked) {\r\n        dispatch(removeLikedPost(postId)); // Beğenilen postu kaldırmak için yeni bir eylem\r\n      }\r\n    } catch (error) {\r\n      console.error('Error unliking post:', error);\r\n    }\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}