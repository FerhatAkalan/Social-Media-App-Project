{"ast":null,"code":"/**\n * Copyright 2013-2015 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar FallbackCompositionState = require('./FallbackCompositionState');\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\nvar keyOf = require('fbjs/lib/keyOf');\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onBeforeInput: null\n      }),\n      captured: keyOf({\n        onBeforeInputCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionEnd: null\n      }),\n      captured: keyOf({\n        onCompositionEndCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionStart: null\n      }),\n      captured: keyOf({\n        onCompositionStartCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionUpdate: null\n      }),\n      captured: keyOf({\n        onCompositionUpdateCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n  if (!eventType) {\n    return null;\n  }\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionEnd:\n      return getDataFromCustomEvent(nativeEvent);\n    case topLevelTypes.topKeyPress:\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n    case topLevelTypes.topTextInput:\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n      return chars;\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  if (currentComposition) {\n    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n  switch (topLevelType) {\n    case topLevelTypes.topPaste:\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case topLevelTypes.topKeyPress:\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case topLevelTypes.topCompositionEnd:\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var chars;\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n  eventTypes: eventTypes,\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];\n  }\n};\nmodule.exports = BeforeInputEventPlugin;","map":{"version":3,"names":["EventConstants","require","EventPropagators","ExecutionEnvironment","FallbackCompositionState","SyntheticCompositionEvent","SyntheticInputEvent","keyOf","END_KEYCODES","START_KEYCODE","canUseCompositionEvent","canUseDOM","window","documentMode","document","canUseTextInputEvent","isPresto","useFallbackCompositionData","opera","version","parseInt","SPACEBAR_CODE","SPACEBAR_CHAR","String","fromCharCode","topLevelTypes","eventTypes","beforeInput","phasedRegistrationNames","bubbled","onBeforeInput","captured","onBeforeInputCapture","dependencies","topCompositionEnd","topKeyPress","topTextInput","topPaste","compositionEnd","onCompositionEnd","onCompositionEndCapture","topBlur","topKeyDown","topKeyUp","topMouseDown","compositionStart","onCompositionStart","onCompositionStartCapture","topCompositionStart","compositionUpdate","onCompositionUpdate","onCompositionUpdateCapture","topCompositionUpdate","hasSpaceKeypress","isKeypressCommand","nativeEvent","ctrlKey","altKey","metaKey","getCompositionEventType","topLevelType","isFallbackCompositionStart","keyCode","isFallbackCompositionEnd","indexOf","getDataFromCustomEvent","detail","data","currentComposition","extractCompositionEvent","topLevelTarget","topLevelTargetID","nativeEventTarget","eventType","fallbackData","getPooled","getData","event","customData","accumulateTwoPhaseDispatches","getNativeBeforeInputChars","which","chars","getFallbackBeforeInputChars","release","extractBeforeInputEvent","BeforeInputEventPlugin","extractEvents","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/BeforeInputEventPlugin.js"],"sourcesContent":["/**\n * Copyright 2013-2015 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar FallbackCompositionState = require('./FallbackCompositionState');\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onBeforeInput: null }),\n      captured: keyOf({ onBeforeInputCapture: null })\n    },\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionEnd: null }),\n      captured: keyOf({ onCompositionEndCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionStart: null }),\n      captured: keyOf({ onCompositionStartCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionUpdate: null }),\n      captured: keyOf({ onCompositionUpdateCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionEnd:\n      return getDataFromCustomEvent(nativeEvent);\n    case topLevelTypes.topKeyPress:\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case topLevelTypes.topTextInput:\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  if (currentComposition) {\n    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case topLevelTypes.topPaste:\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case topLevelTypes.topKeyPress:\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case topLevelTypes.topCompositionEnd:\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAChD,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AACpD,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,+BAA+B,CAAC;AACnE,IAAIG,wBAAwB,GAAGH,OAAO,CAAC,4BAA4B,CAAC;AACpE,IAAII,yBAAyB,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;AACtE,IAAIK,mBAAmB,GAAGL,OAAO,CAAC,uBAAuB,CAAC;AAE1D,IAAIM,KAAK,GAAGN,OAAO,CAAC,gBAAgB,CAAC;AAErC,IAAIO,YAAY,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;AACpC,IAAIC,aAAa,GAAG,GAAG;AAEvB,IAAIC,sBAAsB,GAAGP,oBAAoB,CAACQ,SAAS,IAAI,kBAAkB,IAAIC,MAAM;AAE3F,IAAIC,YAAY,GAAG,IAAI;AACvB,IAAIV,oBAAoB,CAACQ,SAAS,IAAI,cAAc,IAAIG,QAAQ,EAAE;EAChED,YAAY,GAAGC,QAAQ,CAACD,YAAY;AACtC;;AAEA;AACA;AACA;AACA,IAAIE,oBAAoB,GAAGZ,oBAAoB,CAACQ,SAAS,IAAI,WAAW,IAAIC,MAAM,IAAI,CAACC,YAAY,IAAI,CAACG,QAAQ,CAAC,CAAC;;AAElH;AACA;AACA;AACA,IAAIC,0BAA0B,GAAGd,oBAAoB,CAACQ,SAAS,KAAK,CAACD,sBAAsB,IAAIG,YAAY,IAAIA,YAAY,GAAG,CAAC,IAAIA,YAAY,IAAI,EAAE,CAAC;;AAEtJ;AACA;AACA;AACA;AACA,SAASG,QAAQA,CAAA,EAAG;EAClB,IAAIE,KAAK,GAAGN,MAAM,CAACM,KAAK;EACxB,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,CAACC,OAAO,KAAK,UAAU,IAAIC,QAAQ,CAACF,KAAK,CAACC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE;AAChH;AAEA,IAAIE,aAAa,GAAG,EAAE;AACtB,IAAIC,aAAa,GAAGC,MAAM,CAACC,YAAY,CAACH,aAAa,CAAC;AAEtD,IAAII,aAAa,GAAGzB,cAAc,CAACyB,aAAa;;AAEhD;AACA,IAAIC,UAAU,GAAG;EACfC,WAAW,EAAE;IACXC,uBAAuB,EAAE;MACvBC,OAAO,EAAEtB,KAAK,CAAC;QAAEuB,aAAa,EAAE;MAAK,CAAC,CAAC;MACvCC,QAAQ,EAAExB,KAAK,CAAC;QAAEyB,oBAAoB,EAAE;MAAK,CAAC;IAChD,CAAC;IACDC,YAAY,EAAE,CAACR,aAAa,CAACS,iBAAiB,EAAET,aAAa,CAACU,WAAW,EAAEV,aAAa,CAACW,YAAY,EAAEX,aAAa,CAACY,QAAQ;EAC/H,CAAC;EACDC,cAAc,EAAE;IACdV,uBAAuB,EAAE;MACvBC,OAAO,EAAEtB,KAAK,CAAC;QAAEgC,gBAAgB,EAAE;MAAK,CAAC,CAAC;MAC1CR,QAAQ,EAAExB,KAAK,CAAC;QAAEiC,uBAAuB,EAAE;MAAK,CAAC;IACnD,CAAC;IACDP,YAAY,EAAE,CAACR,aAAa,CAACgB,OAAO,EAAEhB,aAAa,CAACS,iBAAiB,EAAET,aAAa,CAACiB,UAAU,EAAEjB,aAAa,CAACU,WAAW,EAAEV,aAAa,CAACkB,QAAQ,EAAElB,aAAa,CAACmB,YAAY;EAChL,CAAC;EACDC,gBAAgB,EAAE;IAChBjB,uBAAuB,EAAE;MACvBC,OAAO,EAAEtB,KAAK,CAAC;QAAEuC,kBAAkB,EAAE;MAAK,CAAC,CAAC;MAC5Cf,QAAQ,EAAExB,KAAK,CAAC;QAAEwC,yBAAyB,EAAE;MAAK,CAAC;IACrD,CAAC;IACDd,YAAY,EAAE,CAACR,aAAa,CAACgB,OAAO,EAAEhB,aAAa,CAACuB,mBAAmB,EAAEvB,aAAa,CAACiB,UAAU,EAAEjB,aAAa,CAACU,WAAW,EAAEV,aAAa,CAACkB,QAAQ,EAAElB,aAAa,CAACmB,YAAY;EAClL,CAAC;EACDK,iBAAiB,EAAE;IACjBrB,uBAAuB,EAAE;MACvBC,OAAO,EAAEtB,KAAK,CAAC;QAAE2C,mBAAmB,EAAE;MAAK,CAAC,CAAC;MAC7CnB,QAAQ,EAAExB,KAAK,CAAC;QAAE4C,0BAA0B,EAAE;MAAK,CAAC;IACtD,CAAC;IACDlB,YAAY,EAAE,CAACR,aAAa,CAACgB,OAAO,EAAEhB,aAAa,CAAC2B,oBAAoB,EAAE3B,aAAa,CAACiB,UAAU,EAAEjB,aAAa,CAACU,WAAW,EAAEV,aAAa,CAACkB,QAAQ,EAAElB,aAAa,CAACmB,YAAY;EACnL;AACF,CAAC;;AAED;AACA,IAAIS,gBAAgB,GAAG,KAAK;;AAE5B;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,WAAW,EAAE;EACtC,OAAO,CAACA,WAAW,CAACC,OAAO,IAAID,WAAW,CAACE,MAAM,IAAIF,WAAW,CAACG,OAAO;EACxE;EACA,EAAEH,WAAW,CAACC,OAAO,IAAID,WAAW,CAACE,MAAM,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,uBAAuBA,CAACC,YAAY,EAAE;EAC7C,QAAQA,YAAY;IAClB,KAAKnC,aAAa,CAACuB,mBAAmB;MACpC,OAAOtB,UAAU,CAACmB,gBAAgB;IACpC,KAAKpB,aAAa,CAACS,iBAAiB;MAClC,OAAOR,UAAU,CAACY,cAAc;IAClC,KAAKb,aAAa,CAAC2B,oBAAoB;MACrC,OAAO1B,UAAU,CAACuB,iBAAiB;EACvC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASY,0BAA0BA,CAACD,YAAY,EAAEL,WAAW,EAAE;EAC7D,OAAOK,YAAY,KAAKnC,aAAa,CAACiB,UAAU,IAAIa,WAAW,CAACO,OAAO,KAAKrD,aAAa;AAC3F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsD,wBAAwBA,CAACH,YAAY,EAAEL,WAAW,EAAE;EAC3D,QAAQK,YAAY;IAClB,KAAKnC,aAAa,CAACkB,QAAQ;MACzB;MACA,OAAOnC,YAAY,CAACwD,OAAO,CAACT,WAAW,CAACO,OAAO,CAAC,KAAK,CAAC,CAAC;IACzD,KAAKrC,aAAa,CAACiB,UAAU;MAC3B;MACA;MACA,OAAOa,WAAW,CAACO,OAAO,KAAKrD,aAAa;IAC9C,KAAKgB,aAAa,CAACU,WAAW;IAC9B,KAAKV,aAAa,CAACmB,YAAY;IAC/B,KAAKnB,aAAa,CAACgB,OAAO;MACxB;MACA,OAAO,IAAI;IACb;MACE,OAAO,KAAK;EAChB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwB,sBAAsBA,CAACV,WAAW,EAAE;EAC3C,IAAIW,MAAM,GAAGX,WAAW,CAACW,MAAM;EAC/B,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAI,MAAM,IAAIA,MAAM,EAAE;IAClD,OAAOA,MAAM,CAACC,IAAI;EACpB;EACA,OAAO,IAAI;AACb;;AAEA;AACA,IAAIC,kBAAkB,GAAG,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAACT,YAAY,EAAEU,cAAc,EAAEC,gBAAgB,EAAEhB,WAAW,EAAEiB,iBAAiB,EAAE;EAC/G,IAAIC,SAAS;EACb,IAAIC,YAAY;EAEhB,IAAIhE,sBAAsB,EAAE;IAC1B+D,SAAS,GAAGd,uBAAuB,CAACC,YAAY,CAAC;EACnD,CAAC,MAAM,IAAI,CAACQ,kBAAkB,EAAE;IAC9B,IAAIP,0BAA0B,CAACD,YAAY,EAAEL,WAAW,CAAC,EAAE;MACzDkB,SAAS,GAAG/C,UAAU,CAACmB,gBAAgB;IACzC;EACF,CAAC,MAAM,IAAIkB,wBAAwB,CAACH,YAAY,EAAEL,WAAW,CAAC,EAAE;IAC9DkB,SAAS,GAAG/C,UAAU,CAACY,cAAc;EACvC;EAEA,IAAI,CAACmC,SAAS,EAAE;IACd,OAAO,IAAI;EACb;EAEA,IAAIxD,0BAA0B,EAAE;IAC9B;IACA;IACA,IAAI,CAACmD,kBAAkB,IAAIK,SAAS,KAAK/C,UAAU,CAACmB,gBAAgB,EAAE;MACpEuB,kBAAkB,GAAGhE,wBAAwB,CAACuE,SAAS,CAACL,cAAc,CAAC;IACzE,CAAC,MAAM,IAAIG,SAAS,KAAK/C,UAAU,CAACY,cAAc,EAAE;MAClD,IAAI8B,kBAAkB,EAAE;QACtBM,YAAY,GAAGN,kBAAkB,CAACQ,OAAO,CAAC,CAAC;MAC7C;IACF;EACF;EAEA,IAAIC,KAAK,GAAGxE,yBAAyB,CAACsE,SAAS,CAACF,SAAS,EAAEF,gBAAgB,EAAEhB,WAAW,EAAEiB,iBAAiB,CAAC;EAE5G,IAAIE,YAAY,EAAE;IAChB;IACA;IACAG,KAAK,CAACV,IAAI,GAAGO,YAAY;EAC3B,CAAC,MAAM;IACL,IAAII,UAAU,GAAGb,sBAAsB,CAACV,WAAW,CAAC;IACpD,IAAIuB,UAAU,KAAK,IAAI,EAAE;MACvBD,KAAK,CAACV,IAAI,GAAGW,UAAU;IACzB;EACF;EAEA5E,gBAAgB,CAAC6E,4BAA4B,CAACF,KAAK,CAAC;EACpD,OAAOA,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASG,yBAAyBA,CAACpB,YAAY,EAAEL,WAAW,EAAE;EAC5D,QAAQK,YAAY;IAClB,KAAKnC,aAAa,CAACS,iBAAiB;MAClC,OAAO+B,sBAAsB,CAACV,WAAW,CAAC;IAC5C,KAAK9B,aAAa,CAACU,WAAW;MAC5B;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,IAAI8C,KAAK,GAAG1B,WAAW,CAAC0B,KAAK;MAC7B,IAAIA,KAAK,KAAK5D,aAAa,EAAE;QAC3B,OAAO,IAAI;MACb;MAEAgC,gBAAgB,GAAG,IAAI;MACvB,OAAO/B,aAAa;IAEtB,KAAKG,aAAa,CAACW,YAAY;MAC7B;MACA,IAAI8C,KAAK,GAAG3B,WAAW,CAACY,IAAI;;MAE5B;MACA;MACA;MACA,IAAIe,KAAK,KAAK5D,aAAa,IAAI+B,gBAAgB,EAAE;QAC/C,OAAO,IAAI;MACb;MAEA,OAAO6B,KAAK;IAEd;MACE;MACA,OAAO,IAAI;EACf;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,2BAA2BA,CAACvB,YAAY,EAAEL,WAAW,EAAE;EAC9D;EACA;EACA,IAAIa,kBAAkB,EAAE;IACtB,IAAIR,YAAY,KAAKnC,aAAa,CAACS,iBAAiB,IAAI6B,wBAAwB,CAACH,YAAY,EAAEL,WAAW,CAAC,EAAE;MAC3G,IAAI2B,KAAK,GAAGd,kBAAkB,CAACQ,OAAO,CAAC,CAAC;MACxCxE,wBAAwB,CAACgF,OAAO,CAAChB,kBAAkB,CAAC;MACpDA,kBAAkB,GAAG,IAAI;MACzB,OAAOc,KAAK;IACd;IACA,OAAO,IAAI;EACb;EAEA,QAAQtB,YAAY;IAClB,KAAKnC,aAAa,CAACY,QAAQ;MACzB;MACA;MACA,OAAO,IAAI;IACb,KAAKZ,aAAa,CAACU,WAAW;MAC5B;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,IAAIoB,WAAW,CAAC0B,KAAK,IAAI,CAAC3B,iBAAiB,CAACC,WAAW,CAAC,EAAE;QACxD,OAAOhC,MAAM,CAACC,YAAY,CAAC+B,WAAW,CAAC0B,KAAK,CAAC;MAC/C;MACA,OAAO,IAAI;IACb,KAAKxD,aAAa,CAACS,iBAAiB;MAClC,OAAOjB,0BAA0B,GAAG,IAAI,GAAGsC,WAAW,CAACY,IAAI;IAC7D;MACE,OAAO,IAAI;EACf;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkB,uBAAuBA,CAACzB,YAAY,EAAEU,cAAc,EAAEC,gBAAgB,EAAEhB,WAAW,EAAEiB,iBAAiB,EAAE;EAC/G,IAAIU,KAAK;EAET,IAAInE,oBAAoB,EAAE;IACxBmE,KAAK,GAAGF,yBAAyB,CAACpB,YAAY,EAAEL,WAAW,CAAC;EAC9D,CAAC,MAAM;IACL2B,KAAK,GAAGC,2BAA2B,CAACvB,YAAY,EAAEL,WAAW,CAAC;EAChE;;EAEA;EACA;EACA,IAAI,CAAC2B,KAAK,EAAE;IACV,OAAO,IAAI;EACb;EAEA,IAAIL,KAAK,GAAGvE,mBAAmB,CAACqE,SAAS,CAACjD,UAAU,CAACC,WAAW,EAAE4C,gBAAgB,EAAEhB,WAAW,EAAEiB,iBAAiB,CAAC;EAEnHK,KAAK,CAACV,IAAI,GAAGe,KAAK;EAClBhF,gBAAgB,CAAC6E,4BAA4B,CAACF,KAAK,CAAC;EACpD,OAAOA,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIS,sBAAsB,GAAG;EAE3B5D,UAAU,EAAEA,UAAU;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE6D,aAAa,EAAE,SAAAA,CAAU3B,YAAY,EAAEU,cAAc,EAAEC,gBAAgB,EAAEhB,WAAW,EAAEiB,iBAAiB,EAAE;IACvG,OAAO,CAACH,uBAAuB,CAACT,YAAY,EAAEU,cAAc,EAAEC,gBAAgB,EAAEhB,WAAW,EAAEiB,iBAAiB,CAAC,EAAEa,uBAAuB,CAACzB,YAAY,EAAEU,cAAc,EAAEC,gBAAgB,EAAEhB,WAAW,EAAEiB,iBAAiB,CAAC,CAAC;EAC3N;AACF,CAAC;AAEDgB,MAAM,CAACC,OAAO,GAAGH,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}