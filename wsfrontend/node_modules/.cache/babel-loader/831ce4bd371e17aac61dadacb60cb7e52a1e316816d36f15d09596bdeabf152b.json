{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar Danger = require('./Danger');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\nvar ReactPerf = require('./ReactPerf');\nvar setInnerHTML = require('./setInnerHTML');\nvar setTextContent = require('./setTextContent');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n\n  // fix render order error in safari\n  // IE8 will throw error when index out of list size.\n  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);\n  parentNode.insertBefore(childNode, beforeChild);\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n  updateTextContent: setTextContent,\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function (updates, markupList) {\n    var update;\n    // Mapping from parent IDs to initial child orderings.\n    var initialChildren = null;\n    // List of children that will be moved or removed.\n    var updatedChildren = null;\n    for (var i = 0; i < updates.length; i++) {\n      update = updates[i];\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;\n        var updatedChild = update.parentNode.childNodes[updatedIndex];\n        var parentID = update.parentID;\n        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;\n        initialChildren = initialChildren || {};\n        initialChildren[parentID] = initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] = updatedChild;\n        updatedChildren = updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n    var renderedMarkup;\n    // markupList is either a list of markup or just a list of elements\n    if (markupList.length && typeof markupList[0] === 'string') {\n      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);\n    } else {\n      renderedMarkup = markupList;\n    }\n\n    // Remove updated children first so that `toIndex` is consistent.\n    if (updatedChildren) {\n      for (var j = 0; j < updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n    for (var k = 0; k < updates.length; k++) {\n      update = updates[k];\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.SET_MARKUP:\n          setInnerHTML(update.parentNode, update.content);\n          break;\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          setTextContent(update.parentNode, update.content);\n          break;\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n};\nReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {\n  updateTextContent: 'updateTextContent'\n});\nmodule.exports = DOMChildrenOperations;","map":{"version":3,"names":["Danger","require","ReactMultiChildUpdateTypes","ReactPerf","setInnerHTML","setTextContent","invariant","insertChildAt","parentNode","childNode","index","beforeChild","childNodes","length","item","insertBefore","DOMChildrenOperations","dangerouslyReplaceNodeWithMarkup","updateTextContent","processUpdates","updates","markupList","update","initialChildren","updatedChildren","i","type","MOVE_EXISTING","REMOVE_NODE","updatedIndex","fromIndex","updatedChild","parentID","process","env","NODE_ENV","undefined","push","renderedMarkup","dangerouslyRenderMarkup","j","removeChild","k","INSERT_MARKUP","markupIndex","toIndex","SET_MARKUP","content","TEXT_CONTENT","measureMethods","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/DOMChildrenOperations.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar Danger = require('./Danger');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\nvar ReactPerf = require('./ReactPerf');\n\nvar setInnerHTML = require('./setInnerHTML');\nvar setTextContent = require('./setTextContent');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n\n  // fix render order error in safari\n  // IE8 will throw error when index out of list size.\n  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);\n\n  parentNode.insertBefore(childNode, beforeChild);\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n\n  updateTextContent: setTextContent,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function (updates, markupList) {\n    var update;\n    // Mapping from parent IDs to initial child orderings.\n    var initialChildren = null;\n    // List of children that will be moved or removed.\n    var updatedChildren = null;\n\n    for (var i = 0; i < updates.length; i++) {\n      update = updates[i];\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;\n        var updatedChild = update.parentNode.childNodes[updatedIndex];\n        var parentID = update.parentID;\n\n        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;\n\n        initialChildren = initialChildren || {};\n        initialChildren[parentID] = initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] = updatedChild;\n\n        updatedChildren = updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n\n    var renderedMarkup;\n    // markupList is either a list of markup or just a list of elements\n    if (markupList.length && typeof markupList[0] === 'string') {\n      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);\n    } else {\n      renderedMarkup = markupList;\n    }\n\n    // Remove updated children first so that `toIndex` is consistent.\n    if (updatedChildren) {\n      for (var j = 0; j < updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n\n    for (var k = 0; k < updates.length; k++) {\n      update = updates[k];\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.SET_MARKUP:\n          setInnerHTML(update.parentNode, update.content);\n          break;\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          setTextContent(update.parentNode, update.content);\n          break;\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n\n};\n\nReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {\n  updateTextContent: 'updateTextContent'\n});\n\nmodule.exports = DOMChildrenOperations;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}