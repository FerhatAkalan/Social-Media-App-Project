{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactUpdates\n */\n\n'use strict';\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactPerf = require('./ReactPerf');\nvar ReactReconciler = require('./ReactReconciler');\nvar Transaction = require('./Transaction');\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\nvar dirtyComponents = [];\nvar asapCallbackQueue = CallbackQueue.getPooled();\nvar asapEnqueued = false;\nvar batchingStrategy = null;\nfunction ensureInjected() {\n  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;\n}\nvar NESTED_UPDATES = {\n  initialize: function () {\n    this.dirtyComponentsLength = dirtyComponents.length;\n  },\n  close: function () {\n    if (this.dirtyComponentsLength !== dirtyComponents.length) {\n      // Additional updates were enqueued by componentDidUpdate handlers or\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run\n      // these new updates so that if A's componentDidUpdate calls setState on\n      // B, B will update before the callback A's updater provided when calling\n      // setState.\n      dirtyComponents.splice(0, this.dirtyComponentsLength);\n      flushBatchedUpdates();\n    } else {\n      dirtyComponents.length = 0;\n    }\n  }\n};\nvar UPDATE_QUEUEING = {\n  initialize: function () {\n    this.callbackQueue.reset();\n  },\n  close: function () {\n    this.callbackQueue.notifyAll();\n  }\n};\nvar TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];\nfunction ReactUpdatesFlushTransaction() {\n  this.reinitializeTransaction();\n  this.dirtyComponentsLength = null;\n  this.callbackQueue = CallbackQueue.getPooled();\n  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);\n}\nassign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n  destructor: function () {\n    this.dirtyComponentsLength = null;\n    CallbackQueue.release(this.callbackQueue);\n    this.callbackQueue = null;\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);\n    this.reconcileTransaction = null;\n  },\n  perform: function (method, scope, a) {\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`\n    // with this transaction's wrappers around it.\n    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);\n  }\n});\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);\nfunction batchedUpdates(callback, a, b, c, d, e) {\n  ensureInjected();\n  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);\n}\n\n/**\n * Array comparator for ReactComponents by mount ordering.\n *\n * @param {ReactComponent} c1 first component you're comparing\n * @param {ReactComponent} c2 second component you're comparing\n * @return {number} Return value usable by Array.prototype.sort().\n */\nfunction mountOrderComparator(c1, c2) {\n  return c1._mountOrder - c2._mountOrder;\n}\nfunction runBatchedUpdates(transaction) {\n  var len = transaction.dirtyComponentsLength;\n  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;\n\n  // Since reconciling a component higher in the owner hierarchy usually (not\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile\n  // them before their children by sorting the array.\n  dirtyComponents.sort(mountOrderComparator);\n  for (var i = 0; i < len; i++) {\n    // If a component is unmounted before pending changes apply, it will still\n    // be here, but we assume that it has cleared its _pendingCallbacks and\n    // that performUpdateIfNecessary is a noop.\n    var component = dirtyComponents[i];\n\n    // If performUpdateIfNecessary happens to enqueue any new updates, we\n    // shouldn't execute the callbacks until the next render happens, so\n    // stash the callbacks first\n    var callbacks = component._pendingCallbacks;\n    component._pendingCallbacks = null;\n    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);\n    if (callbacks) {\n      for (var j = 0; j < callbacks.length; j++) {\n        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());\n      }\n    }\n  }\n}\nvar flushBatchedUpdates = function () {\n  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents\n  // array and perform any updates enqueued by mount-ready handlers (i.e.,\n  // componentDidUpdate) but we need to check here too in order to catch\n  // updates enqueued by setState callbacks and asap calls.\n  while (dirtyComponents.length || asapEnqueued) {\n    if (dirtyComponents.length) {\n      var transaction = ReactUpdatesFlushTransaction.getPooled();\n      transaction.perform(runBatchedUpdates, null, transaction);\n      ReactUpdatesFlushTransaction.release(transaction);\n    }\n    if (asapEnqueued) {\n      asapEnqueued = false;\n      var queue = asapCallbackQueue;\n      asapCallbackQueue = CallbackQueue.getPooled();\n      queue.notifyAll();\n      CallbackQueue.release(queue);\n    }\n  }\n};\nflushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);\n\n/**\n * Mark a component as needing a rerender, adding an optional callback to a\n * list of functions which will be executed once the rerender occurs.\n */\nfunction enqueueUpdate(component) {\n  ensureInjected();\n\n  // Various parts of our code (such as ReactCompositeComponent's\n  // _renderValidatedComponent) assume that calls to render aren't nested;\n  // verify that that's the case. (This is called by each top-level update\n  // function, like setProps, setState, forceUpdate, etc.; creation and\n  // destruction of top-level components is guarded in ReactMount.)\n\n  if (!batchingStrategy.isBatchingUpdates) {\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);\n    return;\n  }\n  dirtyComponents.push(component);\n}\n\n/**\n * Enqueue a callback to be run at the end of the current batching cycle. Throws\n * if no updates are currently being performed.\n */\nfunction asap(callback, context) {\n  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;\n  asapCallbackQueue.enqueue(callback, context);\n  asapEnqueued = true;\n}\nvar ReactUpdatesInjection = {\n  injectReconcileTransaction: function (ReconcileTransaction) {\n    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;\n    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;\n  },\n  injectBatchingStrategy: function (_batchingStrategy) {\n    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;\n    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;\n    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;\n    batchingStrategy = _batchingStrategy;\n  }\n};\nvar ReactUpdates = {\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction: null,\n  batchedUpdates: batchedUpdates,\n  enqueueUpdate: enqueueUpdate,\n  flushBatchedUpdates: flushBatchedUpdates,\n  injection: ReactUpdatesInjection,\n  asap: asap\n};\nmodule.exports = ReactUpdates;","map":{"version":3,"names":["CallbackQueue","require","PooledClass","ReactPerf","ReactReconciler","Transaction","assign","invariant","dirtyComponents","asapCallbackQueue","getPooled","asapEnqueued","batchingStrategy","ensureInjected","ReactUpdates","ReactReconcileTransaction","process","env","NODE_ENV","undefined","NESTED_UPDATES","initialize","dirtyComponentsLength","length","close","splice","flushBatchedUpdates","UPDATE_QUEUEING","callbackQueue","reset","notifyAll","TRANSACTION_WRAPPERS","ReactUpdatesFlushTransaction","reinitializeTransaction","reconcileTransaction","prototype","Mixin","getTransactionWrappers","destructor","release","perform","method","scope","a","call","addPoolingTo","batchedUpdates","callback","b","c","d","e","mountOrderComparator","c1","c2","_mountOrder","runBatchedUpdates","transaction","len","sort","i","component","callbacks","_pendingCallbacks","performUpdateIfNecessary","j","enqueue","getPublicInstance","queue","measure","enqueueUpdate","isBatchingUpdates","push","asap","context","ReactUpdatesInjection","injectReconcileTransaction","ReconcileTransaction","injectBatchingStrategy","_batchingStrategy","injection","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/ReactUpdates.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactUpdates\n */\n\n'use strict';\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactPerf = require('./ReactPerf');\nvar ReactReconciler = require('./ReactReconciler');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar dirtyComponents = [];\nvar asapCallbackQueue = CallbackQueue.getPooled();\nvar asapEnqueued = false;\n\nvar batchingStrategy = null;\n\nfunction ensureInjected() {\n  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;\n}\n\nvar NESTED_UPDATES = {\n  initialize: function () {\n    this.dirtyComponentsLength = dirtyComponents.length;\n  },\n  close: function () {\n    if (this.dirtyComponentsLength !== dirtyComponents.length) {\n      // Additional updates were enqueued by componentDidUpdate handlers or\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run\n      // these new updates so that if A's componentDidUpdate calls setState on\n      // B, B will update before the callback A's updater provided when calling\n      // setState.\n      dirtyComponents.splice(0, this.dirtyComponentsLength);\n      flushBatchedUpdates();\n    } else {\n      dirtyComponents.length = 0;\n    }\n  }\n};\n\nvar UPDATE_QUEUEING = {\n  initialize: function () {\n    this.callbackQueue.reset();\n  },\n  close: function () {\n    this.callbackQueue.notifyAll();\n  }\n};\n\nvar TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];\n\nfunction ReactUpdatesFlushTransaction() {\n  this.reinitializeTransaction();\n  this.dirtyComponentsLength = null;\n  this.callbackQueue = CallbackQueue.getPooled();\n  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);\n}\n\nassign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  destructor: function () {\n    this.dirtyComponentsLength = null;\n    CallbackQueue.release(this.callbackQueue);\n    this.callbackQueue = null;\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);\n    this.reconcileTransaction = null;\n  },\n\n  perform: function (method, scope, a) {\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`\n    // with this transaction's wrappers around it.\n    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);\n  }\n});\n\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);\n\nfunction batchedUpdates(callback, a, b, c, d, e) {\n  ensureInjected();\n  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);\n}\n\n/**\n * Array comparator for ReactComponents by mount ordering.\n *\n * @param {ReactComponent} c1 first component you're comparing\n * @param {ReactComponent} c2 second component you're comparing\n * @return {number} Return value usable by Array.prototype.sort().\n */\nfunction mountOrderComparator(c1, c2) {\n  return c1._mountOrder - c2._mountOrder;\n}\n\nfunction runBatchedUpdates(transaction) {\n  var len = transaction.dirtyComponentsLength;\n  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;\n\n  // Since reconciling a component higher in the owner hierarchy usually (not\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile\n  // them before their children by sorting the array.\n  dirtyComponents.sort(mountOrderComparator);\n\n  for (var i = 0; i < len; i++) {\n    // If a component is unmounted before pending changes apply, it will still\n    // be here, but we assume that it has cleared its _pendingCallbacks and\n    // that performUpdateIfNecessary is a noop.\n    var component = dirtyComponents[i];\n\n    // If performUpdateIfNecessary happens to enqueue any new updates, we\n    // shouldn't execute the callbacks until the next render happens, so\n    // stash the callbacks first\n    var callbacks = component._pendingCallbacks;\n    component._pendingCallbacks = null;\n\n    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);\n\n    if (callbacks) {\n      for (var j = 0; j < callbacks.length; j++) {\n        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());\n      }\n    }\n  }\n}\n\nvar flushBatchedUpdates = function () {\n  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents\n  // array and perform any updates enqueued by mount-ready handlers (i.e.,\n  // componentDidUpdate) but we need to check here too in order to catch\n  // updates enqueued by setState callbacks and asap calls.\n  while (dirtyComponents.length || asapEnqueued) {\n    if (dirtyComponents.length) {\n      var transaction = ReactUpdatesFlushTransaction.getPooled();\n      transaction.perform(runBatchedUpdates, null, transaction);\n      ReactUpdatesFlushTransaction.release(transaction);\n    }\n\n    if (asapEnqueued) {\n      asapEnqueued = false;\n      var queue = asapCallbackQueue;\n      asapCallbackQueue = CallbackQueue.getPooled();\n      queue.notifyAll();\n      CallbackQueue.release(queue);\n    }\n  }\n};\nflushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);\n\n/**\n * Mark a component as needing a rerender, adding an optional callback to a\n * list of functions which will be executed once the rerender occurs.\n */\nfunction enqueueUpdate(component) {\n  ensureInjected();\n\n  // Various parts of our code (such as ReactCompositeComponent's\n  // _renderValidatedComponent) assume that calls to render aren't nested;\n  // verify that that's the case. (This is called by each top-level update\n  // function, like setProps, setState, forceUpdate, etc.; creation and\n  // destruction of top-level components is guarded in ReactMount.)\n\n  if (!batchingStrategy.isBatchingUpdates) {\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);\n    return;\n  }\n\n  dirtyComponents.push(component);\n}\n\n/**\n * Enqueue a callback to be run at the end of the current batching cycle. Throws\n * if no updates are currently being performed.\n */\nfunction asap(callback, context) {\n  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;\n  asapCallbackQueue.enqueue(callback, context);\n  asapEnqueued = true;\n}\n\nvar ReactUpdatesInjection = {\n  injectReconcileTransaction: function (ReconcileTransaction) {\n    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;\n    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;\n  },\n\n  injectBatchingStrategy: function (_batchingStrategy) {\n    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;\n    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;\n    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;\n    batchingStrategy = _batchingStrategy;\n  }\n};\n\nvar ReactUpdates = {\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction: null,\n\n  batchedUpdates: batchedUpdates,\n  enqueueUpdate: enqueueUpdate,\n  flushBatchedUpdates: flushBatchedUpdates,\n  injection: ReactUpdatesInjection,\n  asap: asap\n};\n\nmodule.exports = ReactUpdates;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC9C,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC1C,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAa,CAAC;AACtC,IAAIG,eAAe,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAClD,IAAII,WAAW,GAAGJ,OAAO,CAAC,eAAe,CAAC;AAE1C,IAAIK,MAAM,GAAGL,OAAO,CAAC,iBAAiB,CAAC;AACvC,IAAIM,SAAS,GAAGN,OAAO,CAAC,oBAAoB,CAAC;AAE7C,IAAIO,eAAe,GAAG,EAAE;AACxB,IAAIC,iBAAiB,GAAGT,aAAa,CAACU,SAAS,CAAC,CAAC;AACjD,IAAIC,YAAY,GAAG,KAAK;AAExB,IAAIC,gBAAgB,GAAG,IAAI;AAE3B,SAASC,cAAcA,CAAA,EAAG;EACxB,EAAEC,YAAY,CAACC,yBAAyB,IAAIH,gBAAgB,CAAC,GAAGI,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,uEAAuE,GAAG,UAAU,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAGY,SAAS;AAC/O;AAEA,IAAIC,cAAc,GAAG;EACnBC,UAAU,EAAE,SAAAA,CAAA,EAAY;IACtB,IAAI,CAACC,qBAAqB,GAAGd,eAAe,CAACe,MAAM;EACrD,CAAC;EACDC,KAAK,EAAE,SAAAA,CAAA,EAAY;IACjB,IAAI,IAAI,CAACF,qBAAqB,KAAKd,eAAe,CAACe,MAAM,EAAE;MACzD;MACA;MACA;MACA;MACA;MACAf,eAAe,CAACiB,MAAM,CAAC,CAAC,EAAE,IAAI,CAACH,qBAAqB,CAAC;MACrDI,mBAAmB,CAAC,CAAC;IACvB,CAAC,MAAM;MACLlB,eAAe,CAACe,MAAM,GAAG,CAAC;IAC5B;EACF;AACF,CAAC;AAED,IAAII,eAAe,GAAG;EACpBN,UAAU,EAAE,SAAAA,CAAA,EAAY;IACtB,IAAI,CAACO,aAAa,CAACC,KAAK,CAAC,CAAC;EAC5B,CAAC;EACDL,KAAK,EAAE,SAAAA,CAAA,EAAY;IACjB,IAAI,CAACI,aAAa,CAACE,SAAS,CAAC,CAAC;EAChC;AACF,CAAC;AAED,IAAIC,oBAAoB,GAAG,CAACX,cAAc,EAAEO,eAAe,CAAC;AAE5D,SAASK,4BAA4BA,CAAA,EAAG;EACtC,IAAI,CAACC,uBAAuB,CAAC,CAAC;EAC9B,IAAI,CAACX,qBAAqB,GAAG,IAAI;EACjC,IAAI,CAACM,aAAa,GAAG5B,aAAa,CAACU,SAAS,CAAC,CAAC;EAC9C,IAAI,CAACwB,oBAAoB,GAAGpB,YAAY,CAACC,yBAAyB,CAACL,SAAS,EAAE,eAAe,KAAK,CAAC;AACrG;AAEAJ,MAAM,CAAC0B,4BAA4B,CAACG,SAAS,EAAE9B,WAAW,CAAC+B,KAAK,EAAE;EAChEC,sBAAsB,EAAE,SAAAA,CAAA,EAAY;IAClC,OAAON,oBAAoB;EAC7B,CAAC;EAEDO,UAAU,EAAE,SAAAA,CAAA,EAAY;IACtB,IAAI,CAAChB,qBAAqB,GAAG,IAAI;IACjCtB,aAAa,CAACuC,OAAO,CAAC,IAAI,CAACX,aAAa,CAAC;IACzC,IAAI,CAACA,aAAa,GAAG,IAAI;IACzBd,YAAY,CAACC,yBAAyB,CAACwB,OAAO,CAAC,IAAI,CAACL,oBAAoB,CAAC;IACzE,IAAI,CAACA,oBAAoB,GAAG,IAAI;EAClC,CAAC;EAEDM,OAAO,EAAE,SAAAA,CAAUC,MAAM,EAAEC,KAAK,EAAEC,CAAC,EAAE;IACnC;IACA;IACA,OAAOtC,WAAW,CAAC+B,KAAK,CAACI,OAAO,CAACI,IAAI,CAAC,IAAI,EAAE,IAAI,CAACV,oBAAoB,CAACM,OAAO,EAAE,IAAI,CAACN,oBAAoB,EAAEO,MAAM,EAAEC,KAAK,EAAEC,CAAC,CAAC;EAC7H;AACF,CAAC,CAAC;AAEFzC,WAAW,CAAC2C,YAAY,CAACb,4BAA4B,CAAC;AAEtD,SAASc,cAAcA,CAACC,QAAQ,EAAEJ,CAAC,EAAEK,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EAC/CtC,cAAc,CAAC,CAAC;EAChBD,gBAAgB,CAACkC,cAAc,CAACC,QAAQ,EAAEJ,CAAC,EAAEK,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAACC,EAAE,EAAEC,EAAE,EAAE;EACpC,OAAOD,EAAE,CAACE,WAAW,GAAGD,EAAE,CAACC,WAAW;AACxC;AAEA,SAASC,iBAAiBA,CAACC,WAAW,EAAE;EACtC,IAAIC,GAAG,GAAGD,WAAW,CAACnC,qBAAqB;EAC3C,EAAEoC,GAAG,KAAKlD,eAAe,CAACe,MAAM,CAAC,GAAGP,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,uEAAuE,GAAG,2CAA2C,EAAEmD,GAAG,EAAElD,eAAe,CAACe,MAAM,CAAC,GAAGhB,SAAS,CAAC,KAAK,CAAC,GAAGY,SAAS;;EAE/Q;EACA;EACA;EACAX,eAAe,CAACmD,IAAI,CAACP,oBAAoB,CAAC;EAE1C,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;IAC5B;IACA;IACA;IACA,IAAIC,SAAS,GAAGrD,eAAe,CAACoD,CAAC,CAAC;;IAElC;IACA;IACA;IACA,IAAIE,SAAS,GAAGD,SAAS,CAACE,iBAAiB;IAC3CF,SAAS,CAACE,iBAAiB,GAAG,IAAI;IAElC3D,eAAe,CAAC4D,wBAAwB,CAACH,SAAS,EAAEJ,WAAW,CAACvB,oBAAoB,CAAC;IAErF,IAAI4B,SAAS,EAAE;MACb,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,CAACvC,MAAM,EAAE0C,CAAC,EAAE,EAAE;QACzCR,WAAW,CAAC7B,aAAa,CAACsC,OAAO,CAACJ,SAAS,CAACG,CAAC,CAAC,EAAEJ,SAAS,CAACM,iBAAiB,CAAC,CAAC,CAAC;MAChF;IACF;EACF;AACF;AAEA,IAAIzC,mBAAmB,GAAG,SAAAA,CAAA,EAAY;EACpC;EACA;EACA;EACA;EACA,OAAOlB,eAAe,CAACe,MAAM,IAAIZ,YAAY,EAAE;IAC7C,IAAIH,eAAe,CAACe,MAAM,EAAE;MAC1B,IAAIkC,WAAW,GAAGzB,4BAA4B,CAACtB,SAAS,CAAC,CAAC;MAC1D+C,WAAW,CAACjB,OAAO,CAACgB,iBAAiB,EAAE,IAAI,EAAEC,WAAW,CAAC;MACzDzB,4BAA4B,CAACO,OAAO,CAACkB,WAAW,CAAC;IACnD;IAEA,IAAI9C,YAAY,EAAE;MAChBA,YAAY,GAAG,KAAK;MACpB,IAAIyD,KAAK,GAAG3D,iBAAiB;MAC7BA,iBAAiB,GAAGT,aAAa,CAACU,SAAS,CAAC,CAAC;MAC7C0D,KAAK,CAACtC,SAAS,CAAC,CAAC;MACjB9B,aAAa,CAACuC,OAAO,CAAC6B,KAAK,CAAC;IAC9B;EACF;AACF,CAAC;AACD1C,mBAAmB,GAAGvB,SAAS,CAACkE,OAAO,CAAC,cAAc,EAAE,qBAAqB,EAAE3C,mBAAmB,CAAC;;AAEnG;AACA;AACA;AACA;AACA,SAAS4C,aAAaA,CAACT,SAAS,EAAE;EAChChD,cAAc,CAAC,CAAC;;EAEhB;EACA;EACA;EACA;EACA;;EAEA,IAAI,CAACD,gBAAgB,CAAC2D,iBAAiB,EAAE;IACvC3D,gBAAgB,CAACkC,cAAc,CAACwB,aAAa,EAAET,SAAS,CAAC;IACzD;EACF;EAEArD,eAAe,CAACgE,IAAI,CAACX,SAAS,CAAC;AACjC;;AAEA;AACA;AACA;AACA;AACA,SAASY,IAAIA,CAAC1B,QAAQ,EAAE2B,OAAO,EAAE;EAC/B,CAAC9D,gBAAgB,CAAC2D,iBAAiB,GAAGvD,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,uEAAuE,GAAG,gCAAgC,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAGY,SAAS;EACzOV,iBAAiB,CAACyD,OAAO,CAACnB,QAAQ,EAAE2B,OAAO,CAAC;EAC5C/D,YAAY,GAAG,IAAI;AACrB;AAEA,IAAIgE,qBAAqB,GAAG;EAC1BC,0BAA0B,EAAE,SAAAA,CAAUC,oBAAoB,EAAE;IAC1D,CAACA,oBAAoB,GAAG7D,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,0DAA0D,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAGY,SAAS;IAC3KL,YAAY,CAACC,yBAAyB,GAAG8D,oBAAoB;EAC/D,CAAC;EAEDC,sBAAsB,EAAE,SAAAA,CAAUC,iBAAiB,EAAE;IACnD,CAACA,iBAAiB,GAAG/D,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,gDAAgD,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAGY,SAAS;IAC9J,EAAE,OAAO4D,iBAAiB,CAACjC,cAAc,KAAK,UAAU,CAAC,GAAG9B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,wDAAwD,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAGY,SAAS;IAC7M,EAAE,OAAO4D,iBAAiB,CAACR,iBAAiB,KAAK,SAAS,CAAC,GAAGvD,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,mEAAmE,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAGY,SAAS;IAC1NP,gBAAgB,GAAGmE,iBAAiB;EACtC;AACF,CAAC;AAED,IAAIjE,YAAY,GAAG;EACjB;AACF;AACA;AACA;AACA;AACA;EACEC,yBAAyB,EAAE,IAAI;EAE/B+B,cAAc,EAAEA,cAAc;EAC9BwB,aAAa,EAAEA,aAAa;EAC5B5C,mBAAmB,EAAEA,mBAAmB;EACxCsD,SAAS,EAAEL,qBAAqB;EAChCF,IAAI,EAAEA;AACR,CAAC;AAEDQ,MAAM,CAACC,OAAO,GAAGpE,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}