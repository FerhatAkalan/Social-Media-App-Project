{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar ReactMount = require('./ReactMount');\nvar ReactPerf = require('./ReactPerf');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Errors for properties that should not be updated with `updatePropertyByID()`.\n *\n * @type {object}\n * @private\n */\nvar INVALID_PROPERTY_ERRORS = {\n  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',\n  style: '`style` must be set using `updateStylesByID()`.'\n};\n\n/**\n * Operations used to process updates to DOM nodes.\n */\nvar ReactDOMIDOperations = {\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: function (id, name, value) {\n    var node = ReactMount.getNode(id);\n    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;\n\n    // If we're updating to null or undefined, we should remove the property\n    // from the DOM node instead of inadvertantly setting to a string. This\n    // brings us in line with the same behavior we have on initial render.\n    if (value != null) {\n      DOMPropertyOperations.setValueForProperty(node, name, value);\n    } else {\n      DOMPropertyOperations.deleteValueForProperty(node, name);\n    }\n  },\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n  },\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: function (updates, markup) {\n    for (var i = 0; i < updates.length; i++) {\n      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);\n    }\n    DOMChildrenOperations.processUpdates(updates, markup);\n  }\n};\nReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {\n  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',\n  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'\n});\nmodule.exports = ReactDOMIDOperations;","map":{"version":3,"names":["DOMChildrenOperations","require","DOMPropertyOperations","ReactMount","ReactPerf","invariant","INVALID_PROPERTY_ERRORS","dangerouslySetInnerHTML","style","ReactDOMIDOperations","updatePropertyByID","id","name","value","node","getNode","hasOwnProperty","process","env","NODE_ENV","undefined","setValueForProperty","deleteValueForProperty","dangerouslyReplaceNodeWithMarkupByID","markup","dangerouslyReplaceNodeWithMarkup","dangerouslyProcessChildrenUpdates","updates","i","length","parentNode","parentID","processUpdates","measureMethods","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/ReactDOMIDOperations.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar ReactMount = require('./ReactMount');\nvar ReactPerf = require('./ReactPerf');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Errors for properties that should not be updated with `updatePropertyByID()`.\n *\n * @type {object}\n * @private\n */\nvar INVALID_PROPERTY_ERRORS = {\n  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',\n  style: '`style` must be set using `updateStylesByID()`.'\n};\n\n/**\n * Operations used to process updates to DOM nodes.\n */\nvar ReactDOMIDOperations = {\n\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: function (id, name, value) {\n    var node = ReactMount.getNode(id);\n    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;\n\n    // If we're updating to null or undefined, we should remove the property\n    // from the DOM node instead of inadvertantly setting to a string. This\n    // brings us in line with the same behavior we have on initial render.\n    if (value != null) {\n      DOMPropertyOperations.setValueForProperty(node, name, value);\n    } else {\n      DOMPropertyOperations.deleteValueForProperty(node, name);\n    }\n  },\n\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n  },\n\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: function (updates, markup) {\n    for (var i = 0; i < updates.length; i++) {\n      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);\n    }\n    DOMChildrenOperations.processUpdates(updates, markup);\n  }\n};\n\nReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {\n  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',\n  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'\n});\n\nmodule.exports = ReactDOMIDOperations;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,qBAAqB,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAC9D,IAAIC,qBAAqB,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AAC9D,IAAIE,UAAU,GAAGF,OAAO,CAAC,cAAc,CAAC;AACxC,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAa,CAAC;AAEtC,IAAII,SAAS,GAAGJ,OAAO,CAAC,oBAAoB,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA,IAAIK,uBAAuB,GAAG;EAC5BC,uBAAuB,EAAE,sEAAsE;EAC/FC,KAAK,EAAE;AACT,CAAC;;AAED;AACA;AACA;AACA,IAAIC,oBAAoB,GAAG;EAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,kBAAkB,EAAE,SAAAA,CAAUC,EAAE,EAAEC,IAAI,EAAEC,KAAK,EAAE;IAC7C,IAAIC,IAAI,GAAGX,UAAU,CAACY,OAAO,CAACJ,EAAE,CAAC;IACjC,CAAC,CAACL,uBAAuB,CAACU,cAAc,CAACJ,IAAI,CAAC,GAAGK,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGd,SAAS,CAAC,KAAK,EAAE,6BAA6B,EAAEC,uBAAuB,CAACM,IAAI,CAAC,CAAC,GAAGP,SAAS,CAAC,KAAK,CAAC,GAAGe,SAAS;;IAEtM;IACA;IACA;IACA,IAAIP,KAAK,IAAI,IAAI,EAAE;MACjBX,qBAAqB,CAACmB,mBAAmB,CAACP,IAAI,EAAEF,IAAI,EAAEC,KAAK,CAAC;IAC9D,CAAC,MAAM;MACLX,qBAAqB,CAACoB,sBAAsB,CAACR,IAAI,EAAEF,IAAI,CAAC;IAC1D;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEW,oCAAoC,EAAE,SAAAA,CAAUZ,EAAE,EAAEa,MAAM,EAAE;IAC1D,IAAIV,IAAI,GAAGX,UAAU,CAACY,OAAO,CAACJ,EAAE,CAAC;IACjCX,qBAAqB,CAACyB,gCAAgC,CAACX,IAAI,EAAEU,MAAM,CAAC;EACtE,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,iCAAiC,EAAE,SAAAA,CAAUC,OAAO,EAAEH,MAAM,EAAE;IAC5D,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,OAAO,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACvCD,OAAO,CAACC,CAAC,CAAC,CAACE,UAAU,GAAG3B,UAAU,CAACY,OAAO,CAACY,OAAO,CAACC,CAAC,CAAC,CAACG,QAAQ,CAAC;IACjE;IACA/B,qBAAqB,CAACgC,cAAc,CAACL,OAAO,EAAEH,MAAM,CAAC;EACvD;AACF,CAAC;AAEDpB,SAAS,CAAC6B,cAAc,CAACxB,oBAAoB,EAAE,sBAAsB,EAAE;EACrEc,oCAAoC,EAAE,sCAAsC;EAC5EG,iCAAiC,EAAE;AACrC,CAAC,CAAC;AAEFQ,MAAM,CAACC,OAAO,GAAG1B,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}