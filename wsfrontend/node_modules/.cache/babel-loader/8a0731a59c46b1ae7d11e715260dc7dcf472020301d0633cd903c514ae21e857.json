{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\n'use strict';\n\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactMount = require('./ReactMount');\nvar ReactUpdates = require('./ReactUpdates');\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\nvar instancesByReactID = {};\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMInput.updateWrapper(this);\n  }\n}\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = {\n  getNativeProps: function (inst, props, context) {\n    var value = LinkedValueUtils.getValue(props);\n    var checked = LinkedValueUtils.getChecked(props);\n    var nativeProps = assign({}, props, {\n      defaultChecked: undefined,\n      defaultValue: undefined,\n      value: value != null ? value : inst._wrapperState.initialValue,\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,\n      onChange: inst._wrapperState.onChange\n    });\n    return nativeProps;\n  },\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);\n    }\n    var defaultValue = props.defaultValue;\n    inst._wrapperState = {\n      initialChecked: props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null,\n      onChange: _handleChange.bind(inst)\n    };\n  },\n  mountReadyWrapper: function (inst) {\n    // Can't be in mountWrapper or else server rendering leaks.\n    instancesByReactID[inst._rootNodeID] = inst;\n  },\n  unmountWrapper: function (inst) {\n    delete instancesByReactID[inst._rootNodeID];\n  },\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    // TODO: Shouldn't this be getChecked(props)?\n    var checked = props.checked;\n    if (checked != null) {\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);\n    }\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  // Here we use asap to wait until all updates have propagated, which\n  // is important when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  var name = props.name;\n  if (props.type === 'radio' && name != null) {\n    var rootNode = ReactMount.getNode(this._rootNodeID);\n    var queryRoot = rootNode;\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form, let's just use the global\n    // `querySelectorAll` to ensure we don't miss anything.\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React with non-React.\n      var otherID = ReactMount.getID(otherNode);\n      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;\n      var otherInstance = instancesByReactID[otherID];\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n    }\n  }\n  return returnValue;\n}\nmodule.exports = ReactDOMInput;","map":{"version":3,"names":["ReactDOMIDOperations","require","LinkedValueUtils","ReactMount","ReactUpdates","assign","invariant","instancesByReactID","forceUpdateIfMounted","_rootNodeID","ReactDOMInput","updateWrapper","getNativeProps","inst","props","context","value","getValue","checked","getChecked","nativeProps","defaultChecked","undefined","defaultValue","_wrapperState","initialValue","initialChecked","onChange","mountWrapper","process","env","NODE_ENV","checkPropTypes","_currentElement","_owner","_handleChange","bind","mountReadyWrapper","unmountWrapper","updatePropertyByID","event","returnValue","executeOnChange","asap","name","type","rootNode","getNode","queryRoot","parentNode","group","querySelectorAll","JSON","stringify","i","length","otherNode","form","otherID","getID","otherInstance","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/ReactDOMInput.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\n'use strict';\n\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactMount = require('./ReactMount');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar instancesByReactID = {};\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMInput.updateWrapper(this);\n  }\n}\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = {\n  getNativeProps: function (inst, props, context) {\n    var value = LinkedValueUtils.getValue(props);\n    var checked = LinkedValueUtils.getChecked(props);\n\n    var nativeProps = assign({}, props, {\n      defaultChecked: undefined,\n      defaultValue: undefined,\n      value: value != null ? value : inst._wrapperState.initialValue,\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return nativeProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue;\n    inst._wrapperState = {\n      initialChecked: props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null,\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  mountReadyWrapper: function (inst) {\n    // Can't be in mountWrapper or else server rendering leaks.\n    instancesByReactID[inst._rootNodeID] = inst;\n  },\n\n  unmountWrapper: function (inst) {\n    delete instancesByReactID[inst._rootNodeID];\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    // TODO: Shouldn't this be getChecked(props)?\n    var checked = props.checked;\n    if (checked != null) {\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  // Here we use asap to wait until all updates have propagated, which\n  // is important when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n\n  var name = props.name;\n  if (props.type === 'radio' && name != null) {\n    var rootNode = ReactMount.getNode(this._rootNodeID);\n    var queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form, let's just use the global\n    // `querySelectorAll` to ensure we don't miss anything.\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React with non-React.\n      var otherID = ReactMount.getID(otherNode);\n      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;\n      var otherInstance = instancesByReactID[otherID];\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n    }\n  }\n\n  return returnValue;\n}\n\nmodule.exports = ReactDOMInput;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}