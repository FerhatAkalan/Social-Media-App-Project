{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ferhat\\\\ws-project\\\\wsfrontend\\\\src\\\\components\\\\PostFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { getOldPosts, getPosts } from \"../api/apiCalls\";\nimport { useTranslation } from \"react-i18next\";\nimport PostView from \"./PostView\";\nimport { useApiProgress } from \"../shared/ApiProgress\";\nimport Spinner from \"../components/Spinner\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostFeed = () => {\n  _s();\n  const [postPage, setPostPage] = useState({\n    content: [],\n    last: true,\n    number: 0\n  });\n  const {\n    t\n  } = useTranslation();\n  const {\n    username\n  } = useParams();\n  const path = username ? `/api/1.0/users/${username}/posts?page=` : \"/api/1.0/posts?page=\";\n  const initialPostLoadProgress = useApiProgress(\"get\", path);\n  let lastPostId = 0;\n  if (postPage.content.length > 0) {\n    const lastPostIndex = postPage.content.length - 1;\n    lastPostId = postPage.content[lastPostIndex].id;\n  }\n  const oldPostPath = username ? `/api/1.0/users/${username}/posts/${lastPostId}` : `/api/1.0/posts/${lastPostId}`;\n  const loadOldPostProgress = useApiProgress(oldPostPath, true);\n  useEffect(() => {\n    const loadPosts = async page => {\n      try {\n        const response = await getPosts(username, page);\n        setPostPage(previousPostPage => ({\n          ...response.data,\n          content: [...previousPostPage.content, ...response.data.content]\n        }));\n      } catch (error) {}\n    };\n    loadPosts();\n  }, [username]);\n  const loadOldPosts = async () => {\n    const response = await getOldPosts(lastPostId, username);\n    setPostPage(previousPostPage => ({\n      ...response.data,\n      content: [...previousPostPage.content, ...response.data.content]\n    }));\n  };\n  const {\n    content,\n    last\n  } = postPage;\n  if (content.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-secondary text-center\",\n      children: initialPostLoadProgress ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 36\n      }, this) : t(\"There are no posts\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [content.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-\",\n      children: /*#__PURE__*/_jsxDEV(PostView, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)), !last && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-secondary text-center\",\n      onClick: loadOldPostProgress ? () => {} : () => loadOldPosts(),\n      style: {\n        cursor: loadOldPostProgress ? \"wait\" : \"pointer\"\n      },\n      children: loadOldPostProgress ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 34\n      }, this) : t(\"Load old posts\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(PostFeed, \"wgb9us7ze6Yhj+4Tr79CNdzqXgw=\", false, function () {\n  return [useTranslation, useParams, useApiProgress, useApiProgress];\n});\n_c = PostFeed;\nexport default PostFeed;\nvar _c;\n$RefreshReg$(_c, \"PostFeed\");","map":{"version":3,"names":["React","useEffect","useState","getOldPosts","getPosts","useTranslation","PostView","useApiProgress","Spinner","useParams","jsxDEV","_jsxDEV","PostFeed","_s","postPage","setPostPage","content","last","number","t","username","path","initialPostLoadProgress","lastPostId","length","lastPostIndex","id","oldPostPath","loadOldPostProgress","loadPosts","page","response","previousPostPage","data","error","loadOldPosts","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","onClick","style","cursor","_c","$RefreshReg$"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/src/components/PostFeed.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { getOldPosts, getPosts } from \"../api/apiCalls\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport PostView from \"./PostView\";\r\nimport { useApiProgress } from \"../shared/ApiProgress\";\r\nimport Spinner from \"../components/Spinner\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst PostFeed = () => {\r\n  const [postPage, setPostPage] = useState({\r\n    content: [],\r\n    last: true,\r\n    number: 0,\r\n  });\r\n\r\n  const { t } = useTranslation();\r\n  const { username } = useParams();\r\n  const path = username\r\n    ? `/api/1.0/users/${username}/posts?page=`\r\n    : \"/api/1.0/posts?page=\";\r\n\r\n  const initialPostLoadProgress = useApiProgress(\"get\", path);\r\n\r\n  let lastPostId = 0;\r\n\r\n  if (postPage.content.length > 0) {\r\n    const lastPostIndex = postPage.content.length - 1;\r\n    lastPostId = postPage.content[lastPostIndex].id;\r\n  }\r\n\r\n  const oldPostPath = username\r\n    ? `/api/1.0/users/${username}/posts/${lastPostId}`\r\n    : `/api/1.0/posts/${lastPostId}`;\r\n\r\n  const loadOldPostProgress = useApiProgress(oldPostPath, true);\r\n\r\n  useEffect(() => {\r\n    const loadPosts = async (page) => {\r\n      try {\r\n        const response = await getPosts(username, page);\r\n        setPostPage((previousPostPage) => ({\r\n          ...response.data,\r\n          content: [...previousPostPage.content, ...response.data.content],\r\n        }));\r\n      } catch (error) {}\r\n    };\r\n    loadPosts();\r\n  }, [username]);\r\n\r\n  const loadOldPosts = async () => {\r\n    const response = await getOldPosts(lastPostId, username);\r\n    setPostPage((previousPostPage) => ({\r\n      ...response.data,\r\n      content: [...previousPostPage.content, ...response.data.content],\r\n    }));\r\n  };\r\n\r\n  const { content, last } = postPage;\r\n\r\n  if (content.length === 0) {\r\n    return (\r\n      <div className=\"alert alert-secondary text-center\">\r\n        {initialPostLoadProgress ? <Spinner /> : t(\"There are no posts\")}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {content.map((post) => (\r\n        <div key={post.id} className=\"mb-\">\r\n          <PostView post={post}></PostView>\r\n        </div>\r\n      ))}\r\n      {!last && (\r\n        <div\r\n          className=\"alert alert-secondary text-center\"\r\n          onClick={loadOldPostProgress ? () => {} : () => loadOldPosts()}\r\n          style={{ cursor: loadOldPostProgress ? \"wait\" : \"pointer\" }}\r\n        >\r\n          {loadOldPostProgress ? <Spinner /> : t(\"Load old posts\")}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostFeed;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}