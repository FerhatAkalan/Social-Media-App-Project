{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventKey\n * @typechecks static-only\n */\n\n'use strict';\n\nvar getEventCharCode = require('./getEventCharCode');\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey = {\n  'Esc': 'Escape',\n  'Spacebar': ' ',\n  'Left': 'ArrowLeft',\n  'Up': 'ArrowUp',\n  'Right': 'ArrowRight',\n  'Down': 'ArrowDown',\n  'Del': 'Delete',\n  'Win': 'OS',\n  'Menu': 'ContextMenu',\n  'Apps': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'MozPrintableKey': 'Unidentified'\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar translateToKey = {\n  8: 'Backspace',\n  9: 'Tab',\n  12: 'Clear',\n  13: 'Enter',\n  16: 'Shift',\n  17: 'Control',\n  18: 'Alt',\n  19: 'Pause',\n  20: 'CapsLock',\n  27: 'Escape',\n  32: ' ',\n  33: 'PageUp',\n  34: 'PageDown',\n  35: 'End',\n  36: 'Home',\n  37: 'ArrowLeft',\n  38: 'ArrowUp',\n  39: 'ArrowRight',\n  40: 'ArrowDown',\n  45: 'Insert',\n  46: 'Delete',\n  112: 'F1',\n  113: 'F2',\n  114: 'F3',\n  115: 'F4',\n  116: 'F5',\n  117: 'F6',\n  118: 'F7',\n  119: 'F8',\n  120: 'F9',\n  121: 'F10',\n  122: 'F11',\n  123: 'F12',\n  144: 'NumLock',\n  145: 'ScrollLock',\n  224: 'Meta'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\nmodule.exports = getEventKey;","map":{"version":3,"names":["getEventCharCode","require","normalizeKey","translateToKey","getEventKey","nativeEvent","key","type","charCode","String","fromCharCode","keyCode","module","exports"],"sources":["C:/Users/Ferhat/ws-project/wsfrontend/node_modules/react-emoji-picker/node_modules/react/lib/getEventKey.js"],"sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventKey\n * @typechecks static-only\n */\n\n'use strict';\n\nvar getEventCharCode = require('./getEventCharCode');\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey = {\n  'Esc': 'Escape',\n  'Spacebar': ' ',\n  'Left': 'ArrowLeft',\n  'Up': 'ArrowUp',\n  'Right': 'ArrowRight',\n  'Down': 'ArrowDown',\n  'Del': 'Delete',\n  'Win': 'OS',\n  'Menu': 'ContextMenu',\n  'Apps': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'MozPrintableKey': 'Unidentified'\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar translateToKey = {\n  8: 'Backspace',\n  9: 'Tab',\n  12: 'Clear',\n  13: 'Enter',\n  16: 'Shift',\n  17: 'Control',\n  18: 'Alt',\n  19: 'Pause',\n  20: 'CapsLock',\n  27: 'Escape',\n  32: ' ',\n  33: 'PageUp',\n  34: 'PageDown',\n  35: 'End',\n  36: 'Home',\n  37: 'ArrowLeft',\n  38: 'ArrowUp',\n  39: 'ArrowRight',\n  40: 'ArrowDown',\n  45: 'Insert',\n  46: 'Delete',\n  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',\n  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',\n  144: 'NumLock',\n  145: 'ScrollLock',\n  224: 'Meta'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\nmodule.exports = getEventKey;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAoB,CAAC;;AAEpD;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG;EACjB,KAAK,EAAE,QAAQ;EACf,UAAU,EAAE,GAAG;EACf,MAAM,EAAE,WAAW;EACnB,IAAI,EAAE,SAAS;EACf,OAAO,EAAE,YAAY;EACrB,MAAM,EAAE,WAAW;EACnB,KAAK,EAAE,QAAQ;EACf,KAAK,EAAE,IAAI;EACX,MAAM,EAAE,aAAa;EACrB,MAAM,EAAE,aAAa;EACrB,QAAQ,EAAE,YAAY;EACtB,iBAAiB,EAAE;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAG;EACnB,CAAC,EAAE,WAAW;EACd,CAAC,EAAE,KAAK;EACR,EAAE,EAAE,OAAO;EACX,EAAE,EAAE,OAAO;EACX,EAAE,EAAE,OAAO;EACX,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,KAAK;EACT,EAAE,EAAE,OAAO;EACX,EAAE,EAAE,UAAU;EACd,EAAE,EAAE,QAAQ;EACZ,EAAE,EAAE,GAAG;EACP,EAAE,EAAE,QAAQ;EACZ,EAAE,EAAE,UAAU;EACd,EAAE,EAAE,KAAK;EACT,EAAE,EAAE,MAAM;EACV,EAAE,EAAE,WAAW;EACf,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,YAAY;EAChB,EAAE,EAAE,WAAW;EACf,EAAE,EAAE,QAAQ;EACZ,EAAE,EAAE,QAAQ;EACZ,GAAG,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EAChE,GAAG,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EAAE,GAAG,EAAE,IAAI;EAAE,GAAG,EAAE,KAAK;EAAE,GAAG,EAAE,KAAK;EAAE,GAAG,EAAE,KAAK;EACnE,GAAG,EAAE,SAAS;EACd,GAAG,EAAE,YAAY;EACjB,GAAG,EAAE;AACP,CAAC;;AAED;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,WAAW,EAAE;EAChC,IAAIA,WAAW,CAACC,GAAG,EAAE;IACnB;IACA;;IAEA;IACA;IACA,IAAIA,GAAG,GAAGJ,YAAY,CAACG,WAAW,CAACC,GAAG,CAAC,IAAID,WAAW,CAACC,GAAG;IAC1D,IAAIA,GAAG,KAAK,cAAc,EAAE;MAC1B,OAAOA,GAAG;IACZ;EACF;;EAEA;EACA,IAAID,WAAW,CAACE,IAAI,KAAK,UAAU,EAAE;IACnC,IAAIC,QAAQ,GAAGR,gBAAgB,CAACK,WAAW,CAAC;;IAE5C;IACA;IACA,OAAOG,QAAQ,KAAK,EAAE,GAAG,OAAO,GAAGC,MAAM,CAACC,YAAY,CAACF,QAAQ,CAAC;EAClE;EACA,IAAIH,WAAW,CAACE,IAAI,KAAK,SAAS,IAAIF,WAAW,CAACE,IAAI,KAAK,OAAO,EAAE;IAClE;IACA;IACA,OAAOJ,cAAc,CAACE,WAAW,CAACM,OAAO,CAAC,IAAI,cAAc;EAC9D;EACA,OAAO,EAAE;AACX;AAEAC,MAAM,CAACC,OAAO,GAAGT,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}